Project,PNumber,CreatedAt,ClosedAt,isMerged,MergedAt,MergedCommit,nFiles,nCommits,Commits,Labels,Title,Body
ompl/ompl,1,2014-05-21T05:10:47Z,2014-05-23T18:24:00Z,True,2014-05-23T18:24:00Z,d0edd3906f234925678166fbd77b6b99f6ba4c3f,4,3,39072f8614965ef2036260ca834d3ae9cf324341 b9944aacb0fccd0addb7de5ec73c16557de95fb1 7d58e35a72769a0b55d018b6e5dfd4a2407fa416,,Fix for Dubins RRTstar issue,Fix for the following bitbucket issue:  https://bitbucket.org/ompl/ompl/issue/78/segmentation-fault-in-rrt  I also added testing for RRTstar applied to Dubins. Honestly  the additional testing code just isn't very pretty  but doing it better would probably take significantly more time and refactoring. 
ompl/ompl,2,2014-05-29T04:18:08Z,2014-05-29T12:28:49Z,True,2014-05-29T12:28:49Z,b1fc3e6da1f32f883a1a1dc6fc608d53204a8393,1,1,82cd4383e5e7e6ab495de840f1c5b45b899dc082,,Added gitignore file similar to hgignore,
ompl/ompl,5,2014-06-03T07:48:43Z,2014-06-03T12:05:18Z,True,2014-06-03T12:05:18Z,9abccb0c7f835089359ab8b028a22f7d2d822f10,1,1,c78649e1607a3d19d6bc6d215c2da5464a7f5610,,add some docs,
ompl/ompl,3,2014-05-31T08:52:54Z,2014-06-06T14:46:43Z,True,2014-06-06T14:46:43Z,ba14c4b09e311a97ac968f2a099f8486f506c7a1,1,1,28bb2c3f79bce795d20d47e5377fffa1a3b5fc49,,Allow TRRT to use other optimization objectives,It appears that when OMPL had its cost framework revamped  TRRT was changed to only allow the Mechanical Work Optimization Objective to be used. This removes that restriction  which could cause a user to make a mistake and use the wrong objective  but it also allows other correct cost functions to be used like this example in the [ompl_rviz_viewer](https://github.com/davetcoleman/ompl_rviz_viewer/blob/lightening_framework/include/ompl_rviz_viewer/cost_map_optimization_objective.h)  - CostMapOptimizationObjective that gets its cost from an image. 
ompl/ompl,4,2014-05-31T08:53:44Z,2014-05-31T17:01:54Z,True,2014-05-31T17:01:54Z,664032688fd1a3024c63bc8e58e60370e8d51d18,3,3,48000e073a79e519eda0a37cfb286ad4f3f19796 421d9fa18ca6ccdd6e61080d11852638b082f1dc 4d9544f61843b2f497cd53abdfd9849e4178401e,,Small fixes,Very minor  see commit descriptions. 
ompl/ompl,10,2014-06-09T08:40:20Z,2014-06-09T11:54:53Z,True,2014-06-09T11:54:53Z,0c116d983fbc159c6eb05b9238d203d1b951c552,1,4,30bd8af279c6dc4ad70fa9ee50c5f0859f409fa0 9161ba7df32094db51cb67ce173e8bdc120704ba 02de8b3c10709e92655dff281f12848e8825a6f0 5e990cfb9e499926463fe8c2df5b36eff2ce34e5,,Parallel plan changes,This simply disambiguates some of the INFORM messages from other places in the code that have the same message  as well as adds a comment.   
ompl/ompl,12,2014-06-09T09:03:30Z,2014-06-09T11:58:36Z,True,2014-06-09T11:58:36Z,4d93cf9772cd5388a3c0c48b201783476045f652,1,3,30bd8af279c6dc4ad70fa9ee50c5f0859f409fa0 02de8b3c10709e92655dff281f12848e8825a6f0 48f8f3b071d6157d5abe280ae85291f942ba3db3,,Ptr for graph state storage,I tried using `OMPL_CLASS_FORWARD` but I'm not sure why it didn't work  perhaps because its just a typedef. Is this method ok? 
ompl/ompl,7,2014-06-08T23:01:41Z,2014-06-09T02:33:33Z,True,2014-06-09T02:33:33Z,fd70337dc6e10423bef2a1e5b8de5d8f03acd0d0,1,2,3821fd58615dfb4c8c0f5f5b7cf8c8b969d8b454 830e043b8825c0ce2b746c3fea509533a9739036,,small optimizations prefer multiplication over division,
ompl/ompl,8,2014-06-09T00:00:01Z,2014-06-09T02:40:34Z,True,2014-06-09T02:40:34Z,0e6904982005841842bd5e2167528c0b58622fd7,97,2,ec33e8966834911631f24c0914852afdf43048f0 aaceba82afbfe619811eba05654e90026cf54197,,place and consistently when declaring variables,
ompl/ompl,9,2014-06-09T00:22:07Z,2014-06-09T02:49:01Z,True,2014-06-09T02:49:01Z,c0aae8b67ff2cb3ee3cb9814bab43c13055beb7e,220,3,ec33e8966834911631f24c0914852afdf43048f0 aaceba82afbfe619811eba05654e90026cf54197 661bdbb75f94b161b8e12e51c818edf7937fdf9a,,Remove void,This pull request is on top of #8 (that one should be merged first) 
ompl/ompl,13,2014-06-10T06:26:01Z,2014-06-10T13:58:29Z,True,2014-06-10T13:58:29Z,1657c68478f578321acf99350212cae1e87f4db8,3,2,9000aab6d348a32847886a6e8f4f9a25a0e6bd2b 3b5ce596a9e1e88e952ba8cacb8e3675ec27754b,,add missing construtor for completeness,
ompl/ompl,14,2014-06-13T08:52:54Z,2014-06-13T14:54:37Z,True,2014-06-13T14:54:37Z,1f4652c786f7d939b5123acaacefe5b42d6bd5ba,3,2,fcc21ec910936e40ac809987e31f03a0a76c427c 43e3f0802782550ab42c8bf69f0923ca8671b9e8,,Minor Documentation,- Explain better Boost warnings for Ubuntu 12.04 - Clarify var meaning - Deprecate in documentation StateStorage.h - this should be deleted according to @isucan but MoveIt! depends on it still (though doesn't actually use it). This is a first step. 
ompl/ompl,15,2014-06-14T19:28:22Z,2014-06-14T22:55:45Z,True,2014-06-14T22:55:45Z,77901bef470f263b0ca647389d527af7474f3e71,1,1,8af6c5a84de597b8d142d045184ac0dca991f21e,,add compound version,
ompl/ompl,16,2014-06-15T00:05:11Z,2014-06-15T00:12:58Z,True,2014-06-15T00:12:58Z,0fa6b8059aa1c8840934a9a26c3242bb83fbb93a,1,1,559b6bbbe4fea646a7d71d0b667e53c559640a72,,minor stylistic fixes,
ompl/ompl,18,2014-06-16T16:46:43Z,2014-06-16T17:36:23Z,True,2014-06-16T17:36:23Z,bdbdeead238b35bd66af3f179077855f11f0f952,24,1,e43799a4896da387895c8dfbea3b2af838a5f516,,Clarified OMPL_INFORM output for all planners,Its never been clear to me what e.g. "RRT: Starting with 1 states" means in the console output. I tried to clarify this common message in OMPL with more detail. 
ompl/ompl,17,2014-06-16T16:42:01Z,2014-06-17T19:39:26Z,True,2014-06-17T19:39:26Z,cb8f3bd87364bbe68547c9f96aad02998f5036c6,4,5,9b7b2152f84919fb952fa109261d2321b26b6f0c 5dbf2bcfa220d74e88b861fd8a6610a3cc361dab 84766a2ec7d45a91ee67ee4c70da5e993467865b f674df7fb77abd5e2abf3933893772a5814704c8 f7735d4e1a18c327a38e325947e93cc7ea5dc80b,,Minor changes,- I use PlannerDataStorage's `load` function many times  so need to suppress the huge amount of DEBUG output - Small comment fixes - Pointer for PathGeometric 
ompl/ompl,11,2014-06-09T08:52:21Z,2014-06-18T03:07:30Z,True,2014-06-18T03:07:30Z,37ff4c9f8b41e6a06539ea9b12b1604f53d908b5,29,5,a858d214db8ca4c3c5016f470f867c958fc48e9e 57d262a1f9d4dd884291818c9addc253ac6c33bb 4964f0580e748a9f8322469062b7c8a12b4fa850 01c2efe16df583ebcc0255114452f4b8ff9eec5a b0b2e9be25e3b6fdea85b1780781bf3a51b1f88a,,Track planner name in solution,I don't think we should merge this yet since I haven't finalized what exactly I will need  but basically I need to add the ability for OMPL to tell me which planner generated the solution when multiple planners are sharing the same `ProblemDefintion` and adding multiple potential solutions. Currently  when you query for the best solution (shortest path that is not approximate) it only gives you the path  but can't tell you where it came from.  For the Lightning Framework implementation  I need to know if the path is from a database or planned from scratch. I can imagine other uses for this  too  such as automatically choosing the best planners to spawn into threads  and maybe benchmarking.  I'm not super happy with the function I added called `const std::string& getSolutionPlannerName(void) const;` but its the simplest change to give me the functionality I want.  I tried instead to return the entire best solution  instead of just the best solution path  but the problem I kept running into is that the vector of solutions is not wrapped in boost pointers  and I didn't want to make a copy of the solution because I also needed to be able to pass a NULL return value if there is no solution. I'm open to debate on this.   At the bottom I show an example with TRRT of the small change that can (and should) be optionally added to all the planners.  I also added a note in the code: ` /// \todo Create a second constructor which requires plannerName  and make this one deprecated so as to encourage OMPL devs to pass a name? ` 
ompl/ompl,6,2014-06-05T23:11:15Z,2014-06-09T00:00:20Z,False,none,ed601dec7ca045ee4401a0fcd6e30fec11e6b652,144,2,476be9245abc16eb44b86a5d9e2b82f858f290a9 717310182e1b86c5ad91f38b7a6852f0edb5ec6e,,Use and consistently,
ompl/ompl,20,2014-06-19T05:31:50Z,2014-07-22T04:32:28Z,False,none,dc003257817b9f4c8c6776720824eace55418937,70,22,8d71a2a50be46051a080714007fdce48520374df 0fb482641c7f8df62a654300fe833fa287cb2199 76e03a96fdd2d90919eee2ddf119727b96973fd8 e704be50474fcc4a185d36195b9ddffa6a9ff6e2 6ee094180df159f0ccbc5dcc1a74200b0d845dd2 31c751160eae47e6cff448d7edcfd54f6a0013c1 229cb44bd94c0ee000fbe2a87a3fbfcaca16f0fe 0f3838dea796974607511c190c900425288d9b00 f24bf4f80c2b8a340a208f7ae132fa2e9ecf6684 068ef9fd0928fd5b0f0486dafc7cf2a5cd16d0c7 b49ee0e3e91c05d4d54127a83084cba9f0ef165f 2a1062e0802e54ed6fb9b8acae052543b818be30 fff158d7f6b39728b48dc6d785487b377bfad8d7 0bba33288cf6561eb1d3705218e20063a0e9a25b 9e7439b85ee6edcd8935fdf2ba58ffb092d01137 414b30d2630530c10a731eb841644383116d2824 f9d774dbf6d1639e967d4e8d8553922aad581b21 a120c36449617d6eaf796fa79522c5920f7c87d9 edf8f87f0cd207d02141b008cd73379f1dfb5295 3f735565bc172d67537985eac0fcba5baafc3170 a3b05f9588701c57d23e6c9b7449349f0c37e1be 117f3369906e2de8fd0e4835093932a4367ceee9,,Minor changes,- More descriptive comments useful when doing parallel plan - Feature to allow color console output (stolen straight from MoveIt!) 
ompl/ompl,23,2014-07-22T04:32:12Z,2014-07-23T01:04:04Z,True,2014-07-23T01:04:04Z,383a363ede16921accddd1153862ae42d683b342,2,1,3057d967503324e96940f1a27aae05c28e144dd3,,Small debug output changes,- More descriptive comments useful when doing parallel plan  Originally from https://github.com/ompl/ompl/pull/20 
ompl/ompl,24,2014-07-23T09:42:01Z,2014-07-23T14:17:12Z,False,none,1ff098eac55aecd32c14241a6492089d35cea282,1,1,80a8a5b5a5857a1539fdae3a0a48b067d604ad93,,in the SteeredControlSampler Class SpaceInformation pointer not assigned,By trying to implement a Steer function I bumped in this debug message:  ``` Reading symbols from /media/data/omplapp/build/Release/bin/demo_RigidBodyPlanningWithSteering...done. (gdb) run Starting program: /media/data/omplapp/build/Release/bin/demo_RigidBodyPlanningWithSteering warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000 [Thread debugging using libthread_db enabled] Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1". OMPL version: 0.15.0 POSQ Steer function activated Warning: Assuming propagation will always have between 1 and 10 steps          at line 56 in /media/data/omplapp/ompl/src/ompl/control/src/SpaceInformation.cpp Warning: The propagation step size is assumed to be 0.157129          at line 66 in /media/data/omplapp/ompl/src/ompl/control/src/SpaceInformation.cpp [New Thread 0x7ffff575b700 (LWP 13402)] Info:    RRT: Starting planning with 1 states already in datastructure  Program received signal SIGSEGV  Segmentation fault. 0x00007ffff7b0291e in boost::shared_ptr<ompl::control::StatePropagator>::operator-> (this=0xa0)     at /usr/include/boost/smart_ptr/shared_ptr.hpp:418 418            BOOST_ASSERT(px != 0); (gdb) bt #0  0x00007ffff7b0291e in boost::shared_ptr<ompl::control::StatePropagator>::operator-> (this=0xa0)     at /usr/include/boost/smart_ptr/shared_ptr.hpp:418 #1  0x00007ffff7b28fd0 in ompl::control::SteeredControlSampler::sampleTo (this=0x479140      control=0x4792b0  source=0x475020  dest=0x479210)     at /media/data/omplapp/ompl/src/ompl/control/SteeredControlSampler.h:69 #2  0x00007ffff7b290cc in ompl::control::SteeredControlSampler::sampleTo (this=0x479140      control=0x4792b0  previous=0x4750c0  source=0x475020  dest=0x479210)     at /media/data/omplapp/ompl/src/ompl/control/SteeredControlSampler.h:76 #3  0x00007ffff7aaecad in ompl::control::RRT::solve (this=0x46fae0  ptc=...)     at /media/data/omplapp/ompl/src/ompl/control/planners/rrt/src/RRT.cpp:144 #4  0x00007ffff78af559 in ompl::base::Planner::solve (this=0x46fae0  solveTime=10)     at /media/data/omplapp/ompl/src/ompl/base/src/Planner.cpp:132 #5  0x00007ffff7b25bc8 in ompl::control::SimpleSetup::solve (this=0x7fffffffdbf0  time=10)     at /media/data/omplapp/ompl/src/ompl/control/src/SimpleSetup.cpp:113 #6  0x000000000044278c in planWithSimpleSetup ()     at /media/data/omplapp/ompl/demos/RigidBodyPlanningWithSteering.cpp:248 #7  0x0000000000442a0f in main ()     at /media/data/omplapp/ompl/demos/RigidBodyPlanningWithSteering.cpp:269 ```  The SpaceInformation *si_ was not assigned in the constructor. 
ompl/ompl,26,2014-07-27T19:30:32Z,2014-07-30T14:40:40Z,True,2014-07-30T14:40:40Z,6f9d6dfcedf12e6b7792a70d151967a36991f99a,2,2,fdf22d5e417fa4bc009dc56d64b1e4eb7c5a4dca 96668358ed969bea8060f9b5465c8730db4ca3a3,,maxSampleAttemps_ logic removed ,The intention of this variable was ok  but it was not correctly implemented: if the numSamples change it did not change. However  although that was an easy fix  there is a theoretical problem with this variable. Let's say we want 1000 samples  so the sampleAttemps is set to 10000 (ten times more by default) we run FMT and get a cost c1. Now we do it for 2000 samples. Theory says that this new experiment should  most of the times  return a better solution. However  that is for 2000 _sampled samples_   it could happen that we want 2000 samples  sampleAttemps is set therefore to 20000 but it is a hard environment so that the actual samples are much less than 2000  so the optimal convergence will not work.  Now  we sample until the algorithm get numSamples: valid samples. It could happen that ptc trigger true before that... but well  that is a negative characteristic of this algorithm. 
ompl/ompl,19,2014-06-17T14:26:20Z,2014-07-31T22:01:21Z,False,none,da2a998ccf2d27252e125d1596463da00793fb95,9,21,5f9961f3480f1c77efe1296141565d85086f9e28 e92ed6bb1a5c19e8d7933b962c5aff5edd6ec577 1e835eb17c79ab8a78c1fd70cafef9db3d4a8f54 0fb0407dfe5912fb699dd049caec12f5ab37fb06 0322cbe9113e4e47b92f44d458500cfc416a8f34 566ae1a174887adfed2c525ca746a4025e772b28 4825ff2eace91e4fd1787d0ba4e0706298338850 37db19c019e37673063086a7d890d27a38cb2f1e 106f16efcd0d4d985bfa0ef90dac1cabc7f4b3e9 8cb524c95f89ded00213227395a3990e4dcac965 556cacf5721050e201ae8ae41f6e876904f6beb0 948b25ed0d825f2b7810714e48fbd073d6242b79 99a983a7f02b94be924964b82411c8e4974170be 01de3794554f02bfd06f860a431bc44ea3d1e0de db6a1b45eadc4749f58ca34a312b8f688e14a336 51dfb339b564e50b1107ccd95426751f04efe7c7 4b51e492dc49a79c2252a722f434ded9349cf995 0ec8a95f1d6c3e4783922942abf0d9bb181b7fd9 27236b3867dc368b31930b66dc2f143fa160fc1b 13618cee7f924fa5dfe3b9d8e79d50f1d24a2d0f ebcafa135a64e85609a27965114f596f90e8e81f,,CForest first version,Sorry about the (void) convention in functions  this is what happens when you copy and paste ignoring the other changes :)  Other RRTstar tweaks have been also overwritten. 
ompl/ompl,22,2014-07-18T05:40:06Z,2014-08-01T13:54:12Z,True,2014-08-01T13:54:12Z,ec58bc3f55e5b4bae508c8d983628df9944591f0,2,2,3f735565bc172d67537985eac0fcba5baafc3170 bb014c9e045223367ffd38d8f34495952a303252,,SimpleSetup Improvements,Moved useful features from Lightning to SimpleSetup while I was making Lightning inherit from SS: - New function to access a solution's planner name  corresponding to new feature https://github.com/ompl/ompl/pull/11 - Handle to set a custom optimization objective - Formatting fix where `last_status_` should be camel case - `simplifySolution()` debug output now tells user how many states where removed 
ompl/ompl,29,2014-08-01T07:37:35Z,2014-08-01T13:54:53Z,True,2014-08-01T13:54:53Z,461136a39692c37b43add11af93b1d19f1a2ba71,1,1,7b5e5f8170df37b77967679aa5b5b53d17d657d2,,Added debug output to simplifySolution to match other simplifySolution function,Similar to https://github.com/ompl/ompl/pull/22/files#diff-2b469443df4022778dc4055f80020d41L165 
ompl/ompl,32,2014-08-13T04:30:44Z,2014-08-13T14:22:44Z,True,2014-08-13T14:22:44Z,4b6032846b92b435f883f6bbf9bd1481bdf2fcd4,1,1,0dd66e01f5a54f943f0653eedeb981d60379949c,,Made setStartAndGoalStates also clear pdef solution paths,As discussed in https://github.com/ompl/ompl/pull/30 
ompl/ompl,30,2014-08-08T09:12:19Z,2014-08-13T14:24:53Z,True,2014-08-13T14:24:53Z,c2e3a3be8d7e903477c3a3e519700d003166f5d1,2,1,02ea6fa4dd71cc037ca3dcabdf6e2fb19d9b13c3,,Various Small Changes to SPARS implementation,I'm not sure what the rule is on suggesting cosmetic changes to other's algorithms  I won't be offended if these are not good ideas. - Made clearQuery() also clear solutions paths - this is the most important change. This function claims it allows you to use the same sparse graph for different planning problems  but it neglects to remove past solutions from the ProblemDefinition - Added debug output function - Made reachedFailureLimits() test public so that the graph can be pre-generated without a plan and still have a stopping condition 
ompl/ompl,33,2014-08-18T04:04:26Z,2014-08-18T12:08:22Z,True,2014-08-18T12:08:22Z,571c16d08ef3fee1fb3152a8f53947b16ff02456,1,1,56206ffcf503e802bad565f5c187c61d47f575d6,,Fix pow signature matching problem in OS X clang,because the parameters for std::pow is (double  unsigned int)  it fails to search matching signature of `pow` in OS X/clang. this patch fixes it to search (double  int) signature correctly. 
ompl/ompl,34,2014-08-18T07:29:06Z,2014-08-19T09:38:18Z,False,none,aed7182c43409133e96634886920c6b7f94fc7cc,1,1,32ab04dc24ef56f029928c6e795f4a65817399f6,,SPARStwo Prevent close start and goal states from throwing an exception,This prevents `constructSolution()` from throwing an exception:  ```     if (prev[goal] == goal)         throw Exception(name_  "Could not find solution path"); ``` 
ompl/ompl,31,2014-08-12T10:13:19Z,2014-08-19T14:51:47Z,False,none,7e4c2ec1b9bbabfd3853ac821485003c903dfaab,2,2,367a82ab3b5c15aa5d8adf1b8d3d733a0344a51c 2b309fcc0bf9eb3a5f0007b06d8efb901554f185,,Visualize callback,I think OMPL needs some more tools for introspection  so I'm proposing this callback that is very flexible but essentially can be used to visualize each step of a planner  e.g. each time an edge or vertex is added it can be visualized in OMPLapp  [ompl_visual_tools](https://github.com/davetcoleman/ompl_visual_tools) (for ROS)  etc.   You can see how I am using this on the client-side [here](https://github.com/davetcoleman/ompl_visual_tools/blob/395b7593458aef5d8dad33350e842bda1f385862/src/ompl_visual_tools.cpp#L744)  ``` void OmplVisualTools::visualizationCallback(ompl::base::Planner *planner) {   ompl::base::PlannerDataPtr data(new ompl::base::PlannerData(si_));   planner->getPlannerData(*data);    publishGraph( data  moveit_visual_tools::PURPLE );   publishSamples( data );   ros::Duration(0.1).sleep(); }  ompl::base::VisualizationCallback OmplVisualTools::getVisualizationCallback() {   return boost::bind(&OmplVisualTools::visualizationCallback  this  _1); } ```  Then on the planner-side  I call `visualizeCallback()` whenever the graph/tree is modified  and I can watch the planner work in real-time.  I chose to pass a pointer of the planner in the callback rather than PlannerData because I wanted - Flexibility and generic-ness to any planner's data and visualization needs - So that the entire feature can easily be disabled without still always calling getPlannerData()  which can in some cases be an expensive operation  This is a bold pull request for me  so I understand if its not a desired feature (but I'm still going to use it) 
ompl/ompl,35,2014-08-28T03:56:06Z,2014-09-01T14:34:48Z,True,2014-09-01T14:34:48Z,d855054b1390378bf875da929baaba020d1e1f34,4,2,22e656ddd65ea6848dc7df993ba57520371953d1 8b7194379ffc5a78efecc5db87457778ddfec68d,,remove support for non symmetric distance or interpolate ,This is functionality that depends on the implementation of the NN data structure  and not something we can count on. As it is we can still get into trouble with non-symmetric spaces. 
ompl/ompl,27,2014-07-29T17:06:11Z,2014-07-30T20:49:12Z,True,2014-07-30T20:49:12Z,b632c9d7265fe44237c3d1af77a681162c06a841,1,1,d9aeaacef38640daaaf6313bf422b2f59f6fb3e5,,Check whether problem definition is set before completing the setup call,This change lets RRTStar work with MoveIt without segfaulting. Specifically tested this fix with MoveIt's benchmarking stuff. 
ompl/ompl,25,2014-07-23T15:59:15Z,2014-09-03T23:15:50Z,False,none,8e80eb4413d420f6039e313da9e2cc119db57b11,25,99,5f9961f3480f1c77efe1296141565d85086f9e28 e92ed6bb1a5c19e8d7933b962c5aff5edd6ec577 1e835eb17c79ab8a78c1fd70cafef9db3d4a8f54 0fb0407dfe5912fb699dd049caec12f5ab37fb06 0322cbe9113e4e47b92f44d458500cfc416a8f34 566ae1a174887adfed2c525ca746a4025e772b28 4825ff2eace91e4fd1787d0ba4e0706298338850 37db19c019e37673063086a7d890d27a38cb2f1e 106f16efcd0d4d985bfa0ef90dac1cabc7f4b3e9 8cb524c95f89ded00213227395a3990e4dcac965 556cacf5721050e201ae8ae41f6e876904f6beb0 948b25ed0d825f2b7810714e48fbd073d6242b79 99a983a7f02b94be924964b82411c8e4974170be 01de3794554f02bfd06f860a431bc44ea3d1e0de db6a1b45eadc4749f58ca34a312b8f688e14a336 51dfb339b564e50b1107ccd95426751f04efe7c7 4b51e492dc49a79c2252a722f434ded9349cf995 0ec8a95f1d6c3e4783922942abf0d9bb181b7fd9 27236b3867dc368b31930b66dc2f143fa160fc1b 13618cee7f924fa5dfe3b9d8e79d50f1d24a2d0f ebcafa135a64e85609a27965114f596f90e8e81f 20fbb8c628e4a4fcd56e4018191a4fb08ae3b234 351801a28f639cfc1948881d5bcc213973f44e3a caaa4ce1ea477902dd4c41aedbb5ff7bd7419d07 677902d9d509a75c6f68e2ff8c29cc2eb8469c64 3e982acdf9ebbfe93907ca0c12ac1f0692c4d2f4 51c1b2bf28180bb01e8bf5f6b652807ea9fc207e b687aafefb10cd30682ae0085525837864cd06a2 9f259d14085a62bd899d3b404ae1dd305f1f2fc6 aaeb4115e1f2ea419c24720883243a445abe94f8 31fae904e1102859ceec6d93c5f7bb62cdfbf5ff 8ad9b032ed0e4d7cf79775ec60a8fc6798e8c6c7 044145401309e62267432dd6dc3a30304935038d db1aad04fe9fb88a2978a4968dd5d7e70f2236a6 eafe2eea45d99068d74be0ed6f8ba0ed25b1263f bb21655f6c1fa15c4043a582e73fc2c1e2a9150d 7bfa2b2867be61255b6b58f211abbafe0f5a4f74 74930f88ebc297c62b7317acd62b89685b099436 4f3ce98a961e281a2b419d538a16990f840b758a e054e5b91e6c25e5a573863cc219a94f1fced1fe 8c078a8efb1fcc8228772d486b269ec93ba5323f 5eda01fa9d21d5befe8e5f778b74888577e192d9 b546845c5889791ef60e469c32b3c380a639f7fe f70bf757c903b5b892b21e7b5ad39d5167365fe1 6f9e46241c3de10c7519ce7c9f66d3b132df4b93 a91c48246a9cea00350518296aa989a6d3eac67d 3bf2152fc3e4fdf85d4210089ac348b2918644d9 77a7d02629928e65bf5e0b4d78aac3237f57be28 0c43a2fe01b415af598aa1462734e9759fad20d4 e2f5babb8adb7bf6f952cfad2d98f9d8ad1b4251 86a66ee36c0be4de0a35cb402c515d4d042d1a40 789bfa4aa7a07ed96f5ecff89ccd0c35467c4d66 d438fbb412b2c65b04cafb74afa4f4bbedb26a25 00e829c1eaa2c74104232ef5111925846eeba3df 527513c1e59954d140092ed55b014c0a5e7a29f5 63a1bc487934278973a0b16f859cf555e371884d abab966d33651c0d755d0d81aaf2c44d2f95b7bf 2c6e666c21aca693bd2deb9bf210c29f912852e3 421718d02bb0d65d608ead9a89c1f1b8248709c5 d0cf8dd6f967ba30ef8b99be160dcbc0a85c85e2 9f93a63a02d38941da206736542cd6b2ffc3dc42 18718c812d2d5aa715649031d9ec009a40f2b88e 19df580794256b7c8387e22eae038a5f0e0b7998 b9193e8e2d8c0894f3c151cc8257bc5a3a7b1212 998213d31caf13ea0f3e9aef0fbba712a1072b8f 90138d056da826cb5f84afb26794557f671f07c7 883b21fe47aa6f39bcf08c62f414cf1ca21c1dee d5e77d3215cbb1b2202884954fb1aa8e867b9ba3 d428f32c9fae5b9e081a20d7aa45bae04aaf1cbe c7f91e5a3ce71cca9d9fc624459e70c771931451 c1d9063be65ab0958dfa181a041f0f8e7bdb4423 3e0d13d347abeb58a12483ae9a4e2262e542e9e1 c200b58c7959b7090379035704c3a0aea4c653fb baa7e1872bc68bb9d0318c8a9def691d3cb546e9 d8df9b43e3c3a78a5e55fdd0520f2f14b7c7cf49 6141301cb73107477ba7f7114b118b5084376448 b877b1d39514e8b25c6a3fe60b6d4e7662554fd1 f2929855dd1ce9257c0bad306dd4eb28a4ccddf9 5cc7b7343feb8e7f6eabaca2822467ac9e10ef9c 5b1021fe9918bae3429d086a2df97b366a6a265f 5e129b791050af28e4b0609f9a132ca7997dad2c 37d8c63d286829db2f094c59c6841b682a6b0f9e 10cbcb512dbe643e6858227edfd88da972bb5a82 70fd9f2e024e068418cee2ade47be849d28d98b5 c2c9186f321763291dc5090c102db31c9735a537 5d495d5a1e01d4d8052a5e2f1e42ab906c8ba794 a1e57621be51e8a79b38292b025ab9790bf1424d 53ee176d7cb573c52ed7d3a76f5c246afde7d454 65a84a0ce642b6834de2d60410937900ce336f4f c4b3bef73e002b7f763e3e388a86d57646536865 4bf689f72dea4eaae69b2131412cc6d0c2dedb8c 0eab3855296197bf191ce69f39d1c1904dde99eb 205e457a55f78298d7bd78c2016a611a3c277635 bf470442ff70eb451f2c33924095ab6eba80da81 4101258e1fc49d1a126d858cd249f63c28fae354 b759554f12bfeb956a69dd2bdc25b30a96441f20 71cf41b36b5a32474743cb8d913b19d462d05ef1 6fc43fdb5323a27838a32cc3d47605d8fe28571d b4d3c50e6ab11cf192f7533f088fd4c6ce636239,,CForest new version,Do not focus on the documentation  I am leaving it for the end since there are a lot of changes and probably more to come. 
ompl/ompl,36,2014-09-27T23:55:38Z,2014-09-28T01:53:31Z,False,none,832120fec7327c99e0a68bf3df04909e54b4d967,2,24,5f9961f3480f1c77efe1296141565d85086f9e28 e92ed6bb1a5c19e8d7933b962c5aff5edd6ec577 1e835eb17c79ab8a78c1fd70cafef9db3d4a8f54 0fb0407dfe5912fb699dd049caec12f5ab37fb06 0322cbe9113e4e47b92f44d458500cfc416a8f34 566ae1a174887adfed2c525ca746a4025e772b28 4825ff2eace91e4fd1787d0ba4e0706298338850 37db19c019e37673063086a7d890d27a38cb2f1e 106f16efcd0d4d985bfa0ef90dac1cabc7f4b3e9 8cb524c95f89ded00213227395a3990e4dcac965 556cacf5721050e201ae8ae41f6e876904f6beb0 948b25ed0d825f2b7810714e48fbd073d6242b79 99a983a7f02b94be924964b82411c8e4974170be 01de3794554f02bfd06f860a431bc44ea3d1e0de db6a1b45eadc4749f58ca34a312b8f688e14a336 51dfb339b564e50b1107ccd95426751f04efe7c7 4b51e492dc49a79c2252a722f434ded9349cf995 0ec8a95f1d6c3e4783922942abf0d9bb181b7fd9 27236b3867dc368b31930b66dc2f143fa160fc1b 13618cee7f924fa5dfe3b9d8e79d50f1d24a2d0f ebcafa135a64e85609a27965114f596f90e8e81f bcb17a204d4291c1685da3c1395949eb511cd029 b33837169d3aa214f16b45aac8d80d21bccd6e10 391983d5fa634f2c52d22783cb0f59f0fa169f56,,Doc fix,Sorry about these pedantic changes  but there are thousands of Javier Gomez around the world  and just a few hundreds of Javier V Gomez. Also  forget all the other commits  I had my master completely messed up. 
ompl/ompl,28,2014-07-31T19:03:28Z,2014-09-28T02:03:51Z,False,none,29f2141840f842f51b9b2fd6779dd05b8647d79e,7,20,a586757e505febf9c0a5a20874e4f9fa3c439401 aec78d00866e465d13119c49da0ba06bb114511d ee83dcfaa144a634e574482c206fbc77e5077cef 9f897325910349b7a327433b3aac52959d089fb0 673855e260ab141544bb2626b43f13d58b14b224 4b3cbcbb66aec789d4ddd7f9664c1fe9d47f2f90 5a7e2e0bc8278fbf4122f09877d4eeb84362e66c 379b11128a93277a056e289b487f0f278a3e5476 84e48d9fa4503d488bd23f173e9bed9e914f0df5 89c8e0aee6a89d7f9e45deac7508f2273a89ac58 e429cfad92a338784ee6cd28e6a196d7deb47c91 16ace747601d46dc5e35c5d919db8031bfd41d8a cf0eb415623959542e28fdced865e94f25340898 6b582de19952280de1265bcdca4ce32629c562ce 6e82b164ab7bd5a9f1d8b397ce1c342fd294d5cd a4831701080fab119fd6a63630279c09926c21e6 8822300310e47c0e21979b49c6a43bc3c31fd7e1 1cd64e004814b520d63cb6967a40ebf33e8ecf3a 76890528cb8bad8bcd972b3377b24d2908bba511 af869b1905a91a4042467d487502e837883d8080,,Initial state of the bridge class we discussed,- It required to adapt the steer API we talked few weeks ago. - The changes in StatePropagator.h are provisional  to avoid compilation errors due to the API modification. - Please  take a look at the TODO  there are many of them which are important so I do not want to continue until discussing them.  Main problems: - the distance function. Steer returns total duration of the control but most of the time this is not the metric to use. - When interpolating  the final state will always have an error  I cannot find a way of avoiding the use of a step size variable. I kept it this way for simplicity but tried some other things. This is important for optimizing planners. 
ompl/ompl,21,2014-07-03T08:13:53Z,2014-09-28T02:03:58Z,False,none,2ff7ecd8ab3cafeff4fac52d8144c138238c8ee9,13,16,d5f251f9dd8046c84f89870768d9efcce9004378 7e22e26fc1e33b14de61a77aea7748857aa4e1a5 2c530858b5b79951629812572dfaeb79362bf55c fdda77a4ceff1d482654d90063c99d46e671556d aa7d71dfd0285693b692f683791e4e0febf04acd 5839e4367a2ad130feed662d210b8c8a54761b96 ad5f8f7c6457b2454c3973129245acc9a67915f1 ead207e25c0658edbde82c8a8f6ba156303a4c6e 8ca69f9e6f6b0dc83a2116faaf9c7a0e18b581cc 03d4e138b63b638ae2ddee98da37fe0edea4e95d 88326239d3ddca560f4dfa9ff3c28913275654c3 2ebf8b28420b78ce0bb0367d75fa6d7ccbd72c8f 4d43832aa3929a436dfedf7f7ac508ac591adf14 b7a80f4a378fbf1ef67ccea8f92d90900be02103 2cd6b948bdf15d38225d7a062228a24d55d032e4 204f700cfee9c0dcbdc3228d7b21826ab8708b7b,,Initial kinodynamic KD work,
ompl/ompl,39,2014-10-16T17:51:41Z,2014-10-21T15:09:07Z,True,2014-10-21T15:09:07Z,547022f5fedfe3c98723f46da2c21a20ad0bba6b,6,2,e6e42b3c21053f449ad3dd800b01fed744c732d5 72df6854c5e2f456e0d969548031490d9073deea,,Small tweaks,- Spell checks - Added prepend function to PathGeometric that adds states to front of path - Made getOptimizationObjective() const - Better debug output  In preparation for merging Lightning. 
ompl/ompl,37,2014-09-28T02:10:30Z,2014-09-28T16:18:14Z,True,2014-09-28T16:18:14Z,8b9c0646c8e38a991485feadeba909d5d97ccf6d,2,1,eb380fc08bd7c37dbcaf44cb4ef348e5c086f672,,pedantic doc fix,
ompl/ompl,43,2014-11-13T20:45:56Z,2014-11-13T21:17:36Z,True,2014-11-13T21:17:36Z,1f4d4c82df336b822b80f10de52d909394378b45,1,1,33c468b21688ee88b562fd4563920c9121a7d157,,benchmark doc fix,Sorry for this little pull request  but this had lead me to errors many times. 
ompl/ompl,44,2014-11-16T05:17:19Z,2014-11-17T16:04:52Z,True,2014-11-17T16:04:52Z,0e59c78021ee3fc0d998e55713438f1ddaec066a,4,1,8079d7ac99524013ef60ce79fe9f30d9f9178f75,,CForest design schemas added,
ompl/ompl,45,2014-11-19T03:46:38Z,2014-11-24T04:17:32Z,False,none,bf14d92a2f8d3c208b6bd923a118b5ef15424680,1,1,55e6838b245ae194621277300ba8a293c309dc38,,Fixed uninitialized shared pointer bug,It is required that the path pointer be initialized because in the constructor for PlannerSolution it calls `path->lenght()` here: https://github.com/ompl/ompl/blob/master/src/ompl/base/ProblemDefinition.h#L76 
ompl/ompl,42,2014-11-12T14:31:30Z,2015-01-12T23:05:47Z,False,none,10e2b8a38999793ef5a6db87136c3b6e19c03b7c,6,5,1fb4b042e83f5e51b3c239c114d0ace60f76c9e5 da10983056b3c3995fe29e98ae87da4f70d155b9 50c438ef52e14f488d844363852dd3f90ff36e3e 11ec767f883b6b39145a6d6e8eb1c76b54be1e82 896f289e504e84a69abeffc5be41a6b1f4705c65,,RNG Local Seeds,This is mostly a synced version of [a pull request](https://bitbucket.org/ompl/ompl/pull-request/32/rng-local-seeds) from BitBucket. Discussion in said pull request had favoured creating a "quasi-random" constructor for creating samplers of known seeds; however  I am unclear if that is the correct answer  as it: 1. Provides no method to set deterministic behaviour for RNGs themselves  only samplers (i.e.  RRT's goal sampling would be unaffected) 2. Doesn't scale well to different types of state samplers ([a future pull request](https://github.com/utiasASRL/batch-informed-trees/tree/informed_sampling)) 
ompl/ompl,41,2014-11-02T00:58:09Z,2014-12-09T20:22:56Z,True,2014-12-09T20:22:56Z,93f240bee2a365d5442acb45918a813072bafed4,2,9,51915c7efdd83e0ea45954bcdd03b8263f6f2a3c eaf5abcded6cb23a3e35c7761829df01f290b50b 54baccf9861b1deaee0345de0a10305f8551be53 17031b519e19dbe3712145a409bbf95681f403ea 9d96a064f406ee06aad58505e7c70641fcee9f80 7bd9422529092aef9e83ccd3fec701f7c06b425c 536e47e448fad9f1a5b03333fc8d355a1f91e194 824e6d61286b7d6f32990c49310fa173f18fc1c6 f127f97dd0e301bd165dc90bee57bf6ad7aedd91,,FMT updates improves code heuristics kNN and collision check caching,Please  note that the new parameter cacheCC_ is intentionally not included as a PlannerParam because we want the general users to take advantage of it and not disable it accidentally. An advanced user could use the setCacheCC() method. 
ompl/ompl,47,2015-03-05T17:14:22Z,2015-03-05T19:59:23Z,True,2015-03-05T19:59:23Z,94824e47209b5b2ecdc00fa7e62759435d575f0e,4,2,50c438ef52e14f488d844363852dd3f90ff36e3e 37e31347035366c46d320a3988a4c3d072e5467e,,Cleaned pull requests,The changes discussed in #46 as a single commit. 
ompl/ompl,46,2015-03-04T21:25:43Z,2015-03-05T16:34:21Z,False,none,816bb98935c8dc8c830a16ed2842899e22c56518,4,11,1fb4b042e83f5e51b3c239c114d0ace60f76c9e5 da10983056b3c3995fe29e98ae87da4f70d155b9 50c438ef52e14f488d844363852dd3f90ff36e3e 11ec767f883b6b39145a6d6e8eb1c76b54be1e82 896f289e504e84a69abeffc5be41a6b1f4705c65 b13d9fffc4f580875507abe6fb8617713e419ea3 6eebac504ec5d988f1279b9cd0b59de0db5c15bd 27dc611b241832e5418a553de6dd65b019d3b9c3 e6d28f8ff1a55dc5f97a58948fe0f88d4bd4a77c ca91e83c06286951ecabb43d2689ba479b638f51 2c5aac7df264082e169b9d24055df5e6160ff12f,,Miscellanea Local seeds for RNG,Third try's hopefully the charm. Just local seeds for RNGs  no tunnelling them through StateSamplers. As discussed in prior pull request (#42).  These are clean-up changes before pull pull requests for Informed RRT\* and BIT*. 
ompl/ompl,48,2015-03-05T21:31:02Z,2015-04-23T14:07:20Z,True,2015-04-23T14:07:20Z,0c7151244d327cba685d8c2c24f27072a05ceaa0,8,10,32325f264c3b92dab3b8820c24e2ff88b14a6983 4750568582ffe3eb1c78e01f7e2aae53c7ef6f16 dc818928b0cd03f3ee47a078e22d22a7a4be25cf 927c9b76af76f05439d923830454c1a4f473bd5e 3202964150c44989e10fefcde2eea9a0f96ee173 44e42ee77cfbb835661768cb2534ab531d7d7deb e7473dcffe3a3578502f68149e84df3b2f37801c de68f2f975fa7febd2d6ed4242107480f5c15f57 d85143fc49dc1ddaa93aae2860195a1963add1af 2d2b76e19dfa6456612c7e3390b8ec7f80ccf67a,,More miscellanea,Hi Guys  So I found a few more miscellaneous features when getting the Informed Sampling pull request ready. I figured it was better to do them separately first and keep things a little more neat and tidy.  So here you go! Jon 
ompl/ompl,49,2015-04-24T13:22:56Z,2015-05-19T03:01:44Z,True,2015-05-19T03:01:44Z,5663025b2df4f4a93ecda4975400f1f2168d8bff,19,10,149600adc8424c8de4b22e3d3ab935a88e8b15e9 248350cd12a52df5001b64392f43cfd6785f82e0 8b4f66927b5e4ace662d419d1f17b7def84082dd a6ccb86b0831ebd68a31c402c997210bab5757fe c53ccc5fc00e141d14006547c10fbed2282441cf c062ac4ee0a2e0ea4401d34e9ed889a3703fbc95 2970b8d318c6324ede80b7ef2b7e7f87658781b2 d12e2013391ac50bbdf039c8261691fa26bbc596 2140985d82295f51fc32797a556642c60f350c94 b15cfb9ba670676af6aab6adad2a2d6e466a0bb1,,Informed Sampling,This is the idea of informed sampling generalized to different optimization objectives. There is a generic rejection sampler that would work for any objective  and a direct sampling technique for path length (as derived in the Informed RRT\* paper).  These samplers are applicable to any planner and are required for Informed RRT\* and BIT*  though neither of those algorithms are included in this commit.   There are a couple areas where I would really appreciate input on design decisions  so I've put some comments inline about that. As soon as we work through this  I'll submit PRs for Informed RRT\* and BIT*.  Thanks in advance  Jon 
ompl/ompl,38,2014-09-28T02:23:40Z,2015-05-22T20:05:59Z,False,none,02499f549b70152ea6f6aa8b470c444be5d4c0b7,7,1,c5af432e749b47572ac1ebc3a840e37112e9c0c6,,bridgeClass redone,Same as the previous pull request for this class. 
ompl/ompl,50,2015-05-21T00:04:54Z,2015-05-27T04:57:07Z,True,2015-05-27T04:57:07Z,eef3d520a11e836424acf7eb4dcbe348bd4a2731,9,6,c5e1f96b014122177d178cbd937aa74db1612653 99bed16cce171317cc7baefea6a0d43a2de8c3f9 f99a2a4af1f36f84a0ee480c0d5a7451906ce88b c5a4ae90c0a41be0629aa74c080453447ed8a1b7 b13fee86c6e9623cc3a12ad1a884046a1cc94084 56a8a6368f12a72846ea2aa31b302e25f2d07d87,,BIT ,Hopefully this PR is easier  as it's a stand-alone planner. This is BIT\* which will be presented at ICRA next week  where I will hopefully say it's available in OMPL. :wink:.  You can find a video explaining it on [YouTube](https://www.youtube.com/watch?v=TQIoCC48gp4) and a preprint of the paper on [arXiv](http://arxiv.org/abs/1405.5848).  Thanks  Jon 
ompl/ompl,40,2014-10-16T19:50:35Z,2015-03-15T21:47:54Z,True,2015-03-15T21:47:54Z,fbced34d5c350d563dc90029c3bb70424772ec4d,12,13,2c18f3b13569900769bcac6da0105d9b7da882b7 acce9c48fc060bb561e50a47b3684225593abd68 0d125310d23cf80699860b79c4af70facf268185 4aac3c2a2535f502031c13fb49961087a1000ffb 681986de1bd74a6fe76e67270982e44f3b7c845e c0000af64b9e23fa309c376b981c5fd1d121c382 1e72d26dc789fa073390002c1d19b7b41adc91db 4326f9ec282958d336229b01c2521599dbbbf427 6b3ceb47d48c5e9cacc1fb3237500d5afc1b7e7c acfd35ef734c8ed24d19d3c42700a5bca77016c7 72055190fefb9bfbbe433c650db9c29691c1184d eb45dc2591805ba416e01a2fe855f959af58849b f079aa4b1b2826b1fda55293ea2c7f135432e1dd,,Implemented the lightning experienced based planning framework,Also contains https://github.com/ompl/ompl/pull/39  See publication [A Robot Path Planning Framework that Learns from Experience](http://queue.ieor.berkeley.edu/~goldberg/pubs/berenson-ICRA2012-final.pdf)  Part of my GSoC project. 
ompl/ompl,55,2015-06-23T08:44:24Z,2015-06-23T11:04:45Z,True,2015-06-23T11:04:45Z,84742faeb6af9d6f111956274d6a0c46ee4d7fb5,1,1,e8afb67372fb95e6b5abf12baceb3bc4182d96f6,,Fixed omplapp issue with BITstar,With the current BITstar code  the following error appears when trying to run omplapp gui:  ``` Traceback (most recent call last):   File "../../gui/ompl_app.py"  line 53  in <module>     ompl.initializePlannerLists()   File "/home/jvgomez/Desktop/omplapp/ompl/py-bindings/ompl/__init__.py"  line 107  in     initializePlannerLists     ompl.geometric.planners = ompl.PlanningAlgorithms(ompl.geometric)   File "/home/jvgomez/Desktop/omplapp/ompl/py-bindings/ompl/__init__.py"  line 30  in __init__     self.addPlanner(obj2)   File "/home/jvgomez/Desktop/omplapp/ompl/py-bindings/ompl/__init__.py"  line 89  in addPlanner     print r  int(r) ValueError: invalid literal for int() with base 10: '1u' ```  This PR solves this issue. Furthermore  it is now consistent with other planners. 
ompl/ompl,51,2015-05-31T20:06:29Z,2015-06-01T16:34:41Z,True,2015-06-01T16:34:41Z,c172a12c26e9227d3bd29002e5b7f5fe886f081a,3,2,86288b75b747791d921ce92481caadb2593f9fc2 057c9233a9a9b8336204f04cd8dc198afe433dcd,,Lightning updates,Reduced various warnings to just `INFORM` because they are intended functionality  Added new virtual function `doPostProcessing()` to `ExperienceSetup` that allows an experience planner (Thunder) to process a new trajectory into its database in an asynchronous manner.   In preparation for Thunder PR 
ompl/ompl,52,2015-06-15T21:49:22Z,2015-07-01T02:48:44Z,True,2015-07-01T02:48:44Z,8e2c7cc6afb98d448bfa6cdb8c8eee0f6d12caa3,21,21,0ca74716b13c298670cc86e1fee71bd6ff80c8c9 a30a7df99ad6873ad57223c6f8655c0c349aa5fe c400ff0c23b9de7a93616d294eb0a08883a730d0 1fc67e3b421415a715f25e2fe373987a8a04a3e5 67bf593ffb54c55aba02c289e510523c29ef958e 30d6ebce7ee686df1b986462f2f06b0c4f61b33b 82a70e500012badc89edb729a61798eaf185d737 eacf1b7d13f4352cb285db7dc047cb887d9c6e4f e05e9d2f74cb6166d8e8908988a2b145e540b722 5907bfc52f3fd6127f4ba5c3f8dc8b2a5d7d9aca 41766182b04332a2a0213de58b52572a0c8f393d dadef19a71973a46ea9f5575de1ed9f6d79a9188 7ee4bd87535c36035da5173752a9a44b9d8f0ddc e22871eef72f61d1ed0d4b7d8b745650dbf3f85c 76211186c852fa5158e4bf6555c96d978374590b 39f6b20e913dd7d52ab29b442585ee896638b145 acbb6a7135bd4dc6a8573421fdf208ac38288428 e4dd71fc6f2e8a474dc727b927b61a4391d05d8a 77228e68a60e65712df3d7a5776d17aaf8a93851 2aa62ac81e58ead996752075e6e673626bf09962 84d23c0eb45e890dc9e7d3e76b97f5bf4f724b1c,,BITstar demo,Here is an attempt at making a demo for optimal planning that uses BIT*  FMT*  RRT* and PRM*. I used the existing optimization objectives that were available in the demo.  I was also able to isolate the ifdef for Eigen to only the direct path-length sampler.  FYI  I don't really know Python  Jon 
ompl/ompl,53,2015-06-17T06:23:43Z,2015-07-21T14:10:38Z,False,none,834f8818cab2b4f68fdf5844fa7eb922d69cec55,2,1,dff67222be5ad1f3b565d8acdce06de9cf70edb5,,Moved ANSI colors to header files,So that the colors can be used elsewhere 
ompl/ompl,57,2015-07-14T19:17:56Z,2015-07-26T14:23:06Z,False,none,fe2f3b62b68f8d784e910523470bb6fe88ff556c,4,6,9e160303026c5e09b3f57a1e50785a61834306d7 faf82f34169879ef9da2fd0ecd599f57b0dd334f 94fdd18bc479a19de161444541238e390997496e 3b8fa1f80fed53c6677bd3a2e47d81a9909bf502 c7dc5bd0ab454ac49724b9975f13844512650607 2629e109fa5bfc40d9e88d64d557b3b0772c36c7,,BIT prune fix to avoid NearestNeighbors remove ,I've reworked the datastructure and prune logic in BIT\* to avoid using the `NearestNeighbours::remove()` method.  I'd been thinking about investigating how slow `remove` was for a while  and given the [current issue](https://bitbucket.org/ompl/ompl/issues/153/problems-with)  it seemed like a relevant time to address it.  Jon 
ompl/ompl,58,2015-07-28T14:59:40Z,2015-07-28T15:25:34Z,True,2015-07-28T15:25:34Z,f3ed1b3c6813abc404ee9ad9d189d32a5350c599,1,2,ad72c676557cd50b171714f47562d6ddf75922f7 3047216af4597f9decd074ca4c5f87f34ab99237,,Fixed setup segfault when FMT is used with MoveIt ,
ompl/ompl,59,2015-08-01T22:32:38Z,2015-08-11T14:23:17Z,True,2015-08-11T14:23:17Z,ecd100f0f81695a52251487982ef0d605b84bfc1,8,1,7b632a92488412a9eb6aacaa6c715a48891cfbf4,,Margin free cost comparisons,These are the changes for option (1) as in Issue [#156](https://bitbucket.org/ompl/ompl/issues/156)  moving the margin into only `isSatisfied`. I made the change faithful to the previous behaviour  though I am somewhat surprised to notice that the margin actually makes it harder to satisfy the specified threshold. 
ompl/ompl,60,2015-09-07T11:34:45Z,2015-09-08T15:30:45Z,False,none,0a4dcb92103458b909e97d66535dea508ac2ac25,1,1,cd0a14baffda7c87c3da1439b2ce199d22cb560e,,update homebrew for travis CI,Travis' homebrew uses boost 1.56  though homebrew users will be generally on boost 1.58 By updating brew  this will more accurately reflect the average homebrew install 
ompl/ompl,54,2015-06-17T06:53:55Z,2015-09-03T14:26:57Z,True,2015-09-03T14:26:57Z,474d13790ed43029faae360ed10e98c433284061,17,3,46590ae714995ba4bcef53dbfe116f766ef3868b f0951d319b024a96c67e0cec98cddb15809eba42 09d8da4e48ccfdf35a3de6ba3c78574713402714,,Thunder Framework,> We present an experience-based planning framework > called Thunder that learns to reduce computation time > required to solve high-dimensional planning problems in varying > environments. The approach is especially suited for large > configuration spaces that include many invariant constraints  > such as those found with whole body humanoid motion planning.  I've tried to clean lots of stuff up  but in needs more run time testing and a demo for sure. 
ompl/ompl,61,2015-10-19T21:42:32Z,2015-10-23T20:37:58Z,True,2015-10-23T20:37:58Z,79fd8e0aefe65597db6d0e1858c79461b631fabc,3,1,a54cd5519eec372631fcfe23832e1676fa00c2b0,,Fix for 2dcircles_optimize,I was able to replicate the errors in 2dcircles_optimize **with** the old margin in the comparison. They appear to occur because  sometimes  the planner simply doesn't find a better solution than the initial one.  This code relaxes tests enough that it will pass in the situations. Whether that is too much of a relaxation is an open question.  Will rebase once it's ready to go. 
ompl/ompl,56,2015-07-01T12:40:41Z,2015-10-23T21:01:44Z,True,2015-10-23T21:01:44Z,d205e6de9ae7b5f79294410bee6d87d07ee22b76,17,2,95fe2d533cdf71eaff1853ca5640c5875c2c18e1 d6641e27378f410d1cba4e1cdadda19324cfd4f0,,Informed RRT ,Ok  So here is the changes to use informed sampling in RRT* (i.e.  Informed RRT*). While I was at it  I cleaned a thing or two up in the RRT* code  so I'll be going through to put some inline comments about those as well.  I'm working to "relax" informed sampling to handle multiple starts/goals (i.e.  GOAL_STATE**S**)  so I'll submit that after this PR  hopefully before the next release. 
ompl/ompl,62,2015-10-26T01:46:53Z,2015-10-27T03:09:54Z,True,2015-10-27T03:09:54Z,82256ee1e1cb6b6786ee07d4d2846e8ccfebc5f6,18,2,e10fd5e85017a8ec267e39b1f3459b9d5d808601 a6582dfe738ed21a507bb53d206a04071c9456bf,,Informed sampling multistart goal support BIT MoveIt and infinite problem support,This is the last PR I had in my queue. It's a couple things. 1. Support for multiple starts/goals in `PathLengthDirectInfSampler`  2. Support for the MoveIt! workflow in `BIT*`  3. Support for planning problems with infinite bounds in `BIT*`  4. A couple other new ideas for `BIT*`  and 5. Documentation updates for `PathLengthDirectInfSampler ` `InformedRRT*` and `BIT*` to support the upcoming release.  Will rebase when it's ready to go. 
ompl/ompl,63,2015-10-27T18:47:58Z,2015-10-27T18:51:04Z,True,2015-10-27T18:51:04Z,b6e807b573e6627a620b680404c8376d249ee004,2,1,0fd838156364e4d0d2c54ff4cf98c3bb83d337ec,,BIT Infinite problem domain fix,A much better default-way for `BIT*` to handle the "size" of the first batch of an infinite planning problem. Instead of assuming unit measure  estimates it as that of a (hyper)cube proportional to the distance between start and goal. Provides some relation to the order-of-magnitude of the problem  and moves the `std::isfinite` check on the measure to just `setup`. 
ompl/ompl,64,2015-10-28T14:35:34Z,2015-10-28T15:43:01Z,True,2015-10-28T15:43:01Z,c3b4eb178206315271c163256f992ae8ce2a1eaa,3,1,c08da8986e239462519270ae3cb05531519c30de,,BIT problem measure fix and default switch to k nearest ,
ompl/ompl,65,2015-10-28T20:01:19Z,2015-10-28T20:18:43Z,True,2015-10-28T20:18:43Z,e53a07cc311cb83eb03931491302720ee4aac009,1,1,eef6436fcdd440b8c41917b54c2841953efcc17b,,BIT Fixes in mutually exclusive parameter checks ,
ompl/ompl,66,2015-12-31T01:28:44Z,2016-01-08T22:25:53Z,False,none,42b090472040fbeb7e29e946ad1062f931565a76,7,4,534422c2b98e212754c37756edcfccefdc210786 101046806f7b867b83243ecc1ab7de5e2caea991 d12d9935c26dd03c139e2c67a74844fb6fd0e957 ac11ccce566c36f5e6baa5d0c0062f1ff77002ff,,BIT Correct k nearest version,The existing k-nearest version of BIT\* is only an approximation. This is a version that is correct. Also cleaned up some other things while I was in there.  Happy new year  Jon 
ompl/ompl,67,2016-01-10T02:07:57Z,2016-01-11T22:12:40Z,True,2016-01-11T22:12:40Z,3e8fc88c29d0bb53810001b1c23e317f3bee3651,7,4,af4ca4e26d9a7252cb79425e45d06595d126d2bf dfbdde33f996a8e82d8bba69f33f8fc43c43d4dd b32d72d9e3e08376c415c6b190de8f19a1e1eb34 0d840115b4f1459034c026864598605b7d486dd7,,BIT Correct k nearest version,It turns out that the regression bug was a weird and subtle timing-related thing in my private experimental code. I rebased a commit to update a description in the header file though  and it won't let me reopen the previous commit.  The description was:  > The existing k-nearest version of BIT\* is only an approximation. This is a version that is correct. Also cleaned up some other things while I was in there.  This is only changes to BIT\* and a cosmetic change to Informed RRT*  so hopefully it'll be easy to merge? 
ompl/ompl,68,2016-03-08T20:29:55Z,2016-03-08T23:00:37Z,True,2016-03-08T23:00:37Z,e4b370db33472a032d69f51d39aa38acb74063e4,2,1,cd4697cf3607c050f695db6d9619fedec5abc08f,,Fixed missing const of operator in two comparator structs ,… which caused errors when compiling with Visual Studio 2015. 
ompl/ompl,69,2016-03-25T11:49:05Z,2016-03-28T14:08:20Z,True,2016-03-28T14:08:20Z,5b169d3b41d583e2324d6eb5ceb3dde3317bdd6b,2,4,049c3146e13cad3935b27e1b1a0f845c2efc3f22 c6f0373d1c694535ded6b5eff69a63a63bc4d46f 51d0dcfe9c2ecf61c844bd067ce409fd73f2f3ed b9c6bbbebcd3b6f5bf72942fc0808f2fe55ac4b4,,Extended FMT add resampling strategy if FMT is not able to find a solution ,Resampling strategy for FMT.  Work included in the paper of the [Bidirectional FMT paper](http://arxiv.org/pdf/1507.07602.pdf(http://arxiv.org/pdf/1507.07602.pdf) (that planner will be included in another PR). This enormously increases the success rate of the planner with very little impact in the computation time.  Other minor modifications (simplifications) have been included. 
ompl/ompl,70,2016-03-25T16:27:12Z,2016-03-31T19:54:07Z,True,2016-03-31T19:54:07Z,c1bceb665fb09cc55cc7368040fb864a1de729ec,9,1,61cf92d3732017f2378da442a49a5a2d08200f87,,Add BFMT planner,I acknowledge the code can be done much more elegantly. However I didn't have the time for this and it has been waiting for more than a year.  I have many improvements in mind and hopefully I will start doing them in the following days  such as: - Code refactorization. - A real precomputation strategy. - Option of running both trees in separate threads.  I could not test the python bindings because in Ubuntu 14.04 is being a nightmare to update castxml and that stuff  sorry. I have run the planner several hundred times and never crashes. If you could perform a benchmark to check that results are like supposed to be that would be awesome :) 
ompl/ompl,72,2016-05-05T16:43:02Z,2016-05-05T22:26:48Z,True,2016-05-05T22:26:48Z,932e98c5164f5434a212c880ca48df6a6c5d3b81,4,1,dd77484430df425382fac0f21300f4e639f5285c,,Remove compatibility wrapper struct for incompatibility with prev Boost and GCC,Since the minimum required boost is now greater than 1.48  we can remove this hack:  > The InterfaceHash structure is wrapped inside of this struct due to a compilation error on > GCC 4.6 with Boost 1.48.  An implicit assignment operator overload does not compile with these > components  so an explicit overload is given here. > Remove this struct when the minimum Boost requirement is > v1.48.  I've been running this fix on my fork of SPARS for some time now with no problems 
ompl/ompl,71,2016-05-05T16:33:52Z,2016-05-21T22:20:51Z,True,2016-05-21T22:20:51Z,1e92a43483fe50d31c2f6fa81fdf30b3f413c58e,2,1,c6702c5e03d2a837bd9f3e8419d95dda90e2b2f2,,New valid state sampler w min obstacle clearance threshold,Implements a sampler as described in [Sparse roadmap spanners for asymptotically near-optimal motion planning](http://ijr.sagepub.com/content/33/1/18.full.pdf) by Andrew Dobson and Kostas E. Bekris. This sampler only accepts states "for some clearance cl > 0". This is a missing component in the current SPARS and SPARS2 implementation in OMPL  but I am using it in my current work.  This PR also includes an optional settings for state validity checkers that would allow iterative or APPROXIMATE checkers that do an iterative search in increasing distances from the sampled state to have get/set that search distance. This search distance could/should correspond to the above sampler's minimum clearance threshold. The sampler I'm using this setting for is a 2D grid based on PPM image files  but I do not believe its generic enough to go inside OMPL itself. 
ompl/ompl,74,2016-05-21T15:58:02Z,2016-05-21T22:16:44Z,True,2016-05-21T22:16:44Z,d85e79089ed85e0d3588677e957a3e13f92666eb,3,1,e3ca1ae56edf2c27e2295c780af0c1faa823e25b,,Fix vector subscript out of range,Ig Manu reported:  > I'm trying to implement a path planning > algorithm  but with the Thunder framework I keep getting an error  when > doPostProcessing() is called (everything before works fine) >  > Vector Subscript is out of Range. In Sparsedb.cpp line 815: > i == addedStateIDs[usedIDTracker] >  > Do you have an idea  what could cause this? I'm building on Visual Studio 2015.  This PR changes one line to have an extra check for this error.  Also small variable name formatting fix included. 
ompl/ompl,76,2016-08-04T01:12:26Z,2016-08-04T13:46:32Z,True,2016-08-04T13:46:32Z,f3f01171d4feb05c8ac3becb313eef81cdd6de3b,1,1,00a059ffa24a92d754623f8efb22086167e134ad,,Speedup storing edges in PlannerData,Original implementation takes n^2 - was very slow for my Sparse graph research  New version is n 
ompl/ompl,79,2016-08-04T01:20:46Z,2016-08-08T18:22:59Z,False,none,39538493bc6a6cfd0a37596468ade7a06a9bab90,1,1,72832aad2671c3f8db67e89fb0fac2e35a4171ff,,Ignore optional clang format files,
ompl/ompl,73,2016-05-05T17:16:59Z,2016-08-08T21:40:28Z,False,none,492f3d9436ea8133e43a27032bd108f4eab7e4e8,341,1,cca84ff529b123a3a7cb5e29fd9d8530b6655a84,,PROPOSAL Autoformat all code with clang format,See discussion in https://bitbucket.org/ompl/ompl/issues/237/auto-formatting-of-style-guide-guide-using 
ompl/ompl,81,2016-08-08T21:40:14Z,2016-08-09T01:55:16Z,True,2016-08-09T01:55:16Z,8168d08d309ba4c85b45b4832fa62e0398c0dfa4,348,1,2d28861925da4297595ef91ee11fe9e015bc4c63,,Applied clang format to entire src ompl codebase,See discussion in https://bitbucket.org/ompl/ompl/issues/237/auto-formatting-of-style-guide-guide-using  Replaces https://github.com/ompl/ompl/pull/73  Documentation: https://github.com/ompl/ompl/pull/80 
ompl/ompl,80,2016-08-08T21:33:56Z,2016-08-09T01:56:03Z,True,2016-08-09T01:56:03Z,1511d8937dfd618f9cd5cb31d8342787545a6601,2,1,66c9c860449cc497fa19d66186546acde321cfd7,,Document how to use clang format ,also adds the config file to base of project  does not actually run clang-format on the code base 
ompl/ompl,83,2016-08-10T17:31:27Z,2016-08-11T05:30:17Z,False,none,none,8,3,a3c0dc0be3fb95ab37283c9816d48e42e3c340e3 87ea5db3a8938236b0c9691d5419388ac4ef4a3a 2e4f8ba5272a7073850ef0c7ffb0310c0a601dad,,RRT Smart Implementation,Added the functionality of RRTstar-Smart algorithm as an option on top of RRTstar. Related publications: - Nasir  J.  Islam  F.  Malik  U.  Ayaz  Y.  Hasan  O.  Khan  M.  & Muhammad  M. S. (2013). RRT*-SMART: A rapid convergence implementation of RRT. International Journal of Advanced Robotic Systems  10. - Islam  F.  Nasir  J.  Malik  U.  Ayaz  Y.  & Hasan  O. (2012  August). Rrt∗-smart: Rapid convergence implementation of rrt∗ towards optimal solution. In 2012 IEEE International Conference on Mechatronics and Automation (pp. 1651-1656). IEEE. 
ompl/ompl,82,2016-08-10T17:11:10Z,2016-08-11T14:56:13Z,True,2016-08-11T14:56:13Z,cd125256fed41e9ee2b9c564f89b4ef0423261b5,2,1,4c411604d407bc9b7e2bad0e5f25437d7e3574a9,,Fix for bug when RRT prunes vertices in the goal region ,
ompl/ompl,86,2016-08-15T17:16:11Z,2016-08-19T19:11:57Z,True,2016-08-19T19:11:57Z,19e0e9ff3cfa0c11e69db473f30ca6fc02967a56,10,5,493b7afed0dd45e37aa21db252eac692f2939154 eff70b5a6d9a1f5f52b0f84eeae3e97ab6c16a20 a2aab275d1d0a7623c7641b427b701b46e2173bc 938470f04ed91c2f7ae1eba24dfb87e928584b6d 3263884cb89687fed91dde9cc0ab2412e31aa3cb,,Implementation of RRT and RRTX,- Implementation of RRT# and RRTX - Adding check of max range in RRT\* when using k-nearest neighbors 
ompl/ompl,87,2016-08-30T15:16:59Z,2016-09-07T13:50:13Z,False,none,fa109abef29bc2a8e59d425f998311f8e94c4fc0,6,1,23a46c6d6e8e1c01726dcb3692547e5b6eb94b50,,Renaming RRTX to RRTXstatic Disclaimer,After discussion with Michael Otte (author of the RRTX paper)  we decided to rename RRTX into RRTXstatic because only the static part of the algorithm is implemented (dynamic obstacles and robot motion are not available in this implementation). We also added a disclaimer explaining it.  It aims at reducing confusion for the user and preventing users from naively using it in dynamical environment. 
ompl/ompl,77,2016-08-04T01:14:42Z,2016-09-08T03:54:56Z,True,2016-09-08T03:54:56Z,7b10384c9f8c97f64fab1f542ce26d3314bba2f8,1,1,23a15cacd7107ba8207fdbe6c5aa18b3c7712aba,,Add hook for non const motion validator for setting clearance ,
ompl/ompl,88,2016-09-10T01:16:51Z,2016-09-10T01:53:24Z,True,2016-09-10T01:53:24Z,6247e4e8a666ae66996d095260b50e8964f5b0f6,4,1,769a6e0f03266999c43d040ecb91b50121449fee,,Remove simpleSampler_ from SPARS 2 an unused artifact from PRM,
ompl/ompl,89,2016-09-26T03:15:25Z,2016-09-27T23:01:19Z,True,2016-09-27T23:01:19Z,d07dd9148b00d2f14efc2dc0735e2f02ae240b01,3,1,e26153b10de77c6351be924747d26620e7422c14,,Dockerized Travis build,- Add Dockerfiles for Ubuntu Xenial and Debian Jessie - Test in Docker via Travis - Disable Travis cache of /usr/local under linux due to timeouts 
ompl/ompl,90,2016-09-28T21:54:42Z,2016-09-29T02:55:45Z,True,2016-09-29T02:55:45Z,df6167b9058c47bf4f08fd99eacee69a41a43ab2,2,1,8a1c90b3acb5fffe700632b1f987ff39f7903f19,,Retry apt get in docker build,
ompl/ompl,91,2016-10-05T20:48:45Z,2016-10-06T01:49:47Z,True,2016-10-06T01:49:47Z,c9d7482fe849fe0f93d024224dc30391306fa0d5,2,1,8eef552228bb36fe7d46f471c806d452baf69aac,,Better debug output for invalid goal states,Also default console print value 
ompl/ompl,93,2016-10-26T23:30:32Z,2016-10-27T01:39:57Z,True,2016-10-27T01:39:57Z,67d5e714c7d7d63355afa34e04ef03bb02a9830d,2,1,7413dd745f59d240630b0828cba7a2557553e957,,Allow a PathGeometric class to be cleared,I want to re-use the same SharedPtr of PathGeometric being passed into a function and feel like this is cleaner than creating a new one. 
ompl/ompl,94,2016-10-27T19:32:10Z,2016-10-27T21:02:08Z,True,2016-10-27T21:02:08Z,49b8c363d5d6dd180fe7e633ce897e1c28462be6,2,1,fb4985e1b3d39a89f84f7f917e4d3ad35cb5158e,,Changed RRTXstatic to use r_rrt and k_rrt instead of r_rrg and k_rrg,Similarly to the recent update on RRTstar  the constants for the radius of the ball and the number of nearest neighbors has been updated in RRTXstatic to guarantee optimality. 
ompl/ompl,85,2016-08-12T19:59:37Z,2017-01-06T21:34:31Z,True,2017-01-06T21:34:31Z,10b549a9e15432da6df7dc66206904d1a1095a04,29,2,2af5daf8c847d5e73d1b0c604e276b7cdc14437a d4a06519a553541330657569476847ea0340c65d,,BIT updates and a new associated algorithm SORRT ,This is the big PR I was warning about. After two days of manual C++11 merges and rebasing to make sure everything was ok  I think it is finally ready.  I am not sure how it is affected by the possible refactoring of RRT*. 
ompl/ompl,97,2017-01-12T08:24:36Z,2017-01-12T15:19:56Z,True,2017-01-12T15:19:56Z,dc11fee546285d387574b1c83e99a12627852650,1,1,02ec387b6caadd0714e94c75a9fcf6f8fda1733a,,Update citations md,duplicate name of bibtex entries.
ompl/ompl,100,2017-05-12T12:34:58Z,2017-05-12T14:57:47Z,True,2017-05-12T14:57:47Z,3763e1d9d47afc8bc35aad1c23ec4e31a8f0b290,1,1,0388ba3a9028c195a3c54af66ee136722865fe50,,fixed comment about solve seconds ,Comment says one second  but the args are 10 . 
ompl/ompl,101,2017-05-23T08:22:05Z,2017-05-23T13:28:09Z,True,2017-05-23T13:28:09Z,ac5cbf391dfb09c9c7ef6c0a9d498a7d1904ab0b,2,2,2a9cabe000341e7fcf52a0ae47b7d79656d048d1 5deb2275e13171f8715daa6f84430ec6884597dc,,Fix Yocto builds,These two commits make OMPL buildable with the latest Yocto. Particularly it fixes a compatibility issue with gcc6 and makes setting RPATH optional to conform with Opembedded-Core's QA checks.
ompl/ompl,102,2017-07-18T17:16:36Z,2017-07-18T19:28:32Z,False,none,9d845037523d51bada43739650bcccc7228474b3,1,1,5d89c42faf0f0bb0e57e4cc874103532e3e75c76,,Add option to skip setting RPATH,This is a patch from 1.1.0 and it haven't been applied to the 1.1.1 yet such that now I am having this error:    ````NOTE: Started PRServer with DBfile: /home/yangjiel/morty-test/build/cache/prserv.sqlite3  IP: 127.0.0.1  PORT: 42057  PID: 6694  Loading cache: 100% |#####################################################################################################################################| Time: 0:00:00  Loaded 3637 entries from dependency cache.  Parsing recipes: 100% |###################################################################################################################################| Time: 0:00:00  Parsing of 2877 .bb files complete (2873 cached  4 parsed). 3635 targets  258 skipped  7 masked  0 errors.  NOTE: Resolving any missing task queue dependencies    Build Configuration:  BB_VERSION        = "1.32.0"  BUILD_SYS         = "x86_64-linux"  NATIVELSBSTRING   = "universal"  TARGET_SYS        = "arm-poky-linux-gnueabi"  MACHINE           = "raspberrypi2"  DISTRO            = "poky"  DISTRO_VERSION    = "2.2.2"  TUNE_FEATURES     = "arm armv7ve vfp thumb neon vfpv4 callconvention-hard cortexa7"  TARGET_FPU        = "hard"  meta                meta-poky         = "HEAD:fd7f2d644a94bbb951c0bed11af7deb35f1cfb22"  meta-gnome          meta-oe             meta-xfce           meta-systemd        meta-networking     meta-multimedia     meta-python         meta-webserver    = "HEAD:fe5c83312de11e80b85680ef237f8acb04b4b26e"  meta-gumstix      = "HEAD:b589059797b1e528c296fc29d95cabd36dbfbb1a"  meta-gumstix-extras = "HEAD:88742504115ea2623af84d09ed687ef63098856a"  meta-ros          = "HEAD:2b7704917c0443183ea1299b15543157fa0c4185"  meta-ti           = "HEAD:aecc85c0848a25c8c2abc0bb1e6573ae4504c3f0"  meta-java         = "HEAD:67e48693501bddb80745b9735b7b3d4d28dce9a1"  meta-qt5          = "HEAD:3601fd2c5306ac6d5d0d536e0be8cbb90da9b4c1"  meta-browser      = "HEAD:ee0d264347ca89efe73788a11f31504d1d42b716"  meta-raspberrypi  = "HEAD:380bf2ff445c2049bdea15f3bb36e8cb36540345"    Initialising tasks: 100% |################################################################################################################################| Time: 0:00:00  NOTE: Executing SetScene Tasks  NOTE: Executing RunQueue Tasks  ERROR: ompl-1.1.1-r0 do_package_qa: QA Issue: ompl: /work/cortexa7hf-neon-vfpv4-poky-linux-gnueabi/ompl/1.1.1-r0/packages-split/ompl/usr/lib/libompl.so.1.1.1 contains probably-redundant RPATH /usr/lib [useless-rpaths]  ERROR: ompl-1.1.1-r0 do_package_qa: QA run found fatal errors. Please consider fixing them.  ERROR: ompl-1.1.1-r0 do_package_qa: Function failed: do_package_qa  ERROR: Logfile of failure stored in: /home/yangjiel/morty-test/build/tmp/work/cortexa7hf-neon-vfpv4-poky-linux-gnueabi/ompl/1.1.1-r0/temp/log.do_package_qa.6760  ERROR: Task (/home/yangjiel/morty-test/poky/meta-ros/recipes-extended/ompl/ompl_1.1.1.bb:do_package_qa) failed with exit code '1'  ````    The original commit is: https://github.com/ompl/ompl/commit/5deb2275e13171f8715daa6f84430ec6884597dc
ompl/ompl,104,2017-10-31T18:56:44Z,2017-11-01T02:26:14Z,True,2017-11-01T02:26:14Z,70e5d62612108cabfd0cee1550a2e293ede500c5,1,1,d22b1cfb6f53c64c2b1f813fbae85e6ad759c690,,Fix redefinition and missing include errors,I encountered the following two errors when including `NearestNeighborsFLANN.h` in two different cpp files within the same library:    Missing `Exception.h` include:  ```cpp  /home/marius/exploration_ws/devel/include/ompl/datastructures/NearestNeighborsFLANN.h:187:19: error: use of undeclared identifier 'Exception'              throw Exception("No elements found in nearest neighbors data structure");                    ^  1 error generated.  ```    Missing `inline`:  ```cpp  CMakeFiles/bla_lib.dir/src/bla.cpp.o: In function `ompl::NearestNeighborsFLANN<double  flann::L2<double> >::createIndex(flann::Matrix<double> const&)':  /home/marius/exploration_ws/src/bla/bla/src/bla.cpp:(.text+0x0): multiple definition of `ompl::NearestNeighborsFLANN<double  flann::L2<double> >::createIndex(flann::Matrix<double> const&)'  ```    This happened  with both  `gcc 4.8.4` and `clang 3.7.0`.  `  
ompl/ompl,105,2017-12-15T07:56:54Z,2017-12-17T18:47:52Z,True,2017-12-17T18:47:52Z,f3581bfde107c176fc3ed9cf62546b8aeab92bcc,2,3,eef8cfcdc691f050290bf2132c4d2d998bc32b94 3c2f0808370993b83686988c04080a108d824908 e1e9fafe4f57dcf4d63976ac6f671ff273109b4d,,Bridge Test Implementation,Implements the bridge-test sampler  described in "The bridge test for sampling narrow passages with probabilistic roadmap planners" by Hsu  et al.    Has been tested for a spherical robot on the plane:    <img src="https://user-images.githubusercontent.com/1220541/34032155-07743ce2-e1b8-11e7-90f6-695cdf9dd977.png" width="300"><img src="https://user-images.githubusercontent.com/1220541/34032154-07319ebe-e1b8-11e7-815c-a4d5cb19c0f8.png" width="300">  Left: Obstacle-Based Sampler (ObstacleBasedValidStateSampler.h)  Right: Bridge-Test Sampler (BridgeTestValidStateSampler.h)    
ompl/ompl,103,2017-10-20T14:40:28Z,2017-10-22T21:04:19Z,True,2017-10-22T21:04:19Z,3fd57a18b5b57329ecf3200de536733108b5a347,4,4,a30fe9940f8693de4895d0953bfc8efddd6915fc 705368d6f006773efa19b182dab84ca860470a95 60d9e292b06dd0fd25fae1c3c6475101ca174bfa dfcdd354d4ffc60b1744ae6d09ab6b9499e0a7d2,,BIT and PathLengthDirectInfSampler fixes,1. Allow `BITstar::setup()` to run without a problem definition and delay the necessary work until `BITstar::solve()` calls `Planner::checkValidity()` (which will then recall `BITstar::setup()`)  2. Allow `PathLengthDirectInfSampler` to support `STATE_SPACE_UNKNOWN` with a warning.  3. Initialize `BITstar` member variables in the header instead of constructor as per style.  4. Revert `BITstar::ImplicitGraph::removeSample()` and `BITstar::ImplicitGraph::removeVertex()` to taking a local copy of the removed data to avoid a low-frequency segfault. [See issue here](https://bitbucket.org/ompl/ompl/issues/364/code-cleanup-breaking-bit).  5. Fix segfault in `BITstar::ImplicitGraph::clear()` caused by an already cleared pointer.
ompl/ompl,106,2018-01-04T11:18:04Z,2018-01-05T16:43:50Z,True,2018-01-05T16:43:50Z,b538a77a5662c94b629c17da3d889f902af203ba,2,2,cbddc18ecccf34aa048f58274a87062cfb9321ae 3d375d2caf576af23999ab3c62972494956516e8,,Fix for Issue 373 on BitBucket ,https://bitbucket.org/ompl/ompl/issues/373/informedrrtstar-segfault  
ompl/ompl,107,2018-02-12T10:45:30Z,2018-02-13T01:01:09Z,True,2018-02-13T01:01:09Z,b7c581c3286290a7c397defa03753e619fda2c6c,13,10,eacbe67e74640f47556c0c72f88801b3ee4b42b1 483d723497d027c51988d1eb8cacd862fd079894 5c407fab2610a7c70a342625546e077b9bc0ab20 bd6d34d72d8845c4800ba7a8dba95d284e6444ed f7afec19b589081f194f0279569b608ceb26d474 6b8b035c2e7be30071f2abc362c024193333b10e 2afc25c02de6a4542e8e40c0c6288fa8fcfceff3 a1c7ec31f22cde22a3f9b56c5d4cad1a9b7b4bfb ecb9b0c967e0459e387deb0092430092df89f543 062d8e2ae3c37d6d9e023c91bb07be10aceb403a,,Bitstar cleanup and fixes,Fixes:    - Removal of unused variable warning in RRT#  - Missed fix re: Bitbucket issue #364  - Bitbucket issue #379    Improvements/cleanup:    - Use the OMPL binary heap datastructure  - Store queue pointers in vertices (instead of a convoluted map hashed by vertex ID)  - New debug asserts  - Misc. other cleanups
ompl/ompl,108,2018-02-15T08:34:51Z,2018-02-15T15:14:46Z,True,2018-02-15T15:14:46Z,aa05f200705a54e3b149525da7f9ac7d7546ac84,1,1,93892cf8582dd211454c10218f7802737e97865e,,BIT radius as published ,Correct the radius used by BIT* to be the same as described in the associated papers (e.g.  RRT* radius).
ompl/ompl,109,2018-02-20T14:49:43Z,2018-02-20T21:43:56Z,True,2018-02-20T21:43:56Z,13c3ed5357fe96a5f4ac8998523b26c0a5dfa6f7,9,1,2d762953763d3296e69ea964c68a9d615ad75d5a,,Fix Issue 380,Remove shared_ptr cycle in BITstar by using raw pointers.
ompl/ompl,110,2018-05-15T09:32:39Z,2018-05-15T12:02:46Z,True,2018-05-15T12:02:46Z,8f7eabf1067c8d94e7eec2d9ff8c68305d0d4a5c,1,1,3ca56879a8744d986ab5979a6a42e230f87c51b1,,Add missing parameter in TypedSpaceInformation cloneTypedState ,The missing parameter is caught by newer GCC versions doing stricter template checks.
ompl/ompl,111,2018-09-05T22:20:43Z,2018-09-06T01:22:20Z,True,2018-09-06T01:22:20Z,5de33d89acc5decfff1deee61ad18b222b5ae040,1,1,02bcc4019d863265ba6ae1392f52c6641dde54d4,,Small Change to BFMT to Work with Multiple Goal Seeding and in MoveIt ,MoveIt! seeds the BFMT* with multiple goal points. The BFMT* code theoretically should allow for that  as it pulls in multiple goals points. The code uses a map and a heap structure to determine the open node to next search from; however  multiples of the same node can be added to the heap structure (and cannot be added to the map structure). This causes a segmentation fault  as the code will eventually try to remove a node from the map that was already removed  due to a duplicate existing in the heap but not in the map.     The change does a simple check to see if the map already has the element before inserting said element into the heap. If the element is NOT in the map already  then it will be added to the map and the heap. Otherwise  the element is ignored  as it already exists in the map and the heap structure.
ompl/ompl,112,2019-01-09T12:59:45Z,2019-01-09T16:48:49Z,False,none,b9b15494928f4939f6499e37561a35e744c5ffa5,2,2,b7e64dc2c57e487c1f3587244396146c450d1f52 7d0fe31595e4d2664ed57d928e56a2765f23b54c,,Do not localize params,This is a very basic fix for the issue described in https://bitbucket.org/ompl/ompl/issues/496/localization-errors-or-the-tale-of-decimal    Details are given in the issue but in brief it solves the following problem: after the switch from `boost::lexical_cast` to `std::stof` and `std::to_string` parameters are handled as locale dependent. I.e. "longest_valid_segment_fraction" needs to be passed in as "0 1" if you use an European locale. Also it will be returned in the same format.     This could be improved by having a ompl::to_string that handles all types correctly (ie using std::to_string for integers and this code for real variables) but I wanted to have some feedback first. Another possibility would be to do some template specialization on `SpecificParam::getValue` or do some `enable_if` template stuff
ompl/ompl,96,2016-12-18T16:44:43Z,2019-02-20T14:27:37Z,False,none,c0bde14f851e430703276ab8fb9142ae60b20d44,1,5,51a5d43af6d404b50140e7992271c42d46756305 5ade16dc2e2c83d96ed8f72eae2b8c6fcc5370e7 860f9b2c891db3fde37fffa268746380769ac9c1 bf268f0b7a7f6a49dcf1e9e18f6e53301d2b4dda 83ea6bc21547ce5ffd6cd774e6f508eaeabe4d95,,Flann CMakeModule needs to include libs in 1 1 1 ,The Flann CMakeModule does not include libraries. The ROS indigo version of MoveIt won't compile from source and needs the 1.1 interface.
ompl/ompl,113,2019-02-20T08:09:38Z,2019-02-20T14:20:23Z,True,2019-02-20T14:20:23Z,84430a707611edd96b150037ab45ce20a5c545e5,1,1,f2ea54d9bfee9762b613382f9e9ccc81418525b4,,Fix broken link,Fix broken link to Matt Mason's lecture notes on quaternions.
ompl/ompl,115,2019-06-26T16:20:46Z,2019-06-27T18:32:51Z,True,2019-06-27T18:32:51Z,ab835911832ddc55b587ce1af751921a126e13b6,1,1,d0ec545e0019faa8a0bf041eda11cc62fdbd10cf,,fix triangle inequality check in StateSpace sanityChecks,Hi   It seems to me that this check is wrong. It ensures that d(s1 s2) = d(s1 s3)+d(s3 s2)  while it is expected to ensure that (triangle inequality) d(s1 s2) <= d(s1 s3)+d(s3 s2). Otherwise it may be the exception message that should be corrected.    Here is how I would have done it.    Hope I'm not misunderstanding something here :)    Cheers   JW
ompl/ompl,117,2019-07-14T15:09:14Z,2019-07-15T16:32:53Z,True,2019-07-15T16:32:53Z,009a56ebbaeca2df6fab3a9ac48217d8bceda782,1,1,f3ea81992cc8804419047963653ce852e2e77b6d,,Set BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS definition,- Avoids overflow error when running under Valgrind  - Resolves issue described in https://bitbucket.org/ompl/ompl/issues/543
ompl/ompl,118,2019-07-17T14:11:16Z,2019-07-17T23:22:27Z,True,2019-07-17T23:22:27Z,063baa1cde07da8ee93d03703b61240173cee13e,29,3,b691c1af711969b55f074ecf005e608cd81ca577 2a9bfa5e508dbf80ce6e97ebe3488407aa1a544c d1c6e222dfdf4e3646b1ea5220aff631acc5864d,,Serve video content from HTTPS,Nowadays browsers automatically open HTTPS if available and disallow serving content from non-secure sites if you are browsing with HTTPS. As such  the currently published documentation's gallery page does not show any embedded videos.    This PR updates the YouTube and Vimeo URLs to HTTPS and also updated some others  e.g.  ompl.kavrakilab.org.
ompl/ompl,114,2019-06-05T07:14:24Z,2019-09-03T16:03:20Z,True,2019-09-03T16:03:20Z,1bfe0214d0f6ff5e2cb405aead211598f5b9071a,33,53,94166ac39a436651a33684c7bf0ddd6bf15d8645 90284a92619b35b82ea2d9ba6e06a5d065548ea6 c8808fe50d5d3a335c42c748a189d3ac0235a26c a5ce841ef9ba092912f6225f92daa4db8287938c 00aa3dd8da6b9863b9b46bf3ee5913bf17c42090 20d1740bee3c37cb734f003e49f4d2835db81250 b5cd931b9686246d94eba0e78de3f624583afa61 ae23720228b907133b4e0d3afb05054345b6ecb5 b4cea54c22beed16668eedd80a6baae1b31ed490 c6991e8555c457f90c2eb7cea59817ff4a73cb24 08e8e4673452a3f5c42a04cf5fb5de2aae5f4e21 0ecb8510e8ab940a1cbce2e2f5e4a1ea3dcaa4b0 c47e22ce48d03646589f05d7fa38c6680424f675 826a83a81615b6ece65dbb97d0d2c158a701a20a c621a262eeeb3e7ed7d7da50324514cf110d45a2 f3c5e110b111d8f68db06cdb6c74da8b420378f2 e1949a0d6ba7fc4f78cc7f7620c9413ee8ee6cfe b6039511cb0f0057dd3eb7b0e0ed7f5e80c80112 b537cd707c460611dad7864136f815e3df01effc 55d03155dd520d11cbd44e3a7d36c7713ad4c5fe 2e2209a230e9ef0037f6ad77e85efb8630bc6ea9 af8e29963fcfab452dd643c44e3f95efa33df671 be3c2ea14bde4edcb5098a681b88dd685b1a7355 ea00f273d0935661313668f8ce9c37772b11f91d d7fc01fa5c22fc3aa2cb73179de45dcda3b8b461 7e63c03b3eccdb66f1a6b4ce3488c2e4726adb3b 9f1309a30f58e243783bdf06ff7a34709bfd0acc 447aa8df080f091ab488beaffa666e13c86c80fa 2a900e7e489707ca73ae077adcd66af85d055da1 0abeb6456baf916906e9a79b483f7bcb3bea990d 2b77f10c2e3e5971f0f03efe4de262a2fd252e0f 56f40d038278c764f24c0b5d1171f417a7864914 2538c3bf9678c74d0469bafaad3879aa0b9c2372 8eb0a45d325bd2c976523a4c726e3901527db9d0 8540cf62f996374a6c4a97ee9b09b1b740a32a70 d003041b202b75cafca75d46b419d917230b4b37 118e471b4028a18301fc9ade1e7bbcbe61da39ea 07fc4fa82fda365bb0d197482fce0c7888d750a5 6fc718cff9b2ff2ef61d1a83abb991a23a90b393 5f93e6908e9feccaf2c715a66e8b3bcbbaef3396 5013fcf9126aa249b81ed5d7648a273334cb6346 e9e036023fbc1e1334fd0e12e814383f74a012b7 2950814223d9f5ba6e2f241ce5ada4f2cf31f995 747cc8020ad3b80e5a0efc41871a55d26e6cd1de 5cb09c03ba5f0182b911c65b4fbb3192664d6a5e f5c18ad3fab87011c33ae2e944fe7eb55658679b c78481bc31ec7c8776ab469539121329b872bf08 691f79f0786ac8bffeb8cf78ae822280e74ff894 714a416f365d0ddba22e6242db3257f0584caab9 3d3531f69a0ac2b8e05f2e60f3113d47da260b45 4f34c35bdd9264b8225bd2458f46e399f48a36d3 011e0bfd0a500fae6ffd5017223dc596e857192e 4b41c32dabd69a51e7669e81202567ddd8ba60d5,,Quotient Space RRT QRRT ,Dear OMPL Team     we would like to share a new planning algorithm with the robotics community  called the Quotient-Space RRT (QRRT) [https://arxiv.org/abs/1906.01350](https://arxiv.org/abs/1906.01350). QRRT is a single-query  probabilistically complete planner  which differs from other algorithms by planning simultaneously on different abstraction levels (which we implemented as a sequence of ob::SpaceInformationPtr).    Please let us know if you think our code to be appropriate for OMPL  or what we could change to make it an acceptable contribution.    Andreas    PS: If there is interest  we could also add a tutorial and/or other demos.
ompl/ompl,116,2019-07-04T22:03:16Z,2019-09-28T19:13:01Z,True,2019-09-28T19:13:01Z,003fc6f29da3b44f9406193fe90905b6d3933f51,4,4,3fcacab0d332e7a5e328a224fae77ac7605b7b71 a1195d941683ae930b8ca34a50c90446de43be46 0f6e6b0a9fe1c621127452259d289e906d4b64ec f307b48d45adda6bdceca71fdae44ed7beff859f,,Bug dependent parameters not updated for EST and TRRT,Some planners have dependent parameters  on other primary parameters which can be set externally using the setParam().  However  if the primary  parameters  change and setup is not called afterwards  in the case of EST planner and the TRRT planner  the dependent parameters are not updated . This PR fixes this by updating the dependent  parameters when the setters of the original parameters are called.   
ompl/ompl,682,2019-10-17T08:52:24Z,2019-10-21T21:38:23Z,True,2019-10-21T21:38:23Z,57c4e5c5a4067e31677f7cbaf420694e4b87298f,1,3,22fe6f5dd5f53943a7287b3f7af986bb5ee84278 0489e32a021371da04c879c2c3ad8aad0c51837f aadec55a677b6a17feba04fa88c8182874be7e37,,Increment the counter when directly sampling PHSs,This ensures that the `PathLengthDirectInfSampler` respects the maximum number of iterations as defined by `InformedSampler::numIters_` before giving up on sampling an informed state.
ompl/ompl,119,2019-09-10T17:22:04Z,2019-09-12T19:03:50Z,True,2019-09-12T19:03:50Z,deedcfe9228acb65b8cad0d70ac14d30253c9f00,10,8,8602d4214207dba885beeac571771a709f104ea7 0c66153a30d3aa516e00653c4b7afd953af02f6e 4744ea815a2e261df1e4815645d2023a8427fac1 44411649568cf3a39c68abbbe0387577d65b4ad5 27bdd95493e88bdd84dc4bffcf9bbf3fb09b7500 42f0ba917c7827ad3b328803c7f0da9fe2b5a3d7 c085742445973119031f8832e2b47df1eba25dc5 15f838fa5a122a2bcf3ec20b31b528a046fa803b,,Reorganize planner termination conditions and add cost convergence termination condition ,- Add documentation for all planner termination conditions on one page  accessible from the web site's documentation menu.  - Update Python bindings.
ompl/ompl,696,2020-03-02T08:47:24Z,2020-03-02T12:59:42Z,True,2020-03-02T12:59:42Z,f7fc1d423a7287ad466a6e10a19279771ce2aea4,1,1,85024b0992a6992cf4ba1c900e95e4473218e940,,Use optimization objective to initialize cost in FMT ,Using `std::numeric_limits<double>::infinity()` assumes that we are minimizing the objective. The fix allows to use maximization objectives (e.g.  max min clearance http://ompl.kavrakilab.org/optimizationObjectivesTutorial.html).
ompl/ompl,697,2020-03-03T15:23:25Z,2020-03-07T01:42:14Z,True,2020-03-07T01:42:14Z,0a34a12c95fa07d26b95399b9e70c2a927b4a3ea,1,1,6fc90954fd03d7456bb9f46b748ace8eb98c0747,,Make data reference const in newElement method of BinaryHeap,I think this should be a const reference for two reasons. 1) A const reference communicates that the method does not modify the input  and 2) right now `void BinaryHeap::insert(const std::vector<_T> &list)` is broken  because non-const references can not be bound to const references. On line 161 in `ompl/source/ompl/datastructures/BinaryHeap.h` we have:    ```c++  Element *element = newElement(list[i]  pos);  ```  but this fails to compile because `list[i]` effectively returns a `const _T&`  which pre-fix `newElement` tries to bind to a `_T&`. (Sorry  I can't seem to figure out how to comment code directly in the file anymore...).    Since this PR is in quick succession to the last: If I were to find more small fixes  would you prefer it if I held them back until I have found a bunch of them and create a single PR for all or do you prefer a PR per fix?
ompl/ompl,694,2020-02-25T15:28:27Z,2020-03-07T14:26:41Z,True,2020-03-07T14:26:40Z,c94d586f7f39dc9df9e174357932985b69a86788,1,1,42a8a67998216c690debcc4cc6d72fa5b8135065,,Fix issue in ConstrainedStateSpace geodesicInterpolate when planner range value is small,I ran into an issue when trying to used constrained planning functionality in OMPL  where if you made the range value for a planner  small (0.01) it would try to index outside the `geodesic`. These changes fix the issue but not being familiar with the code I am not certain this is the correct fix and there may be some other issue elsewhere in the code.
ompl/ompl,710,2020-04-21T01:27:22Z,2020-04-21T05:24:58Z,True,2020-04-21T05:24:58Z,cb17a6c31be1c80a5bd15162235729c01c1d6ad2,1,1,a41badc70ac560095cea9717ecc11cc6da73b731,,pass interval in timedPlannerTerminationCondition constructor,It seems that interval is ignored.  I only confirmed that the build passed after this change  and have not confirmed that it actually works
ompl/ompl,711,2020-04-22T20:51:51Z,2020-04-23T01:31:31Z,True,2020-04-23T01:31:31Z,f1515290697aa2370242a2ffa148e07c4e66eec6,1,1,1ae5f9f3550427f14e5a7eb66c84876765a836ff,,Fix compilation with Eigen master branch,compilation with current Eigen master branch failed with c++17 enabled  see the error message below:    ```  In file included from /usr/local/include/eigen3/Eigen/Core:261:0                    from /opt/ros/melodic/src/ompl/src/ompl/base/ProjectionEvaluator.h:49                    from /opt/ros/melodic/src/ompl/src/ompl/base/StateSpace.h:43                    from /opt/ros/melodic/src/ompl/src/ompl/base/src/ProjectionEvaluator.cpp:37:  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘class Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > >  Eigen::internal::IndexBased  double>::Data’:  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:619:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > >  Eigen::internal::IndexBased  double>’  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >’  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >’  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:564:55:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >  Eigen::internal::IndexBased  int>’  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > > >’  /usr/local/include/eigen3/Eigen/src/Core/Ref.h:44:26:   required from ‘struct Eigen::internal::traits<Eigen::Ref<Eigen::Matrix<int  -1  1> > >::match<Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > > >’  /usr/local/include/eigen3/Eigen/src/Core/Ref.h:202:63:   required by substitution of ‘template<class Derived> Eigen::Ref<Eigen::Matrix<int  -1  1> >::Ref(const Eigen::DenseBase<Derived>&  typename Eigen::internal::enable_if<(bool)(Eigen::internal::traits<Eigen::Ref<Eigen::Matrix<int  -1  1> > >::match<Derived>::MatchAtCompileTime)  Derived>::type*) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >]’  /opt/ros/melodic/src/ompl/src/ompl/base/src/ProjectionEvaluator.cpp:205:36:   required from here  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:609:9: error: base type ‘double (*)(double) throw ()’ fails to be a struct or class type     class Data : private UnaryOp           ^~~~  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘const UnaryOp& Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::Data::func() const [with UnaryOp = double (*)(double) throw (); ArgType = const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > >]’:  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:589:22:   recursively required from ‘Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::coeff(Eigen::Index) const [with UnaryOp = double (*)(double) throw (); ArgType = const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > >; typename Eigen::CwiseUnaryOp<UnaryOp  ArgType>::Scalar = double; Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::CoeffReturnType = double; Eigen::Index = long int]’  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:589:22:   required from ‘Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::coeff(Eigen::Index) const [with UnaryOp = Eigen::internal::scalar_cast_op<double  int>; ArgType = const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > >; typename Eigen::CwiseUnaryOp<UnaryOp  ArgType>::Scalar = int; Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::CoeffReturnType = int; Eigen::Index = long int]’  /usr/local/include/eigen3/Eigen/src/Core/AssignEvaluator.h:642:5:   required from ‘void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT  SrcEvaluatorTypeT  Functor  Version>::assignCoeff(Eigen::Index) [with DstEvaluatorTypeT = Eigen::internal::evaluator<Eigen::Ref<Eigen::Matrix<int  -1  1> > >; SrcEvaluatorTypeT = Eigen::internal::evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > > >; Functor = Eigen::internal::assign_op<int  int>; int Version = 0; Eigen::Index = long int]’  /usr/local/include/eigen3/Eigen/src/Core/AssignEvaluator.h:501:7:   required from ‘static void Eigen::internal::dense_assignment_loop<Kernel  1  0>::run(Kernel&) [with Kernel = Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Ref<Eigen::Matrix<int  -1  1> > >  Eigen::internal::evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > > >  Eigen::internal::assign_op<int  int>  0>]’  /usr/local/include/eigen3/Eigen/src/Core/AssignEvaluator.h:767:37:   required from ‘void Eigen::internal::call_dense_assignment_loop(DstXprType&  const SrcXprType&  const Functor&) [with DstXprType = Eigen::Ref<Eigen::Matrix<int  -1  1> >; SrcXprType = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >; Functor = Eigen::internal::assign_op<int  int>]’  /usr/local/include/eigen3/Eigen/src/Core/AssignEvaluator.h:926:31:   required from ‘static void Eigen::internal::Assignment<DstXprType  SrcXprType  Functor  Eigen::internal::Dense2Dense  Weak>::run(DstXprType&  const SrcXprType&  const Functor&) [with DstXprType = Eigen::Ref<Eigen::Matrix<int  -1  1> >; SrcXprType = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >; Functor = Eigen::internal::assign_op<int  int>; Weak = void]’  /usr/local/include/eigen3/Eigen/src/Core/AssignEvaluator.h:862:49:   required from ‘void Eigen::internal::call_assignment_no_alias(Dst&  const Src&  const Func&) [with Dst = Eigen::Ref<Eigen::Matrix<int  -1  1> >; Src = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >; Func = Eigen::internal::assign_op<int  int>]’  /usr/local/include/eigen3/Eigen/src/Core/AssignEvaluator.h:830:27:   required from ‘void Eigen::internal::call_assignment(Dst&  const Src&  const Func&  typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value)  void*>::type) [with Dst = Eigen::Ref<Eigen::Matrix<int  -1  1> >; Src = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >; Func = Eigen::internal::assign_op<int  int>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value)  void*>::type = void*]’  /usr/local/include/eigen3/Eigen/src/Core/AssignEvaluator.h:808:18:   required from ‘void Eigen::internal::call_assignment(Dst&  const Src&) [with Dst = Eigen::Ref<Eigen::Matrix<int  -1  1> >; Src = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >]’  /usr/local/include/eigen3/Eigen/src/Core/Assign.h:66:28:   required from ‘Derived& Eigen::MatrixBase<Derived>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >; Derived = Eigen::Ref<Eigen::Matrix<int  -1  1> >]’  /opt/ros/melodic/src/ompl/src/ompl/base/src/ProjectionEvaluator.cpp:205:36:   required from here  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:615:42: error: invalid static_cast from type ‘const Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > >  Eigen::internal::IndexBased  double>::Data’ to type ‘double (* const&)(double) throw ()’       const UnaryOp& func() const { return static_cast<const UnaryOp&>(*this); }                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::Data::Data(const XprType&) [with UnaryOp = double (*)(double) throw (); ArgType = const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > >; Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::XprType = Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > >]’:  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:572:55:   required from ‘Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::unary_evaluator(const XprType&) [with UnaryOp = double (*)(double) throw (); ArgType = const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > >; typename Eigen::CwiseUnaryOp<UnaryOp  ArgType>::Scalar = double; Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::XprType = Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > >]’  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:94:46:   required from ‘Eigen::internal::evaluator<T>::evaluator(const T&) [with T = Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > >]’  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:104:54:   required from ‘Eigen::internal::evaluator<const T>::evaluator(const T&) [with T = Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > >]’  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:613:86:   required from ‘Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::Data::Data(const XprType&) [with UnaryOp = Eigen::internal::scalar_cast_op<double  int>; ArgType = const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > >; Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::XprType = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >]’  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:572:55:   required from ‘Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::unary_evaluator(const XprType&) [with UnaryOp = Eigen::internal::scalar_cast_op<double  int>; ArgType = const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > >; typename Eigen::CwiseUnaryOp<UnaryOp  ArgType>::Scalar = int; Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp  ArgType>  Eigen::internal::IndexBased>::XprType = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >]’  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:94:46:   [ skipping 2 instantiation contexts  use -ftemplate-backtrace-limit=0 to disable ]  /usr/local/include/eigen3/Eigen/src/Core/AssignEvaluator.h:926:31:   required from ‘static void Eigen::internal::Assignment<DstXprType  SrcXprType  Functor  Eigen::internal::Dense2Dense  Weak>::run(DstXprType&  const SrcXprType&  const Functor&) [with DstXprType = Eigen::Ref<Eigen::Matrix<int  -1  1> >; SrcXprType = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >; Functor = Eigen::internal::assign_op<int  int>; Weak = void]’  /usr/local/include/eigen3/Eigen/src/Core/AssignEvaluator.h:862:49:   required from ‘void Eigen::internal::call_assignment_no_alias(Dst&  const Src&  const Func&) [with Dst = Eigen::Ref<Eigen::Matrix<int  -1  1> >; Src = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >; Func = Eigen::internal::assign_op<int  int>]’  /usr/local/include/eigen3/Eigen/src/Core/AssignEvaluator.h:830:27:   required from ‘void Eigen::internal::call_assignment(Dst&  const Src&  const Func&  typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value)  void*>::type) [with Dst = Eigen::Ref<Eigen::Matrix<int  -1  1> >; Src = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >; Func = Eigen::internal::assign_op<int  int>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value)  void*>::type = void*]’  /usr/local/include/eigen3/Eigen/src/Core/AssignEvaluator.h:808:18:   required from ‘void Eigen::internal::call_assignment(Dst&  const Src&) [with Dst = Eigen::Ref<Eigen::Matrix<int  -1  1> >; Src = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >]’  /usr/local/include/eigen3/Eigen/src/Core/Assign.h:66:28:   required from ‘Derived& Eigen::MatrixBase<Derived>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_cast_op<double  int>  const Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > > >; Derived = Eigen::Ref<Eigen::Matrix<int  -1  1> >]’  /opt/ros/melodic/src/ompl/src/ompl/base/src/ProjectionEvaluator.cpp:205:36:   required from here  /usr/local/include/eigen3/Eigen/src/Core/CoreEvaluators.h:613:86: error: type ‘double (*)(double) throw ()’ is not a direct base of ‘Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<double (*)(double) throw ()  const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double  double>  const Eigen::Ref<Eigen::Matrix<double  -1  1> >  const Eigen::Map<const Eigen::Matrix<double  -1  1>  0  Eigen::Stride<0  0> > > >  Eigen::internal::IndexBased  double>::Data’       Data(const XprType& xpr) : UnaryOp(xpr.functor())  argImpl(xpr.nestedExpression()) {}                                                                                        ^  make[2]: *** [src/ompl/CMakeFiles/ompl.dir/base/src/ProjectionEvaluator.cpp.o] Error 1  make[1]: *** [src/ompl/CMakeFiles/ompl.dir/all] Error 2  make: *** [all] Error 2  ```
ompl/ompl,695,2020-02-27T16:58:27Z,2020-05-05T18:38:21Z,True,2020-05-05T18:38:20Z,cb4d46aee1ec6b08fa6a1b5447e0aa789460db5e,15,14,69aa45e0b8f44a9e282c68dbf001f3642ff84fb1 c5b1de56180c5e7370ac80bd7c47b0fe77351fa9 5b0e22d6f78477c77c9f62d1e0773ace33c4516f 2e6d604df806338ca0ba30bcc9e0e779b425e68c ceea9d5d27fbb0f16f6c46195baca23f45e284b5 cda8ecc248db130ba4ad1e4847bba7000e3dc40f 15683ce60c3751da6cdcdd0d6fab618fbc1ec1f3 d972eba503099cc10a7b3c51369abb4d1261df01 d65bf3ad911d6285593c01c3c02c6ddf57572872 b28c45183d08fc618e5136fe492bb6c28e27bc75 6efb7c30782158ea00fd5f85fcc61de54c0ddd17 b4758c026a68b987f8bbb23c3bdce7dfb9aa9d83 df379caf3dbd802ab673716afb20962cff0c10ed 89a340801695ad55307373966ad20bccbd8a0c68,,Feature deterministic sampling,Implementation of a deterministic state sampler. The implementation allows to load and draw samples from a precomputed sequence (saved in an external file) or from a Halton Sequence.
ompl/ompl,701,2020-03-10T18:40:45Z,2020-05-14T04:12:58Z,True,2020-05-14T04:12:58Z,5bd2e0c40b15df5b8a971652665a03d4d2aaab92,33,4,92b32eb193c6b11754f442adcafdcb3dc1ac37a1 0ef8d9d6a658b00ec4ee9e360662b6e89510a9f6 28f7a19e5a496f3bd594f889eb1acb695295ca3c 6a3b4536432c95a514dd8bdc30e2daadffb3583f,,Initial implementation of XXL planner,Remaining TODO items:  - [ ] Add citations to paper  - [ ] Test that output of demo programs is consistent with results in paper   - [ ] Code clean-up / modernization
ompl/ompl,690,2020-01-20T19:27:04Z,2020-04-28T20:00:39Z,True,2020-04-28T20:00:38Z,4c9656e369baa81efebf339d038a51a36796e80c,11,7,a53d7b7c7a28810267a4ec16d66198b011e3c684 0ccddf9d94488211255494afdd6bc518b522d210 f2c25d21c0a03766bbfaf91e74265936216d41b4 03879f78db5091c213c30a258e2cfba3ad7f2881 67bea02835b463ec1cef50d0d517f11a70193c4d 63deb60d009765d5e03291b9a662c665e404f998 c1eeac8a1ed200070c8766df952f08833dd52d78,,New improved version of AnytimePathShortening ,The main improvement is that threads no longer need to be synchronized.  Each thread independently produces as many solutions as possible. The  main thread applies path hybridization and simplification.
ompl/ompl,715,2020-05-04T15:42:41Z,2020-05-18T15:55:12Z,True,2020-05-18T15:55:11Z,027d0ca7acb4cf6c8b9e2a03e2e3464bfe8c4d8a,14,115,9f0a85d8cbbe5061f7967dafa851044b9a90047c 0aab78c06b868e4615219ad24add99efa86d4a52 af4b0f368ec2b5f903eb6cd93ebc44e2bb74feaa f41c9bd48db39a31a3b4c96db75a0fb4d29f3137 39e00719c8b78d6ba0b557c51c9a096465258a38 b94689e92b4a045fdbeea2163f6aa822c5f1d950 f3b946c0073f5be9ed6a601e454aeff0fe6c486f 69e1137c567de1e9d52c3074c3e67f069f004893 1118f7e25b3d2bb36f31facd629a233533e8a928 651a781dd5eb4628a55d71e258a24ba3957ea867 5e7f72c75d198a073cd21bc9f8468d0417c361a8 8fe6713e6034de7eb543379f2c8610d4c7661cbb 0cbfa2e89793faadadbeb4ac93b272a8cfb8b98d 58b7d77c669d6f94f8c3fb0a626cb647a906356c 3222af6e6487678a888d4c83a387a8d8cd989b5d 98a78f9d97a63c09c8f580bcc55122e99c886298 b44146697aba4c211a677bd4ffc0ef69d99f3fa8 98351dc0288ee5c528e927f2e2dca52a9c9659bd b3d612c711502b604c4b75905b32a26c89f750e3 d3f993b7d127f754ab74bff51fefc088665d8105 24d4f76ff741e6277dfc21d232014c2d6c1b0fde 4867c03b17e6ea661b4ed58356c75d1b4e7d4c42 524a3c9de016e19d5f7d3a00bf9a4596e4ee16bc 40b053e1cf58939f22c72b3edf99d2e80a4f91ad 6edb91e004eff6b89d06cbc834a8ba801972f756 a658324382604bd02de8d13b74613139169744c7 2b7588299f9b7b6ffd8eb12b3b1d3610dbec18d4 9a6605841f63c6d22813438f30d92d5629467859 1183180b3704f4db5806d869c6f40a357cd8cd60 d09e7e06518a083698988a8a84898b68ca439332 a0666ee36e459ec6a3f9d744694accd9f986b174 aee2cbe4625457c7d86f2d4a426aa5c6eef3283f 93737c1b2b881da82c33867efed317aad736ef4f 1d5632a7bbf32bb78bd22a9a5950a16af8e488a4 3a0f8c0f17c484de950939b8336a8c28d2da1d88 aaa4c35f197c5875bb34b3e593e093eb56b5268d efcbcaf29dca0abc89a346e787a98d72b64eff8e 9e428d578b22a34d4e19ad7332f6330eb987fcd0 658a8cd54c51d6bbb8980fdc7cf79e74fdbae333 44ad4c453342c85fa9ed067d737a2d2b04f77087 1cc713a2444d1fb94b99faeb7b5c412563224149 694c18642a3072e5ab1e809d640950e4215bb002 04111e3218d547a333de15d2b689f39121f1015a 12dbbcafc0b8f8a030b9af85ff0dd01da1d76564 eb2cdd5e335c696d709e7ea50d65e5146e7c0120 ffeb54872654103ba56e0626a270c4eb228ad1e7 eb6051b7e8700c25575382f50fbbc9aa1fa905b4 ed193ff92c2ecda167d53bf591897fb78f498fd1 168a772a96b1865240ea08fd9041ac0b1afff6d4 9094b219bb2af7551375b3c73fe02c7ff5e88b08 bcc77fcd5d7363db3d26ed4cd3e4abd54e286205 097161c8e133375aa07720c799a65b8be7b6fabe 249ade87a025f9fb0c3e70969485d350e5ced070 7b3df2503473936d5509efd2b66e54ce233d1135 a2dc7d307cc3d5034d85e6de2b5480fb283cbfdf 1e6b95b32268630aa8bd36389e7ba0f210096f17 94f754f8ce2786b3498c2e378d664a507223aca8 c97885c21e603f44c1db6306649982b6987b2875 6d8f79c256ef84a3edbd21295b6edf93f2951160 380bc1223b0279b4f139862869e3614d0e6bb4f4 fb9897c4ac95e16f33fda3c028ccfb5012e958a2 579784ab97a63b5369c2cf042b16c0d86ce5f469 c9b381bd275433743fadbe29188b9bbdf2faed5b 855548dae8df0722030c57532fda72c67089a13a a3e8ca2ab7201049155bf4cf9f1049f332bd66a7 f6348ed40038fda63f90d3263bac5ed4b18416bd 4879597ca0bfc5989c576ac2e53cf817dc2c82c2 bb8f8e44f666b845bd912a6c8ce2fb127235361b 078b4f3d0c66353efed89faccc214a9c3c66fc55 7a54214c9b4699b861c45cfeb4f2a1e5576fa02e 5c522e1b02387636a9b5b08dd9cd7148cb12e41d b2c4d4d65d3886c7c7db8eec2a18e5226018a2b3 deceb82065bf5254bd7b2ba90befd082d8e27def fe618d4991826eab0a1d3f8645c91cc77ffc95c1 e7f7f3dd530261eafec894079c8580c5ad750830 03b1f13d256bbee658072d46022d537af13c2cbf 5c4cb9424a8670ed454381df83a6c97b263fa2bb 961e70b030c4688d1e81d0402f3cfb8afd634487 12f633058ef40d729e49bf86a49546a578c6cfce 5cebea54cf179a5fcba18a3c3d7b0255d87a237e 2c775132d11dba9379e2adc1c67348bf2a4308c3 998850c292d666f83d3cc246b4e5bbccc7dbd390 2bf8461517d7d9458643a55b22008e3422409ec0 850a74b8fa9896ad231a441fc0491aa8e7aaef1e 2242e8de3ef4d1012f062f7c6c503822343fc6d4 d32bf45a7de770906c08bc2306b54ea5cfbcd6ea 754f4f7217945b299695236ebf57c4a73846df69 14d739c5a0b5d6a6fc2a34ff5d9ac601eb660905 2c5a8170b337aad95c59b48d88e4389730181693 ac51d707d647bf15b444679fa4318128e76cad09 81639ad1afa38aa02df6354af61158ae08dda652 267c804ad75e7229cd4390e440b38b0069375bd1 12539fd7d43685f925b392187f7a405199e38ec6 5a74507943865a6a884ec59b4ff8aee163d2282f 27996d51f7162649045a4025b5a9fdbe270f8c4b 4941b8055e9b045ca5f3ef0563f190012cbf6de3 7821a8d9f75b1066730642f88bc0190787322664 670cef2000e807a64a1277ef4e6ee2b75345e47c e77e50427c767ffe4f5d9be05a0cd40c0ac6d63e 575a9cd6a7ff8b87ac20dc28d97dcddd88e6c626 7d6e0e25a1a3eb40430c2a83f346f73e963ac93e e86c0e4b96e06714e06049c751d001bb12ce8e9d 7a7ef643d08bb911c893cdf268c0139e6dd4ae14 7ac93f4df1f53dc9831dbfbf578b1bb74610fcc4 340158e1b43b3412e5d37d864b2b99f6146ebfb3 c0df413403210a048acfba8222d8c3301b2f9935 93c05962d3b16179a9d6db82dda96e424d4ff33f 31e1bb81b371abedcf6f31f570871e6d389d0f5c b3b13c8d96d67cd04bf880fee73c52dec96482b8 046a30bdb0b127003fc79372221a3138567d5d62 8ce0a8e75ce5e7daf1c340345db118993111cb72 c6edf74fc38ef54288d4180f6812609202861646 df8c74bd667c4d5a5458b5add8e258a28e51dd24 b6d8f0cfd56c891a6dfa9b06a874cb5445caa433 3d67511a426bf3fcd7590c26ae3a9ab0aafd289d,,Implementation of Advanced BIT ABIT ,Hi    My name is Marlin and I'm currently a PhD student in Jon @gammell 's lab. We've been building on BIT*'s core ideas and one of the algorithms that we developed is Advanced BIT* (ABIT*). In order to avoid code duplication  I've modified BIT*'s implementation such that protected methods can turn it into ABIT*. This allows ABIT*'s implementation to simply inherit from BIT* and configure it appropriately.     ABIT* is to appear in ICRA 2020 and is already available [on arxiv](https://arxiv.org/abs/2002.06589). A short video explaining the algorithm is available [on youtube](https://youtu.be/VFdihv8Lq2A).    Please let me know if there's anything I can do to make reviewing this PR easier for you. Thank you for maintaining OMPL.
ompl/ompl,718,2020-05-20T16:08:37Z,2020-05-21T13:53:17Z,True,2020-05-21T13:53:17Z,ca65f9b750071e13d209f7a318cc1aff5aea8a7a,7,1,a3636be6f2768bbaeb900302b5a0486ac1c7f775,,Update paper references for Informed RRT SORRT and BIT ,Hi @mamoll      I was waiting to update the paper references once I had the full publication info for the BIT* IJRR paper. I have that now  so this is just a switch from conference refs to journal refs for Informed RRT*  SORRT*  and BIT*.  (And a link to me that I found when searching for paper refs to update).    Hoping it's no work for you to merge.    Thanks   Jon
ompl/ompl,719,2020-05-22T08:57:10Z,2020-05-27T23:29:29Z,True,2020-05-27T23:29:29Z,8e71da09c997fe0ddbc67cd7489082b882932330,29,71,68bdda6611ebfb941d70a2fe23a5ec5f221db5cd a86b8e507129ed7ecc36f420861ebb5f54046742 de2aa941ad06abb8b96f9f016a95f9e0c6e05a55 227b0535d97344bcce5be7c40dfb14b6bd129003 0ef14a00528a406fe377599aba68fb7b1360588c 4c6fdb1248b772364416632f7527426bb6c4271a fe5d46542c76bfa6f757b01575939519fabaf1b1 03a3b893715a22bd7f62df425da39f621e9eeb34 d8460fc70eb67739b718dd696eeb0ab24f97a8ef eacd0919e68f664f2dd74639dabb5bd0a2fc7a6b 3f2a983ac6b8ac988eb6dc98c1b6c5849658659a 7625df05f2275d99535a211c330a4fa50377ad66 d4bc2ab7e0c739c4e8c0def3122d6e7527327292 47c66090b17a09fa66e0cffb05881f040f0a2d54 2c39f46cdbfec38c71fe05e7e6ae45f3eeb7f41f e3cc4ccda26b7b0bc420c85d48451fb909a3ee9a faef209578b2f9861d999f1876dd702b84cf5ad8 af7bf9c7b6fb69ce45725c641a62f4d9100d5718 8d4261ea63d7654d3eb1f95ff57b5e4b745b26f4 2049371a53c942a188422ef7c4bd49343675b815 8595d383fbe57b538fc7f5fa5940dbb18d1c656b a0a40d0df696de6d29d874f9a1afb199bf97f58d a25420e2442fe0d2a73d7a52d44a74ff7be5bdec f93664cbbf8a0abfe23d6683cde2c0b81e862558 77d273979f5b002f7df9510853866fca6026daa0 b36550e987141fd5361a45df72d8aaa52223af0a b29d47d38b9d9c0c29a8ff0c923fd5c37d53d44f f71a505f99a47e2fd817893658908965228a2887 4bf8f49eb6508202b3ea0b6de5cafa3fefeffa40 5b7d33e59feb604b310f5644724e56df9d70957d f6fe4f3e5e0597b2e80a4b8109fb3e790acdc797 a3f7eb1e54483e7ba7382be03efd66de89e347b3 3df9ee0a830b2c24b3dc2bb0dc105a1ad3858b79 89391a650b9d31c9861a653131f26892a2d50617 117c9782c1fb0c7a282ec67b7da879b61cb8478a 1e52a45100cfc6b809b16c44d5421983b17cd505 26592481802649a2ec04e65084f7e225d1f5249c 0ae976827090498fc73702d6d4c5cb89365828dd 7b1505ac44efe56df8d7af89d512a9e4f8b8a35b 78cfabc11cb55ab289d56e71e0065779800ca010 c2bf6dcd6d0da6c2982a9b58190306ec8b0dc49a a769c9289872cf40a975eb7eadfc27e3c37385b6 3e21a419cc9c9a0e29550adfab04a5f9cd8649b1 abac378b996821106c1bdfcebeba1e7d2c2e5922 715ee862b6d6127b9539d1d1263becfc1bc54bb2 aeb242fc21fcf067e75228e2c56618b1d637bdaf 8e18909bf466a8016494e7930be3bf7e1ddd5788 dc9a23f19e9c39e5e0b441c1d4c7ee7cc848a122 ab97307e78ab1b8e6d6dd7cd4161177085dffc98 6aa18960c6635dfd3aefa13e32b0e81e18c96e48 c8c7c58f1364828313ee9e375f057da7ff26846e 95487ca49704538f68c89ac88724b6f913572314 54b5319703030e3ef4c8529362145d8a2442f578 6464bcbbcb90f9e625e45239af25338dc9a1467a 34932716689240a4fb10d72ed17877d6db883e4a 7d54bb5771042ba82cd2d4b90d437cdb7c0a9000 4bfb2e1dec23e65952ce8e1f231e9a05c19c59ea 6f5258d1bb404fcf9424e0138e62679f35a3a0ce ae369b2278e3eac3b3297f183aa5f69e665adc01 9cad0008db9871cd6d64c92b33425dc5836713fe f14dfcd3b133201ab13f8b45c2f60f4c1a46cefc 01ff46fe8c4e74c933a2f8a65e2f12c54eadb860 c3e16a1b11085502025ba35abcdcfdde5d75f791 6ea7b5d4606b57a7d3017c2c7c1f97a61f996588 d68d2069d657c6eb129111d35eaee4e34aa8322d cb726420bd19393b7446356535155f091c182f6c 6bdc991933e6b05ce32e0eea64c46dce3a2808fc be644886e7f0b02754550965cafbf725813264e3 280f89408f5f2f6efb4ac46767490c72998da030 7550cf5d203f51035b9d09d2662142f1e2905156 73e25da38dc81bb43d4ff816528b094620c98d22,,Implementation of Adaptively Informed Trees AIT ,Hi Mark     This is the other planner I was telling you about last week. I'm sorry for the delay  I hope it's not too late to get it merged before the new release. Please let me know if there's anything I can do to make merging easier for you.    AIT* is to appear in ICRA 2020. It uses an asymmetric bidirectional search on a random geometric graph and simultaneously estimates and exploits an accurate  problem-specific heuristic. The associated publication is available on [arXiv](https://arxiv.org/abs/2002.06599)  and the associated ICRA presentation video is available on [YouTube](https://youtu.be/1h7ugF9F6VM).     AIT* builds on BIT* as it also searches a random geometric graph (RGG). Unfortunately it can not reuse BIT*'s code as AIT*'s RGG vertices must store information related to AIT*'s forward and reverse search trees  and almost all other types in BIT* and AIT* make assumptions about the type of the vertices.    I'm unsure about which folder I should put AIT* in. It currently lives alongside BIT* and the other planners in `src/ompl/geometric/planners` but maybe it should be a subfolder inside BIT*'s folder? I could move BIT*/ABIT* to `.../planners/bitstar/bitstar` and AIT* to `.../planners/bitstar/aitstar` but that changes the include path of BIT* unless I create symlinks or a forward-include in `.../planners/bitstar`. Please let me know what you prefer.
ompl/ompl,721,2020-05-29T09:12:08Z,2020-05-29T16:23:46Z,True,2020-05-29T16:23:46Z,57e9ae3dd6cd81502096f0abe4944f747c6189c1,2,3,87fafe076db7a658d2bc46f2eac610b5d64636b3 0e722f11c5488a1f23e63c44d8dc29784cd41d1e 8b7a8ee3e879a1b977271b34664abb60560909a1,,Add nullptr check when setting AIT to track approximate solutions,Summary:    1. Add `nullptr` check when calling `AITstar::trackApproximateSolutions`  2. Enable tracking approximate solutions by default  3. Continuously track approximate solutions (previously got best approximate solution only before `solve` returns)    Reasoning:  1. AIT* tries to initialize its approximate solution cost with `OptimizationObjective::infiniteCost`  which needs access to an optimization objective. Calling `AITstar::trackApproximateSolutions` when the planner hasn't been `setup` yet resulted in a segfault because AIT* didn't know of the optimization objective yet. This PR adds the necessary check. (Without an optimization objective  AIT* can't know how to initialize the approximate solution cost and  therefore simply refrains from doing so.)  2. This seems to be the default for other planners.  3. It seems like there is a use case where this is beneficial.
ompl/ompl,722,2020-05-30T09:40:42Z,2020-05-30T17:15:38Z,True,2020-05-30T17:15:38Z,35c84e9ef0fafcda0d69844a9ae2bf069c386e32,4,2,7fece450609fb7da40290531799fb8bb73b4970d b1b12858de12f24d0299aa7d41787b0430f4a0ab,,Implement k nearest connection model in AIT s RGG,Hi Mark     The problem was that the connection radius of the edge-implicit RGG that AIT* searches was not appropriate for problems in which some dimensions are (much) larger than others (the theory holds for the unit cube). This PR implements an option that turns AIT*'s r-disc RGG into a k-nearest RGG  which seems to be more robust to dimensions of unequal extent. I've set the k-nearest model as the default option.    With this  AIT* to solved the problem referenced in #721 in less than 10 seconds 10/10 times on my machine.
ompl/ompl,683,2019-10-17T11:40:02Z,2020-05-22T21:16:18Z,True,2020-05-22T21:16:18Z,727f09c15ad6ae6462de86ebdae630d47ba59ae7,3,1,3ea018b4b2f9cffd7490cf161bc4c71b12363b85,,Nonabstract goal area defined by the limits of a second StateSpace ,Hi Mark     This is a simple version of a goal area defined by the user via a `StateSpace`. I thought it may be useful to the main branch as  while it's limited  there's currently no nonabstract area goals in OMPL.    Jon
ompl/ompl,686,2019-11-08T10:20:25Z,2019-11-08T20:41:06Z,True,2019-11-08T20:41:06Z,9afbcf5af6969d3bbc819eb25127dfb01168341b,2,1,b59d60e09f85b3e381ab07dfdce59f88623666f6,,SimpleSetup cleanup,This fixes an inconsistency between what `SimpleSetup` and `ProblemDefinition` considers an exact solution by passing through `SimpleSetup`'s calls.    This specifically removes the  ```  pdef_->getSolutionDifference() < std::numeric_limits<double>::epsilon()  ```  check that `SimpleSetup` was doing to decide if a solution was exact and instead reports what the planner actually returned in its `PlannerStatus` flag.    The existing behaviour caused a bug with RRTConnect when searching from a goal area (https://github.com/ompl/ompl/pull/683).
ompl/ompl,723,2020-05-31T07:05:40Z,2020-05-31T15:09:37Z,True,2020-05-31T15:09:37Z,066fc8c17fcb8c82e25d149ac0eac0f0330ced8d,2,5,7fece450609fb7da40290531799fb8bb73b4970d b1b12858de12f24d0299aa7d41787b0430f4a0ab 8a0c45a9e7b3f4497e646abd2abbd8ca9eb15b70 b431652604242d08f172af5f1396eb938eea302a db6700c270b317cf11470153157e10caf9fc6f5f,,Fix AIT s clear method,The k-nearest RGG constant should not be reset because it is not computed when AIT* solves a problem. Sorry  this was a silly mistake.
ompl/ompl,724,2020-06-01T20:48:05Z,2020-06-02T15:31:46Z,True,2020-06-02T15:31:46Z,e85722eb40b791c13cf09fe5a74a2baf3e9ce0e4,3,4,d1aac29bc1a15be56b4007ce832f4f3d1611be63 5959f77b62cdf30f479f6941d18f9fd2ad55ed98 9779c93a1a37aa2e25b2560516103acdadc9d2d2 2c0e3b3a4897cc8daffe6974f25a65714c7e5a16,,Make unit test assumption explicit,Hi Mark     As far as I understand  `test_2d_circles_opt_geometric` makes the implicit assumption that the planners find an exact solution to the problem. Otherwise the checks on lines 152  156  160  and 173 don't make sense:    - Line 152: `BOOST_CHECK(!opt->isCostBetterThan(prev_cost  new_cost));` If the solution is approximate  this should be allowed happen.  - Line 156: `BOOST_CHECK(!pdef->hasApproximateSolution());` Checks for exact solutions  but the condition of the enclosing `while` prevents this check from being reached when the planner doesn't find an exact solution and uses all the solution time.  - Line 160: `BOOST_CHECK(!opt->isCostBetterThan(ini_cost  prev_cost));` This can happen if the initial solution is approximate.  - Line 173: `BOOST_CHECK(!opt->isCostBetterThan(prev_cost  min_cost));` If `prev_cost` is the cost of an approximate solution  it can be lower that the theoretically lowest cost of an exact solution (which is `min_cost`).    This PR proposes to correct this by making the assumption of an exact solution explicit.    I think AIT* was failing on the Travis CI because there was a situation (seed?) for which AIT* did not find an exact solution to the problem in the given time. We don't expect AIT* to be great relative to other planners for problems with relatively low collision detection resolution and many small obstacles in a large configuration space. We're currently working on an algorithm with improved performance even in these scenarios.    This PR also fixes two bugs in AIT* that I found when figuring out what was going on. One is related to how AIT* handles the `plannerAlwaysTerminatingCondition`  and one how the best approximate solution is updated. I don't think either of these were the cause for the failure of the Travis build.    (Edited for clarity.)
ompl/ompl,726,2020-06-02T20:39:35Z,2020-06-03T19:30:50Z,True,2020-06-03T19:30:50Z,82ba3ed6ff91e9294b361df41a122cdaedff080e,1,1,068b0bf776856aa67ef23f85f4ea71c146b93a41,,Install script update,'set -e' added to the beginning of the script to ensure that script will stop execution in case it fails midway.
ompl/ompl,735,2020-06-26T21:41:45Z,2020-07-02T04:40:15Z,True,2020-07-02T04:40:15Z,55bb20a6e078a48ff6b7ca0dcc095f3232688941,1,1,61c0b59a9512ebaf53f4aad553d3a792232938a7,,Fix for crash in LazyPRM constructor noticed in default MoveIt setup ,This fixes a bug in 1.5.0 in LazyPRM.  When the first constructor (that uses base::SpaceInformationPtr) is called  and then setRange() is called before setMaxNearestNeighbors() or setup() [this is EXACTLY how the default moveit setup is calling this]  then setDefaultConnectionStrategy() is called before a NearestNeighbor pointer (nn_) is set up which then crashes OMPL in the LazyPRM constructor.
ompl/ompl,754,2020-10-07T00:30:50Z,2020-10-13T23:21:28Z,True,2020-10-13T23:21:27Z,a9cf1ebea4af7d7dc5d46dff1415f6586c24678c,1,1,9c896c235f2dc561c0b21b3b30d4936e34907ed7,,Register package with the ament index for ROS2 installation,Reference:  * https://github.com/ros-industrial/noether/blob/80d95795af4c8bfec4ac508ef602cbeb7c157528/noether_filtering/CMakeLists.txt#L185-L187  * https://github.com/ros-industrial/noether/pull/91    Fixes: https://github.com/ompl/ompl/issues/753    cc @SteveMacenski @mikaelarguedas
ompl/ompl,757,2020-10-30T03:41:17Z,2020-11-13T22:13:53Z,False,none,22566dca52dc2f4b4862e7fe9ec5b1275d9c1454,2,1,f27ba7b412a663bf8782c9b51825e9e18733ecf7,,Improve omplConfig cmake in,This PR updates the complConfig.cmake.in so option dependencies are include if found and add missing boost dependency and remove FCL and ASSIMP entry. I could not find the find_package for these so assume they are no longer used.    These change should solve issues when linking against OMPL on Windows. I was getting linking issues due to flann and boost not being included here.    output:    ``` cmake  # CMake OMPL module  #  # It defines the following variables:  # OMPL_FOUND         - TRUE  # OMPL_INCLUDE_DIRS  - The OMPL include directories  # OMPL_LIBRARY_DIRS  - The OMPL library directories  # OMPL_LIBRARIES     - The OMPL libraries  # OMPLAPP_LIBRARIES  - The OMPL.app libraries (if installed)  # OMPL_VERSION       - The OMPL version in the form <major>.<minor>.<patchlevel>  # OMPL_MAJOR_VERSION - Major version  # OMPL_MINOR_VERSION - Minor version  # OMPL_PATCH_VERSION - Patch version      ####### Expanded from @PACKAGE_INIT@ by configure_package_config_file() #######  ####### Any changes to this file will be overwritten by the next CMake run ####  ####### The input file was omplConfig.cmake.in                            ########    get_filename_component(PACKAGE_PREFIX_DIR "${CMAKE_CURRENT_LIST_DIR}/../../../" ABSOLUTE)    macro(set_and_check _var _file)    set(${_var} "${_file}")    if(NOT EXISTS "${_file}")      message(FATAL_ERROR "File or directory ${_file} referenced by variable ${_var} does not exist !")    endif()  endmacro()    ####################################################################################    set(OMPL_VERSION 1.6.0)  set(OMPL_MAJOR_VERSION 1)  set(OMPL_MINOR_VERSION 6)  set(OMPL_PATCH_VERSION 0)    set_and_check(OMPL_INCLUDE_DIR "${PACKAGE_PREFIX_DIR}/include/ompl-1.6")  set_and_check(OMPL_LIBRARY_DIR ${PACKAGE_PREFIX_DIR}/lib)  find_library(OMPL_LIBRARIES NAMES ompl.${OMPL_VERSION} ompl      PATHS ${OMPL_LIBRARY_DIR} NO_DEFAULT_PATH)  find_library(OMPLAPPBASE_LIBRARY NAMES ompl_app_base.${OMPL_VERSION} ompl_app_base      PATHS ${OMPL_LIBRARY_DIR} NO_DEFAULT_PATH)  find_library(OMPLAPP_LIBRARY NAMES ompl_app.${OMPL_VERSION} ompl_app      PATHS ${OMPL_LIBRARY_DIR} NO_DEFAULT_PATH)  if (OMPLAPPBASE_LIBRARY AND OMPLAPP_LIBRARY)      set(OMPLAPP_LIBRARIES "${OMPLAPPBASE_LIBRARY};${OMPLAPP_LIBRARY}"          CACHE STRING "Paths to OMPL.app libraries")  endif()    set(OMPL_INCLUDE_DIRS "${OMPL_INCLUDE_DIRS}")    list(APPEND OMPL_INCLUDE_DIRS "/usr/include/eigen3")    list(APPEND OMPL_INCLUDE_DIRS "/usr/include")  list(APPEND OMPL_LIBRARY_DIRS "/usr/lib/x86_64-linux-gnu")  list(APPEND OMPL_LIBRARIES "/usr/lib/x86_64-linux-gnu/libboost_serialization.so")  list(APPEND OMPL_LIBRARIES "/usr/lib/x86_64-linux-gnu/libboost_filesystem.so")  list(APPEND OMPL_LIBRARIES "/usr/lib/x86_64-linux-gnu/libboost_system.so")  list(APPEND OMPL_LIBRARIES "/usr/lib/x86_64-linux-gnu/libboost_program_options.so")    list(APPEND OMPL_LIBRARIES "-lpthread")    if( TRUE )    list(APPEND OMPL_INCLUDE_DIRS "/usr/include")    list(APPEND OMPL_LIBRARY_DIRS "")    list(APPEND OMPL_LIBRARIES "ode")  endif()    if( FALSE )    list(APPEND OMPL_INCLUDE_DIRS "")    list(APPEND OMPL_LIBRARY_DIRS "")    list(APPEND OMPL_LIBRARIES "")  endif()    if( TRUE )    list(APPEND OMPL_INCLUDE_DIRS "/usr/include")    list(APPEND OMPL_LIBRARY_DIRS "")    list(APPEND OMPL_LIBRARIES "flann;flann_cpp")  endif()    if( FALSE )    list(APPEND OMPL_INCLUDE_DIRS "")    list(APPEND OMPL_LIBRARY_DIRS "")    list(APPEND OMPL_LIBRARIES "")  endif()    list(REMOVE_DUPLICATES OMPL_INCLUDE_DIRS)  list(REMOVE_DUPLICATES OMPL_LIBRARY_DIRS)  list(REMOVE_DUPLICATES OMPL_LIBRARIES)    list(REMOVE_ITEM OMPL_INCLUDE_DIRS "")  list(REMOVE_ITEM OMPL_LIBRARY_DIRS "")  list(REMOVE_ITEM OMPL_LIBRARIES "")    set(OMPL_INCLUDE_DIRS "${OMPL_INCLUDE_DIRS}" CACHE STRING "Include path for OMPL and its dependencies")  set(OMPL_LIBRARY_DIRS "${OMPL_LIBRARY_DIRS}" CACHE STRING "Library directories for OMPL and its dependencies")  set(OMPL_LIBRARIES "${OMPL_LIBRARIES}" CACHE STRING "OMPL Libraries and its dependencies")    include(FindPackageHandleStandardArgs)  find_package_handle_standard_args(ompl DEFAULT_MSG OMPL_INCLUDE_DIRS OMPL_LIBRARY_DIRS OMPL_LIBRARIES)  ```
ompl/ompl,759,2020-11-05T02:33:33Z,2020-11-13T22:37:43Z,True,2020-11-13T22:37:43Z,552ee37591ddc5c8160b935085339e90dee886fc,2,2,1b101b2812e008670006202d1eda5f5acacbcb19 3d40d635f8f97b9f82012e4979cc57d516e931fe,,CMake build fixes correct cmake config file,Alternative solution for issue #755. See also PR #757.     @Levi-Armstrong let me know if this works for you.
ompl/ompl,762,2020-11-18T02:37:18Z,2020-11-19T01:27:52Z,True,2020-11-19T01:27:52Z,5cc5a365443cd136d546051b3a26c9218105b254,1,1,62a28ce4ec5e2d3b71561e861d9406feb918e390,,Fixed missing parens in cmake,My build of OMPL from source for use with MoveIt! from the latest master branch failed with error:    ```  CMake Error at ~/uuv_ws/devel/share/ompl/cmake/omplConfig.cmake:78:    Parse error.  Function missing ending ")".  End of file reached.  ```    Tracking this down  I believe it is caused by a missing close parenthesis in Line 54  https://github.com/ompl/ompl/blob/552ee37591ddc5c8160b935085339e90dee886fc/omplConfig.cmake.in#L53-L60    I am not entirely certain what Line 54 is doing  as it seems like Line 58 resets the value of `OMPLAPP_LIBRARIES`.   In any case  adding an extra close parenthesis at the end of Line 54 solves the build issue.
ompl/ompl,764,2020-11-23T08:12:11Z,2020-11-24T18:32:03Z,True,2020-11-24T18:32:03Z,7eca126c7d76668dd27c9a55fd3caa6a5ea9bc50,1,1,acce8665856015c2d254a5be30297645736801a0,,Sign compare warning in assert statement of quotient space demo,This is a tiny change that fixes a sign-compare warning that I got curious about when building in debug mode.    To me it looks like the links could be `unsigned int`s  but can you please verify this  @aorthey ? Thanks!
ompl/ompl,763,2020-11-23T07:53:44Z,2020-11-24T18:36:03Z,True,2020-11-24T18:36:03Z,9ae4ba3b8da6789dd1e4e62decd3f53a4ae9d3e1,7,5,7437c36f41b746d4a530c907d31cc41e04a7a19b 786f1ea939d0d59113fa04037631c05ccaaf70ac f9d1e0161901176b34da4d68553a5b95d11691f6 bed55be1b020ee54057a46f6ed66963cc0e9afa0 aacee428abc063b4de5fcfad093c0aaf4e0ebc12,,Fix aitstar miscellaneous,Hi Mark     I hope you are doing well.    TLDR: This PR    1. fixes a memory-leak in AIT* (hopefully this is the error you referenced in #723);  2. makes AIT* check termination conditions while sampling a new batch of states; and  3. adds AIT* to the optimal planning demo.    Please let me know if you have any questions.    Details:    1. Memory leak: AIT* caches nearest-neighbors results for each sample. It used to do so by storing the nearest-neighbors in a vector of `std::shared_ptr`s  but this could lead to a memory leak when two (or more) neighboring samples were pruned. This PR changes the nearest-neighbor cache to hold `std::weak_ptr`s instead.  2. Check termination condition while sampling: AIT* uses informed sampling to sample states. If the optimization objective does not support a direct sampler and the current solution is close to optimal  sampling informed states can take many attempts. This PR ensures AIT* is better at respecting the termination condition by checking it after every sample.  3. Add AIT* to the optimal planning demo: In trying to make this PR as little work for you as possible  I've ensured AIT* works on the optimal planning demo (`demo_OptimalPlanning`)  the SE3 rigid body planning demo of ompl app (`demo_SE3RigidBodyPlanning`)  as well as the 2d circles test for optimal planners (`test_2dcircles_opt_geometric`). I figured I could leave AIT* as option in the optimal planning demo.  
ompl/ompl,766,2020-12-01T21:04:38Z,2020-12-02T21:05:05Z,False,none,86e2921139acadacec85fb512e6440888735cad4,3,2,0569c5eed98688b4f67031980ed15ca7b799ffb7 237cb0f274c3ef1df3827ca014df0921b5fbfec6,, AOS 705 New Motion Validator For Approaches,
ompl/ompl,789,2021-03-11T04:47:51Z,2021-03-12T06:19:39Z,False,none,dfc16275a47b690307b9f52f310f987435712edf,1,1,bc8247c9a81d59198ab287c324ddb1fe0694bbab,,Fixed mismatched tags in package xml,The xml tags were mismatched  resulting in an error when I recently attempted to install OMPL.    I changed the close tags to be the same as the open tags and then I was able to compile OMPL.
ompl/ompl,739,2020-07-12T10:04:46Z,2021-03-13T05:58:31Z,True,2021-03-13T05:58:31Z,f25bb385ccb8584dd9b58cfd61bffdcc94cde0eb,1,1,992a8d12e7ca266758af6bd1fbcc5022217158ab,,Prevent RRTConnect returning approximate solutions from goal,I had come across RRTConnect returning approximate solutions that start at goal state.  As I believe this is not the expected behaviour  this PR prevents this from happening. 
ompl/ompl,780,2021-03-01T15:58:29Z,2021-03-14T20:20:48Z,True,2021-03-14T20:20:48Z,8f070ebaa456684969628ee7e044fe1a785f89de,1,1,363d08a08075e575ddd775dc9e4a898410bd4cbf,,make PathSimplifier aware of the objective in SimpleSetup,The `SimpleSetup` class is absolutely awesome but it currently has a limitation where even if you set a custom objective via    ```cpp  simple_setup.setOptimizationObjective(my_objective);  ```    it doesn't make the `PathSimplifier` aware of that objective and it simply defaults to optimizing for the shortest path length. This can be seen in the plot below    ![image (2)](https://user-images.githubusercontent.com/19624734/109522729-3dd67200-7ab7-11eb-89e4-3be7b68e267e.png)    In it  I have set a custom objective which includes optimizing for the shortest path and a potential field that should force the path to the wall on the right side. The solution states in purple are correctly optimized and sit on the right but after I run path simplification I get the path in blue which disregards my custom objective.    With the changes in this MR  running the same experiment results in     ![image (3)](https://user-images.githubusercontent.com/19624734/109523070-9b6abe80-7ab7-11eb-8a1c-6f47357649f6.png)    (the transparent line is the reference towards which the path is pulled)
ompl/ompl,778,2021-02-27T21:32:10Z,2021-03-19T01:01:19Z,True,2021-03-19T01:01:19Z,9c3a20faaddfcd7f58fce235495f043ebee3e735,8,13,bd332928951b58f11924f6ff594aafee457d8c14 6df3276a63695a4065fef25bf43e584c8cf743ac f8013ad123585ae79322f118c2da605286077c17 9f7083bdac1b6c5bd01c020b53fb9cc41a4feadb 128c2f4c6c4b747aedebe998db701a4c7c745e45 4098da503cbf7f31c1189a6d591bb5f71bd7bf88 13e3f8c4b561a30dc8b016a5562da74a566aaca8 5beadf790a9e4bef789f5c4b6ca1389035a8baaa e70fe30722ca6866d133bad1c0189114fa5c51bb 046f064aa9feb36deadf950281c963418b20cd21 4387e5c265c674729accf60f809a1f1af2c93950 ba8f353a1c176d40fee5623a270855a588c8de70 2b4295ae3cbc02babfee1f6d5c7bcdec892693f4,,Add state spaces Sphere Torus and Mobius ,Hello everyone     to make sure that a planner works correctly  I found it super useful to have some simple geometrical spaces which we can visualize. Here are three which I often use: Sphere  Torus and Mobius strip. They all come with correct uniform sampling methods and correct interpolation/distance metrics attached (see pictures to get an idea).     I thought someone else might be interested in using them  so I wanted to share them.     Best   Andreas    ![sphere_interpolation_thumbnail](https://user-images.githubusercontent.com/1220541/109400707-7573db80-794a-11eb-85fa-872cf6382958.png)![sphere_samples_thumbnail](https://user-images.githubusercontent.com/1220541/109400708-7573db80-794a-11eb-991a-3319c1eeaa4c.png)![torus_interpolation_thumbnail](https://user-images.githubusercontent.com/1220541/109400710-760c7200-794a-11eb-9972-89bc57dfc538.png)![torus_samples_thumbnail](https://user-images.githubusercontent.com/1220541/109400712-760c7200-794a-11eb-8f17-1f3859bda15f.png)![mobius_interpolation_thumbnail](https://user-images.githubusercontent.com/1220541/109400705-7442ae80-794a-11eb-8105-12d544de441b.png)![mobius_samples_thumbnail](https://user-images.githubusercontent.com/1220541/109400706-7573db80-794a-11eb-94e7-859c8c3cc6fc.png)  
ompl/ompl,727,2020-06-03T22:28:18Z,2021-03-22T14:31:10Z,False,none,0d91a5fe0bfdf235fc3f07aeef88dc7cf0d10bd2,172,351,40db0a0fd240b3af0695b85a12b4f4ed001d4089 5116e0b5dc60b9f51b93e120cbb8c598a5607c4d 2e31ea7a62557df2eac2a9be19c5987f33d67c6f 6899c7a7d1ad2eb44d587a48e0561c7b8617565a a1340b5f29083a7ccee30e7f08861b93783912ce 24981e58d2581bf0f62a6fcc8b249ae8f9bf239d 22d995a9747b21e6614d04e7a4dd266e71993d98 f4b649009ff5bb281943cf34941681e8c7cf0d18 bf80981dbf3e9b6a513bec80bb324263bb587c4a b3391498e225f5b2328014d0293ee3a1f813d0d0 88a87a9f6b73d574dd7a588b82d059e56e8b47bc 8547423a6023999162edf1f800bb0b977d5b2860 d3f803af845771b30eb03b6698b82d3dd2fd8de2 0e531b475fb4b1b478c26c8615a3f8fee559818b 2fd0cbed0a1c6c6fc2ec43c3490999b521656acf 4305f0971e84b7fdcf9d0dc98088735d70362ad2 5906bc730400b98e3154381da8b8f6896765d010 dcb4e96dd61b93b94a9010d4b02ed66d33a8f7f2 e8c5cff2ba1cabd84ae7e03d06c249ce23fc4158 646b97dab522492879839258f641ceca562da28c ee96d352ff5457c54fb0c44a566308a43493a176 dd9e4d6e7680bd958838aedb70c4d27cc6eba4bd 2d65c86c6d3be1574a283482cb4b8d6f31aea196 fef31e5507b20f1695f294c03c1693cdae734011 b78e7bb71684d4e13810eb2e33ec7a17733ae18a e1a1ce690ea5d52eb12a9fd06c8fd8a04dcfeb9e 5b21d9dcbc376e24ef95fae538b8b9aeccfef33e 28aa20af784d3d809ca0d7f99b6ec5fe1026df76 c9f503c5913de362c63862881cdda493d45f76ee fb7a9c2cff57616c663bc4740b46cb5838525643 c348c9db188903711d3c64ecda3b481f921ef2bc 5ba48c3ae93f309064f41a18c4bae0563feb0a1a 2525e6a2d09f097449e3c64cb817b4dd8a9440b3 6bf3ad7b025d325836074870fdb68540b13f228e 19600ec9b40f7ad294c719dc331620462641f57b c4db9bdd71b64a301e17b19b43722076fa0940ba d1260eca239465c7f7064327183905712e4e6d34 78abffa836cf8e3a3426e4cd255a2c785c6a220e c50f4e88bd5eb74d4f1afe4891cb9b971878aee7 b5f7d2e825bee46fa2b67a49f2afe838c0d5c708 bd940e7e8f4530e45258b48a014140747407cbf3 8ba136c2f53092e1026256b158669b46dd3e7dd2 8d796365859a849302b2325b5e9f3e63216326d4 4fc3b8cada70342859693e8f9beed49365c8d953 1bf78bdb4b3570e653c1b34ad1f763e70dfc8582 0af0c771f5ddaa4148c1b94144a180889a9f82cf 6d99e96056b2522a41a440dd0e9ead3d29428f18 e50db66e6d1772f177030a69ebe36a7736f48801 02820f2cb57e225b72923699175d714a63a698f6 2e4df9bd186e0a33663820de829afed06b0a2040 dbfe9f22f49a23afe488de82e68f501fd93d48f9 f143b3712c751a3b97ddbc248f76d772c60f8935 29f2e273df283d84696cc45024aa2d3f24ebec59 0470cf13d629d177ee01707a607c92fd0ba7ecd7 5943db7ac14579355ac045c1555577ed07da809e b7134f673ee15c8f3c5547463a986790c71823ff aec7ad16c370e05bff494c7eb26f40b58270887e e2f10aa4376246467b603ff66ceda0725b493bf8 0c4c6e2cf593398db43af8916fca0c765092d81e cb8a0d8859c2c0949d2edd36115b2aa4fc0adb84 304084b438530d8427a8306bdf1ce187ea620faf 5ceed8ae633e0348425b9c06307b1d927bac3703 2d1774ea90ea78d3884c3db57cea9fecdd8d42d8 10ccab4716b9186c9412695733cf8a643666c546 d116dbdd6a4380e0e74bf47642e9f46f7f72b850 ede8987ceebb10fe5bcc7d1474c4802833a0644c 63403937fb8bea33b86401f82e6e4b3fda11c02f dd3c47dbe27009ca0a642fea36148bcf223e2bde e3e51ead4382f0a1168cee27b35eefe5dde209bb 1e0b93a9542eafc07d453482f1afabff83cf70ea 4cea853d1906c8938bc8d8dc811d94c4e0cd2f67 a38d71bd4669e057bd9bec819b4b9454dd58d460 4ab79059d79fd7cf0714f0ff2cdd2a410df96a9c 54fe82faccb91dad94da2857d1ca5ff42ef80f3c b1faafc40f82b928668d50fa6b40e8088453fed0 4e7646801fb6f21c96f1f87c073c0ee80caba47b 37646515847ea6ecdfcd057a2a80355ea21d8982 316c041f75e3e7ee6ac5f6ca829f17c522ee1f51 04a174c889bf3978eb26ad62cbddea32c232e431 d3d23ad54a694372023067ba4e469201f8cd0317 5f9669e85dfd785270de3528dd480aa331d2f3df 357c1ecc9827307c500c46eabe973be85f6680ea 2e545fee9e5a07921e3642f6695ef29fe01079f4 ab71494d4d799d62ce4f066ef2f1d12408bf995d 15ea9104e61d04dfaf4777268a945db9e6c368c9 c0dc842901e3be8bc3067a34c0535b51767ee9d3 2b499f0f9bbae2e711fad1357f3afe140911ac4d 0dc95b23c7979e686bdbaf557f63cc893a45599d 205cb9b74291f5633af3b518760214bcf2e2a85b b5f9fc467cbe6d5a5846c9417ac934e00a1cd791 4c417fc72275122a9d7065c094540e2d3acfa5f2 1daad3ee56570642a352dc1807caf847ae5f2478 677cbe7b0766d249ab082ac962d277bfdbfc31db 6770b1ea7b6c7147d12aa696d30becfecd711548 9a63b35856b53b10c13dace0c1cc76d586ff4202 69ab36fbdb10f0af6755b5fb3962c38513aaf625 40b35e92491a8fde868d17e991b7bbcac659ff69 f521228a8fe0bc17bac45c778a467923e224f850 f005bf15e24a559bf43a1474de74e3d1ff1b7636 1a79bbc1864f38c4f6955c427fec79bb692e42b9 cfdc9c6b6564a8c77cab90197129a9778453cf4f 308883818dbdb91a6e69569b28df0162782c7749 8b940c1d002bc1f28ee0b13afd8b72658fe8da8f e5bfa3f0978c5814e4e706c40d956b88a9b06670 51fce2d40292e83645e58bb65fbe9e5fc42067d2 9d063744bc51514c2c13ae6159466919c0e18d36 7938c7894859a23acb61d962f90f6d53abf23fcb 9c34f32485b684abd3ca9b778a82c1cf8576ccdb ef9e46bb06a0715997a93a7e1e61e9e559bcc044 dfa5e02667ce949b5d13b58b619339482d8a6112 dc2984515a9cb3d18d26cb361bd2da1ff73261bc 4d316608282042f77d9f9bb95dc39d693eee2d45 0bf1f4d95fa93110debcffdc2438d97a0b58f7c0 ca1a7c890ac475b0f66169fa8ac52f4fa8d18972 8b744235f51df03d799860a5fa0848b53cd82c6b 65fedcc211f8e6d5433dcd752da682ad65f1fd5d 1a058dc804861bcf682f61d2cce860366e6bcf7c 5ee6a31c8788ca1ab303267b1154a9ca29be6e9b d4eba15146ae23fd6aa7511a2e3f16b2d94f8877 2e3adfb1bebac6a79784b3c7f2cf4a0911345017 faec9ecb6881e9816aa126fd227e9421fecd2af4 e2a8adbac37c5608a8ab4663ea663658d6591d8b 7405297cb6f550753b7f1a131af7176fd49879cd abe7fc14b65ecaf146b0877922a53f63ca6024cf 30e5c9c0bb231d2649a128a64e10e53464dafa5d c96dcb76a694c6610a629fd7cb96be77077fb3f1 8875a7d76414c47497fda89320cb63c6a0b89631 5897559ac92a471c763c83d05d6671f72c0cf60f f1cc6c015fd3af463217abe30958150309ec7f04 cbd55f791f0f4e8b4351c46555953a7b0958295b 4c52794b5d281334a8a9abed228dc31f910e61ee 0fae9539e192fa35bdd83b37e64088b9b07e3a4d 9f2731646d36247a3a17aafd8d145897a1a9f573 19a34baeb18c1260ffe959dddeca3c64bc638f25 53f09fa7e08e8d1e612f0e01f6e35c3b16228a40 de5adf3ac0c3dfb0dbe4fdcf29b73a5d805cfec3 a1f98cfe19752ed87b80a266c9b516af0c064d12 ccb5b628dda81a8a9897c2784fa7926413dcd6ae ebf75eaf30437958b5af4a5dd845442289ab401c d180f62074bdcc97a8854fb2af5400c705f4ce5d 6abc4798cb865cc86fba9040bc4a1ef701efdb6b d909a24e60aea2fe2681e80a27e03536475bc2da f1a0ebcbd6c6d66100ab4388a4cb951d7b7293c2 470d0b5e19689396ecb70792e241e1adce33491a d4be7c48fd703d4d9457d78fa796111aaca13d07 06914b02c7ed84fb98b64d043f2489d6b8cff966 f5ca70f13a831a902da3ea3b3e701677aaa40e4d 0dc771aa38cf1012f2e977f85d388c8904da73d7 7d13f2ae3231dae5c42af5eef6c361813194e99f dce65b67901610198a44d1cf348d06ac73014f8a e2513ac29b7736743dea97506614fded841528d5 3d6f1431a6aa6e16d337b2f920d4b0eea9711661 ae1d9ef138fe0be1503ab0b5b5c8e57b64d4c5c1 d830a67ff283ad1bae6b47a7642c64239da4bd37 9dbf0390b1e7954feb234d0b37400014ec889e12 e1fe836cd66fd434d07c0a0c8f732b4a59c73078 d61d57440fdec4962b311ed52d97999cff21ffbf 88fa4e10469f9282120480683fd7be2fe79669b6 690ed2cc6b1568d211b2a2f81336dd5254c511e7 eb31e1fd5fb2f8cbfb24eae2df358788156286e3 eb71130a7ac1ed2c768fe0c0abc9647927693020 9a69621ba2af08a1eb8a38545766a59401302b7a dce3cf9dba35bcf3132fa6672607a5cc6b0511de 79cd74db56da95ef3eb1355defcc9cc656d2ec99 0ead83079a128c99e690823efbf464bc220ab2b6 2a33986add0abe62e9ab9efac2006780dc32b604 b39cae7f4ac2ef58a7381ce7e434bd0253a39838 ed46e00d61b15bdf54672d58ea0d387d3b78fac9 059ac61fb2e1c710a40e924e2b2e9fe20e3f3645 c8806d68982fffb0e26ded355976ca41bc2ce433 439db35d78100da8f6709dd303e0b1972ea2aab5 a600a90d33abaf02215361513dd5600f576e333a 15fb2cca9dba9ad9a6e0a93edf4ce48d675314b7 b1e89240d6293c9771176e60becf1f946962f1ff 8983a44d90229b253dda67de45f69c7ca8e5bf6d c41faa851fda5753d1b2ba16198086e6f3a18c04 fea1bed1fda6198dffcce5c1b85feaba89cbf9b1 2c7aecabed45ed346fc1a01196a42b638f9b18ef af53d4324877574ad04551f1ae8789ad77028057 39b4e8bf22737105320506ed5d610d3ecfbb5b48 eb507b802e87f100fa3cbd9355fb96a623531d43 0f3c918c2bf090874880c0a6debd354e3f38b2d4 05df4a1c881b1357875292110c88e582857bea93 35ee8269234d48d52b94bf5a4189e640cfe711a2 0fec3024df284d4ce11a6d8b0c2af2d7413266c6 08ec7f546f787ca08dc0b691d6dd411375ce9e42 f5fb7dabd419bb5f6b6adc640d12e5ae2de2a1a8 525ac7c77d86363ffdd50797062e8e345e364156 b8fb2a3ab420ec151f341b4395ab025d786c9853 80706da6e233fc6625a0a33ae2a8e9b610cc1227 8321cb93bd9a9aa4969d2dc22741e3700373e75f 657f8af83cb546284853b6c0974c5fd76dbd1b34 f211a5589dfa8648ecd60564a4f2816d6a589b78 a8cc3bf1131920f20a8ffafaf448b2d617093835 51b6af4d24c61015ae729f5fd5ccfaf63aeb4dea 1f4b19e8fe4be585c7cd9b661659cfd3debcbaea 42f9f53f4009815718d4631bf1f4a7d6526c9437 c2976046421d9fc0917fce217f56311fbd00ea1a f8de055ab7a217fb55a9318a7eb0889aab661476 4575a49af2e8d4f6bd44da431923a419dc2b8a98 3735053a33a118f6c83594dec07d0cbc8a895d13 16996b1765083a58aade2714e8d49121a6c3a956 09dc83d30122dd0b3272072dcca7ef1294690490 9711a40f032d7c300ac181b1d4905013e4f34d25 266029e41b30f1c31854a39fc6c5eebfdb31fdb1 0f2ba7b844ed2524636cff91531d3e37fcdef13d 374d6f5022560f9b4cdd6f6deca1ab105741e6e4 afde6ee2c50f6a281b406eaeca798b2cf4380475 7f3f46ee01425413bb09b6768ae34870ac725d90 c0c0cb61a8b4ab9b43bbf81c2a7e8e59deb62970 5b90f496f07f0a6afa6b537a22d7fb04bc1701dd b29700e74088cdeb4a6c2b966230d1e7c30f9b29 f1693ac5a2d07a284334a4044b4beebfca59034a a94860e4c64a74685c9a518ddd07ac003ec48936 cdcc3e287e9ce9d51d29c96ac7b736e2a1130382 4504125e8c95fc1c83e61a5df86b279b599a5ab1 6cadd02f8474904d920a56ec53e6c7655a9d64e0 85afc4f5b4e77ac1f892a79301a21f88219fd5bc d2ff22988e0a6071350bc13457cfe638aaeb2fd4 b5bda6906a24d6fddbf069343553d9949b94b5c1 819d35cccb1daa143c961a5d7c7a41628e493fcc 3f95a3dc8cbc02091a8cc54bc45e7e8bdbc54ae7 71ddbd4b32b0366fbe879e6df2d0116806be3a4d 3dad5824312926934571d4ba281d9f860de52042 be5ae328f9f367aa486a0ec7ca2c7b0d263aca54 425f33436a30d0f00a1cf4ad1b2c2e4b71e9f614 df39f0b07f8654d7b7826a8b9e6231b59a3aaa79 1efbe4fec8a56c761ac09676f436bd5a068788c7 55cd414ac0ab7a3681f379817ab1957a89b8cde7 534d386cede4b0636fe06000e5d87453001b23f0 da517fe446f27a48b5fbc7ca28629970a3453857 a425085405ce90ef505ca802e74c851ce1e2105d cdc8d917722369a4c35b7b0ba798166a3109e7c8 a536024bada77509b6015288a58a103b81bc0491 9f0fe8d12daf12cfa55bc46701e131e3bbf5e4ae bbc509f9590c8ed356a8760a4382a7c5e1f37ca8 66487504c804bb91c380d81654c5f4f1d9500aea 934938c8959857211e14e52345ada36b8640ad5e ec6093fa71be6299160f2516791db6149123cb91 ef1cd6322ce55830a5465c8a2fc900ed78c60953 44170adfcae80faa1d696e55c1cc2cf2115dbc8b e7c7843abc1b97e92d01cc449fe4b43408f1a002 0bf75d3257e55dbe33b48f2c4255c86c5415d2d1 4b9177d95f113b92124f58adcd11e9094359075e efe0a6ccaeb24d0031552b71d55e5c035488a2d5 69e8ec12ddb77de0e5168cb23b69f4e7579c2a5a 26e71661fb537264cd943db140f465c0dd396e7f 1e2390e5f87ed16689de926405e62e47ad6c1bc4 4d9ce9ea743e274d21c742a19c70878dafb7b900 3b5e6edbbb4498d3ddba1bb275b533fefdbaf4e1,,Multilevel Motion Planning,Hi Team OMPL     we have a small update on our multilevel motion planning framework (formerly known as quotient space planning).     List of Changes  - Rename quotient space to multilevel (makes it more descriptive)  - Refactored code using language of fiber bundles (makes code cleaner)  - Extensively tested on high-dimensional problems (up to 100-d for hypercube benchmark)  - Enable multi-robot planning using a new component-based implementation  - Enable handling of non-holonomic constraints in multilevel planning  - Add new algorithms: QRRT*  QMP  QMP*  - Add new multilevel spaces (empty  relaxed  identity  SO2xRN  SO3xRN)  - Add sparse graph structures (based on SPARS impl)  - Add new path restriction/section method to exploit multilevels  - New methods implementing multilevel metrics  sampling  propagation and selection    We also added a new high-level introduction  new tutorial and new demos. There will be an upcoming paper explaining the framework and the algorithms in more detail (in preparation).     Let me know if you have any questions or comments on prettifying/improving the code.    Cheers   Andreas
ompl/ompl,777,2021-02-25T09:43:26Z,2021-03-13T06:06:05Z,False,none,b3f09ac56801532393cc4347fbbfb15d3c9b8b35,1,1,263b5bbd2d6c44d5be3a5239f459165ddc7a031a,,Add Eigen libraries to link targets for ompl/ompl,TLDR:  I think Eigen should be added to the list of libraries the `ompl` target links to.    Details:  I don't fully understand OMPL's CMake structure  but the reason this came up is that I'm modularizing an internal tool that depends on OMPL and one component wont build because the compiler can't find the Eigen includes. This component does not directly depend on Eigen though  so I'd rather not explicitly specify it as a dependency. I'm far from being a CMake expert  but I think adding Eigen to `target_link_libraries` is the right thing to do here because that propagates OMPL's dependency on Eigen to build targets that depend on OMPL.
ompl/ompl,805,2021-05-13T21:08:28Z,2021-05-13T21:09:02Z,False,none,df2d8851341b3e1ab104ed76133d16c78459d52f,1,1,4e1e110979e52bd36d5c32de8b032219c2d1965e,,Print upper and lower bound if bounds check fails,
ompl/ompl,809,2021-05-24T16:46:47Z,2021-05-24T16:47:02Z,False,none,b2ab9b457c607105dddbdb74416040dd68dd3017,7,4,ad77104335214c3f4daabf254f76e22d8595bc3b 03414f4f608879d4e309028fe6a93ae5946240ea 6c333e526cd017f0bbdbabfd4b7570f278daec66 84c6c5353853c974c73193bf881a4513f458e1e8,,Dmsj thunder threading,apologies this was supposed to go to my fork.  
ompl/ompl,804,2021-05-04T16:36:00Z,2021-06-04T09:08:22Z,True,2021-06-04T09:08:22Z,aec864b062754f5c4103cb1322109722ff50993f,12,8,cfe088ead2e87ea00224c387d284b7ba75fa1c66 2c09623fef71f9ab4d71c812be95ae93d820099f ca6b99b4d4ac4adadaf85b1b3f9e41469674a335 149fb53ba8015ecef6409f5a4b7c3c9a6b69118d cfd47c27e913b62db6097568b5bdfefa4ce41555 832600f08ef1a5578ab1bbc9b8ff2c7b2e861407 27c675f15b1fe6f050c4291798d80fd1de2e5e70 7cdb30be76e5f32277e08169ee93bb83cb202baa,,Special State Spaces Kleinbottle State Space,* Add new KleinBottleStateSpace  which represents a self-intersecting immersion of the Klein bottle into 3d. Uniform sampling is implemented by computing the curvature of the bottle and doing the rejection method as described in [1] (see also [2]). Distance and interpolation is implemented by thinking of the bottle as a cylinder which is glued together as described in the wikipedia article [3]. I added several test cases to make sure it works correctly.   * Move the state spaces TorusStateSpace  MobiusStateSpace  SphereStateSpace and KleinBottleStateSpace to base/spaces/special/ so that the folder does not have too many distracting spaces (I think those spaces are more of theoretical interest).     Below is a Figure of the bottle with an additional obstacle + rendered with blender + three solution paths planned with OMPL:  ![kleinbottle_solutions](https://user-images.githubusercontent.com/1220541/117038799-5a399980-ad08-11eb-9095-1bdcd13c0652.png)    [1] https://iopscience.iop.org/article/10.1088/0031-9155/32/10/009/pdf  [2] https://mathematica.stackexchange.com/questions/148693/generating-random-points-on-a-kleins-bottle  [3] https://en.wikipedia.org/wiki/Klein_bottle#Construction  
ompl/ompl,838,2021-10-06T08:19:14Z,2021-10-06T14:44:28Z,True,2021-10-06T14:44:28Z,d101202ebcb3fe9c7882c286615f00887e73e775,1,1,c91f8c8c8f50ce416cb03c706ada89b81955ae96,,fix opengl_libraries check,Resolves #835.  Fix by @mamoll  see https://github.com/ompl/ompl/issues/835#issuecomment-931475324
ompl/ompl,812,2021-06-04T09:09:33Z,2021-06-29T18:26:02Z,True,2021-06-29T18:26:02Z,b39711efdc420ca55e7c01e93fd964ed99a3b703,1,1,203712ca8f9f1909a02134cf1711752cc8bce05c,,Set the sampled cost to identity when adding a new batch in BIT ,This PR fixes a small issue that @gammell and I noticed when BIT* plans in compound spaces where the informed set of some subspaces can be sampled directly.    Here's how I understand what the problem was: If sampling from a compound state space with `RealVectorStateSpace`s as components  then direct informed sampling is used for these components. To support just-in-time sampling  BIT* samples "shells" of the informed set in these components. These shells are defined by a minimum and maximum cost. The issue with initializing `sampledCost_` as the minimum possible cost to solve the problem is that some of that cost might come from non-`RealVectorStateSpace` components of the compound state space  e.g.  the angular component in SE(2). If this is the case  then the center of the informed set in the `RealVectorStateSpace` components is never sampled.    Initializing `sampledCost_` to the identity cost whenever a new batch is added ensures that the first shell includes the center.
ompl/ompl,784,2021-03-04T07:28:22Z,2021-03-10T22:25:00Z,True,2021-03-10T22:25:00Z,b8d9f0223e77c3f87d644d067094770f6a86c691,3,7,958011e5aa567bb4fd134d393b23e3a055ce6a9a 9456e5351267dcb6c8d68a62ff6a8d3ca2fce2ab a589950cfeffc227e1d09ecfc25096ad9c956eae 24e4726b64b88e050b342b4c16b8e8fe8cfa0e69 1344eb8fb0112b1e653afbdefae02695ccef7b5f 7c5bab7d8e7079d09ba1bdb9912b646fced58907 dbfced263a76329e66ff04d39b751e0b832988cc,,Clean up BIT planner progress properties,The main purpose of this PR is to remove the planner progress properties in BIT* that are not thread-safe (namely getting number of current vertices in graph and getting number of total samples). This should fix #779  @jediofgever can you please confirm?    I also changed the default name of BIT* from `"BITstar"` to `"kBITstar"` since by default BIT* is instantiated with a k-nearest connection model (since c08da89)  which silences a warning. I also took the chance to clean up some code as it came up.
ompl/ompl,813,2021-06-04T13:03:47Z,2021-06-10T18:33:50Z,True,2021-06-10T18:33:50Z,6790532869cade3fac47b825e9fadf1ced6fd17c,9,44,fa0f4a26258de5eb1306bc0f876f8fe502541421 4d36e17e2342868c56869ae3e7cae63c1e688691 88d4600284b58b37cebd54d8026bac01cde33e36 f3c901e93493fd3bddeb5667cf86b95609513fd1 b065bdacdfe6bc71210b3c3ce314294b2ae81c9c cd1b474a832c8e1c04496faef85cac86404615cb 8b58be120b09b79851421bd577eb4921dacd377c b4fc1a823a22f2b51f91b2cc869cfe87bb7380c5 7e25d9b2456858450176a026e6c3de272d0fca34 ea5499d1ab46db93560457f5c303104098f1a9fc ea4841e248bc193070841523f8bc8a5d2822efbb 86054f9b92a6e0a0c0a4cf992ce04782ca1614f0 5994fa2efdc70d5f01241a3c26c399351a90cd56 89a60d6823d03b17984770f02d8ba087b35fa145 3b139782a7a9d5bbfd28af0d99064cf985f2aecc e262141a1f2788b519cff52b0a3f9f1a577ea459 f9d92e22bdd9ad8f56ac5bdb1bd82e031ec8f3dc f9347d151a4ddc42eba9cd081d3f7758e25faf9a a52ef7233a9aa43201632dde23214dd36f59f5ef 58edca744a7c19f21cdeb0b0960b043e093165a6 be53a8dd002f95949e2a34ca0e2d4235e316cfac 0759ab5e5d2c1f01ad702442998aeb022b27541c 1bbaf4b77fa921bedb575ff6e87814393bbdf555 c245b16bb5feb64d080b6b7e61f9adcf0f60a990 eb3a5b5d01d0da193e7cad29ef2bb84c1188b56b 25e4bbbefcdc67b9f16ed087fe9c33ca5d9c34cc 7281efc5a36ad6c2569486682ff85cbbaa5a0d7a 0015f1b54bbb5a20d2020c5f75873f1f50536898 21eeef7e8e175c2c6205e9bc7147418835e07b9b 48dbef71c237c905c3cbd0d078e7cc4f0ad1c34a 9f9464f7899d0b421b707e4df2b5e3764e0a6b2c 43024852684d82f0032e05d14076349fcc7c2813 bd5718d646082fb51a748818bb4d2ab05031db4b 5d6a2b61c3f375459423924146ea9185b75df56d e465859bb51f738af1fdaadb793c6ac3c5de4965 97e8d324ad70feca15e7626a0c728c85e93fdf63 e26e7b5025db91aa5317d8f0287213078bf31e82 8f4614376ca24f363fa68852f133d1a5c8c9ae2e 0029726079877004b960437420d3aa21b98d3f1a bbd3cf6ac705c25823cd03870f23b922df6fdd6f 33b52960a9008ed26c63d5eb7b20b82ab7a677c2 11e69e2c04f4aefd3659b73cb570d65ec8c09808 903bffea57e9c8e85008ac33eb42ba70428745b0 a9e56a6347269cc8e5a2a8203afa6e9fc825da09,,Refactor AIT ,This PR refactors AIT* and implements a slight improvement regarding the stopping condition of AIT*'s reverse search. The forward search and the resulting solutions are equivalent to before but may be discovered slightly faster.
