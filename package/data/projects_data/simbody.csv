Project,PNumber,CreatedAt,ClosedAt,isMerged,MergedAt,MergedCommit,nFiles,nCommits,Commits,Labels,Title,Body
simbody/simbody,18,2013-08-24T21:18:28Z,2013-08-24T23:29:26Z,True,2013-08-24T23:29:26Z,59a34102d24f8d14010be1b6b80bcd7e4dc3b53b,8,2,095b7ae5dca221a4ab716e110906f3955c28c84f 95cf0ec7e0188eb8677d9e26a5061ac954f9a1c4,,Visualizer merge from Simbody s svn repo,Syncing up my last commits on Visualizer svn branch to the Github's branch. 
simbody/simbody,30,2013-09-02T16:42:07Z,2013-09-02T17:06:08Z,True,2013-09-02T17:06:08Z,b671ca55d0c5383740b13ee98ff0d2f7a53275ec,1,1,77e78ab5a1321ffb9847f6ab6d51484c9b3f45d4,,3 3 version release,Fix release version in changelog.  Sorry  in the first pull request version number was wrong. 
simbody/simbody,32,2013-09-03T18:44:28Z,2013-09-03T19:13:24Z,True,2013-09-03T19:13:24Z,c4cf3b2d651f27c0d2e2b38b3242c9aa00cc367c,1,2,61fa9b78a50dc01406eb1c823b6d05510b8993e9 430435706ac6500ea2a77dc0344c8fd0ee1a602b,,Clean up dependencies,Some of them were plain wrong  and some others are not needed (indirect dependencies).  We should propagate these changes to master branch. 
simbody/simbody,33,2013-09-04T21:49:07Z,2013-09-04T22:53:59Z,True,2013-09-04T22:53:59Z,d5364b1e6797423a610b182715ec714f74a2617d,1,1,dd1b1a9eabbf87fc7a973b53b16da8381a2f1f5e,,prevent NaN generation when gravity is 0 0 0 and we switch from body ,... is excluded to body is not excluded in gravity force appliction.  This is necessary as the rest of the code skips updates when gravity is special cased to zero. 
simbody/simbody,37,2013-09-26T17:34:38Z,2013-09-26T17:35:02Z,True,2013-09-26T17:35:02Z,1d81a410ddc49179d020e740fb3e5e4d0b84c4d5,1,1,eb394d30d8c5a28706b4780d5291ecb496ac5212,,Minor fix to SemiExplicitEuler2Integrator error estimation,SemiExplicitEuler2Integrator wasn't properly updating prescribed q's for the double-size step. That could affect error estimates in some unusual circumstances but probably won't have a noticeable effect. 
simbody/simbody,14,2013-08-20T17:20:44Z,2013-08-20T17:21:08Z,True,2013-08-20T17:21:08Z,ab1d7be2173f12edac969de52b1eedfc824ce293,1,1,cf82e97cb63e13b92c53dbacd7227b68fb9043ad,,Typo in comment ,
simbody/simbody,16,2013-08-22T00:11:11Z,2013-08-22T00:12:24Z,True,2013-08-22T00:12:24Z,c7f71fdb569d9c8199f8c43ae5fe5f011397b4a7,2,2,08e63d99e18300fb78c0adbacac1161b3d497aed 70172d6df05cf86d46685be40ff2e02d876a18ba,,Two small fixes FindSimbody now works for 64 bit Windows MobilizedBody isSameMobilizedBody fixed,
simbody/simbody,19,2013-08-26T20:04:35Z,2013-08-26T20:05:15Z,True,2013-08-26T20:05:15Z,89ee192b309c4abcf738a35683afc9c0425d1703,3,4,7b7090fd7629b8f05d8e491abc22ee492376c0a8 8047c19a1718fb74ada153aca182e6f96765702d 8525b1aa7b22acaf47fffb93a3317489515bff39 e55f7508917fa5dd176fd3a02ebd2b253c2f2329,,added new Simbody regression test to max Gazebo s ForceTorque test,- Renamed previous Gazebo reaction force test and added a new one to match two that John Hsu wrote for Gazebo. - Added mesh option for bricks in Gazebo2Simbody example. 
simbody/simbody,22,2013-08-29T00:05:28Z,2013-08-29T00:06:04Z,True,2013-08-29T00:06:04Z,2c40b54193d96b33db348b7ee2f92880b3d6b8a6,5,3,aba535d6f04dbbd071f5d8da317e92f993ba47c4 bacc04fa291bda6c30141b89a57fc907e4b67cfa 9b8467e00d34e4dce6fcb386d93841019070dbba,,Improved TestMultibodyPerformance timing information,I refined the measurements made by this timing test to provide more information about timings for individual stage calculations. These are relevant for computations where velocities must be iterated while positions are unchanged (e.g. semi-implicit Euler)  or when new forces are applied but states are unchanged (e.g. Gazebo's application of discrete forces between steps). I also separated out timings for articulated body inertia calculations since those are the most expensive single computation in Simbody and could be substantially improved. 
simbody/simbody,23,2013-08-29T21:25:32Z,2013-08-29T21:25:45Z,True,2013-08-29T21:25:45Z,1c23461e765133304549c2e961b3309267f7b918,2,1,eb5b1aad2d86bc7da2515fdd594000bbf9e2ad29,,Modified MobilizedBody lock and lockAt methods to immediately modify state ,This satisfies Kevin He's request in Simbody issue #20. 
simbody/simbody,31,2013-09-02T23:44:30Z,2013-09-02T23:45:29Z,True,2013-09-02T23:45:29Z,bdf0a20aed4721a1e9c8bcf70270cf04c92ee196,8,5,b8c4cc8e8a8ddd393e5b3c8075bbb645b6333fc7 8c3d9ffc20f844c7325fc3317e2d77c0222b596d 20a6b4b82068ad0174c562d0647a73e50eeb0a35 0ae258e03525b96551b06337adc2669647c021a3 1ac00736240243f9dd51082454a6f71db3d3beb7,,Fix multiplyByMInv so it is usable in forces controllers,Fixes issue #29. 
simbody/simbody,43,2013-10-08T21:35:45Z,2013-10-08T23:25:07Z,False,none,e93f01eb85ee8c5d4684f2a6e6d5f4dbc4938dce,1,1,183effcba7cc7f7cde00b59ca8413a9b7539110e,,Fix minor typo in ExamplePendulum cpp,
simbody/simbody,44,2013-10-09T01:40:53Z,2013-10-09T03:34:04Z,True,2013-10-09T03:34:04Z,d4b20a072a3a61d078ca5af9d0e88f58cdca1741,1,3,507ce9a167a2b6b1ff83107510b4e87a995c4963 bdbdd57b933e0e8741f70f02e20cbcfa57e5622c 8888131f7a6065cace2510154bb1b2720648b25a,,Doxygen only ,Fixes #41. 
simbody/simbody,45,2013-10-16T17:15:01Z,2013-10-16T18:17:51Z,True,2013-10-16T18:17:51Z,442127da6eaa3b02eaefc8651e199d555bb30922,1,1,9a987e31ff69cb77ce15bd40840a8def1e0cb766,,Removed debug message,This message is printed when someone uses the FindSimbody cmake file. I think it's just a debug message. 
simbody/simbody,54,2013-10-19T18:04:45Z,2013-10-28T04:52:21Z,True,2013-10-28T04:52:21Z,acb9017fa4fbab97591ed3395d29c6b4a233eca5,9,3,c201c2bda9bb6c0ee0f21b6f0a5241876f1e1c37 d0ace6a24396a364324233c49b06966acf7da7f5 d9262ddffa1527a29b6b0029d6f4e6a3117e4ac5,,Fixes 10 Optimizer getAlgorithm ,Each implementation of OptimizerSystem implements getAlgorithm. Something I'm not too sure about is my use of SimTK_APIARGCHECK_ALWAYS (https://github.com/chrisdembia/simbody/compare/issue-10?expand=1#diff-829061f3d46e7762cad70320fdaf5d1bL39).  I wrote a test that ensures getAlgorithm returns the right thing for the systems tested for IPOPT  LBFGS  and LBFSGB. 
simbody/simbody,35,2013-09-18T05:47:22Z,2013-09-18T06:03:56Z,True,2013-09-18T06:03:56Z,203e7ffa5ce6e58c10cbd77e63a5405ab07f5a7e,4,1,dd15e038baf2584200df8dd5f95afd3206960c1a,,Add ability to maintain back reference to user object in DecorativeGeometry,Fixes issue #34. - After discussion with @aymanhab  added to `DecorativeGeometry` the ability to store and recall a user pointer for use in selection operations for mapping the selected piece of geometry back to the object to which it refers. - There was already a body id stored with `DecorativeGeometry`; I added an arbitrary index also that would allow differentiation of several pieces of geometry that might refer to the same object. - Added missing concrete class overrides for the generic `set()` methods that return concrete type references for easier chaining. - Added some missing doxygen. - Lightly tested. 
simbody/simbody,59,2013-10-30T17:50:06Z,2013-10-30T18:50:18Z,True,2013-10-30T18:50:18Z,1498f1edb49a2ae222bb43edfaeb22e9722b5c7e,1,1,d2f84c5297f6fbc7b11bd3fa88bc620360d8db7f,,Fix doxygen generation for deb packages,Call make doxygen was not done in  the debian rules file 
simbody/simbody,61,2013-10-31T21:46:58Z,2013-10-31T22:10:19Z,True,2013-10-31T22:10:19Z,f87e000ff21e75bf493af6735faee5440d14ce26,4,1,a9a6cf1b76512c0ecb61ea1e142749f47cead8ca,,Added support for DecorativeMeshFile as a subclass of DecorativeGeometry ,... to pass meshes to Visualizer by file name. 
simbody/simbody,62,2013-11-08T01:10:57Z,2013-11-08T04:16:46Z,True,2013-11-08T04:16:46Z,1b48ab6e9c01b6ffe418f9c7065f38389044391a,3,1,bdaa038295c15bd65da403f67f847a5070290b04,,Correct typos in IpOpt header guards ,Clang picked up these 3 things and gave me warnings. 
simbody/simbody,63,2013-11-08T01:26:47Z,2013-11-08T04:19:30Z,True,2013-11-08T04:19:30Z,5ce2b429a60cc25b627aed1268b739f7b558d407,1,2,6e5015f060006d16298f2aad2ce6e4ac3d8858ae 44e32ea0372e6aa63d02925ad15349be5f2a27ba,,Clang warnings,Clang doesn't recognize -fno-tree-vrp -fno-guess-branch-probability  and emits warnings. These flags are only provided if Clang is NOT the compiler.  Also  I change the way how we check if Clang is the compiler. It may make sense to make more similar changes. We care if Clang is the CXX compiler  I think  not if it's the C compiler.  The way I check the compiler for Clang is as shown here: http://stackoverflow.com/questions/10046114/in-cmake-how-can-i-test-if-the-compiler-is-clang 
simbody/simbody,70,2013-11-23T04:43:20Z,2013-11-23T19:57:24Z,True,2013-11-23T19:57:24Z,c01fd53c4028ac1edc762f9632197626ee699202,3,1,924b7db4de477036ac9850e98a89c7061dda4106,,Added doxygen to Vec and Mat ,Added some comments and use cases to doxygen for Vec and Mat (under "Detailed Description"). 
simbody/simbody,71,2013-11-23T21:20:59Z,2013-11-23T22:47:29Z,True,2013-11-23T22:47:29Z,fbe5f5791011bd09900b18a6dfdce988f4ba7e3f,2,1,daad22b5555a106ff2778e5777ea108cc73a11a2,,Removed examples that only work in Release mode ,As per Sherm's comment on pull request #70 
simbody/simbody,76,2013-12-05T06:04:24Z,2013-12-08T22:49:49Z,True,2013-12-08T22:49:49Z,d9481212ea170decf606281175fd3e076880c165,1,2,eaa50b4d1ed5452da52db1b7f96d647cc48eeb48 6c3926a5b69053d399bf7f2fd38875b36966fe0e,,Doxygen fixed line breaks in elementwise Matlab operators ,Small doxygen fix. 
simbody/simbody,77,2013-12-09T06:00:13Z,2013-12-09T16:34:45Z,True,2013-12-09T16:34:45Z,a2a3fc6e70c77cef9e095c7199f15001c1544234,9,1,736991f73528f17443630ec86f4883bb57345698,,A step towards better Doxygen documentation for Simbody s vector and matrix classes ,- There is a new doxygen Module (like a "topic") on the vector/matrix stuff. The basic small and large matrix classes now belong to that module (using doxygen's `@ingroup` command). - I extracted some text from OpenSim's SimTK matrix library topic and used it to seed the general discussion in the new module  but that needs to be reworked. - I went through the Vector_ class and documented all the methods (many were undocumented). This needs to be done for all of these classes but you have to start somewhere! - I added misc. documentation here and there. 
simbody/simbody,83,2013-12-12T23:13:37Z,2013-12-12T23:23:42Z,True,2013-12-12T23:23:42Z,774f5de04b5b76b9691c64e836dbbd717abb8891,11,1,e3ec7b4cbab077436fae8e1febdd1068a0099379,,Delete unneeded Doxyfiles for individual libraries These caused unwanted installation junk ,Now there is just a single doxygen target and it covers all three libraries (simtkcommon  simtkmath  simbody). 
simbody/simbody,40,2013-10-02T06:30:09Z,2013-10-03T16:45:14Z,True,2013-10-03T16:45:14Z,376c65080f04dfceeb67827a4e3659595d94be7f,10,2,7023a2b188e7f4be42302cd8c0105fe193c94868 ca24c54d0b7f284bd7933480c8b6a0641f21ea43,,Fix for 38 use CMAKE_INSTALL_PREFIX,Except for the root CMakeLists.txt  it's a search and replace of SimTK_INSTALL_PREFIX to CMAKE_INSTALL_PREFIX. For the root CMakeLists.txt  I remove the block of code that overwrites CMAKE_INSTALL_PREFIX with the value of SimTK_INSTALL_PREFIX  and add a different block that will copy SimTK_INSTALL_PREFIX into CMAKE_INSTALL_PREFIX under certain conditions for backward compatibility.  I have tested this on OSX  but I still need to test on my Ubuntu machine. If someone can test this on Windows I would appreciate it. 
simbody/simbody,87,2013-12-15T23:54:46Z,2013-12-16T00:20:45Z,True,2013-12-16T00:20:45Z,dc26f6f7e72e9f1b965cd3a82b2b8f4f1dfa8b5a,13,1,9e60983063034672958ed006d801e0a866b213bd,,Split up the bloated BigMatrix h file into separate files for each of the big matrix classes , Global methods and methods that involve multiple classes remain in BigMatrix.h.  This will hopefully help make these classes easier to document. 
simbody/simbody,89,2013-12-17T21:48:21Z,2013-12-17T21:52:08Z,True,2013-12-17T21:52:08Z,60e1f0e6dcd40982ddfd6e88eb8eb003a7d34aab,1,1,5d61410291ddc9e1d0a6088cc46eaa19bf422022,,Fix doxygen comments for Force Gravity ,Doxygen comments for Force::Gravity were out of date.  Fixes issue #80. 
simbody/simbody,94,2013-12-24T07:24:32Z,2013-12-26T01:22:10Z,True,2013-12-26T01:22:10Z,3cd19227b66636b50bd43ea76d55d30d7f0179ac,2,1,143dd1a97737c510633eec2cdd60695f593329d8,,Install examples to doc dir and lib 82 ,Install most of the example files to the doc folder  except on UNIX  when the executable examples go to a subfolder of lib with a symbolic link installed to the doc folder.  Fixes #82  
simbody/simbody,86,2013-12-13T20:17:14Z,2013-12-13T22:59:21Z,True,2013-12-13T22:59:21Z,73912de520a55771ed939004c9da43c2ded003b8,1,1,8f6351ccc3dac26853d3e568cac56c356b01b83b,,Fix 85 reduce scope of Doxyfile EXCLUDE_PATTERN,The _/src/_ pattern was a little broad  so I changed it be scoped a little more towards simbody-specific folders. 
simbody/simbody,107,2014-01-14T07:05:53Z,2014-01-14T16:35:12Z,True,2014-01-14T16:35:12Z,0bb834ac90ed7f5acaaef1dffd00b432d03b24bf,1,1,ded13b0736c4ed13711d7ef3989907707aa282ca,,Install cmake config file to different location on Win32,See http://www.cmake.org/cmake/help/git-master/command/find_package.html for a list of valid install locations. 
simbody/simbody,106,2014-01-13T19:24:06Z,2014-01-14T19:56:41Z,True,2014-01-14T19:56:41Z,63f2d570c6cd0edb663bf1fb579819646de6459e,2,2,5a0670fb79d62f437bfdbf24afb86869da6ae839 fb9ce91436af809f176cae7382562446b3004727,,Add uninstall target fix 104 ,Adds an uninstall target  so that 'make uninstall' will remove all installed files  provided that the build folder is retained. It will not remove any folders that were created during installation. 
simbody/simbody,114,2014-01-25T22:26:05Z,2014-01-25T23:31:08Z,True,2014-01-25T23:31:08Z,03854937607ca5ec7a54ba61543b3be1cf99abf6,3,5,d95354e5c57e44dc3ca0ea34869b0b5fe6816544 865c04f4938264b1a988c04dff2b9419e8f21566 886d8416974d7b0c40489d7b173284e2543bbe8d 080905ed7366086688ccbd7b3eb9fd6b13c892c8 9283eb8adcd0b8ed297ca3641921a1cd8a73b48a,,Provide pkgconfig file 68 and remove rpath from SimbodyConfig cmake 113 ,This fixes #68 and #113; special thanks to @j-rivero for partnering on this pull request. 
simbody/simbody,100,2014-01-06T07:33:43Z,2014-01-30T03:59:09Z,True,2014-01-30T03:59:09Z,4ce6394b11d6998fcf769f7000ba8feb7dee48d9,1,8,cd52ca8f63ef926c78bbfa25a6da6f0d7bc10d2f f1343a1b82569cc33f5ec6d15ab2d554f148ccf4 fe3cd50000ea680e854cf399a26934ce6e0b102f 640c826f2aad5f735165276db6ba07cf9458149a 3c430486bee325f2182bbb26304a180b05f27146 974133a771592c8be580b78d69eaeafa6dd7f876 987ba5709428fc3f73d1a5aa14700fd66c122a74 e7e618a95360128f68d10bd08a0d918a08b34574,contact, WIP Tests for PLUS impact algorithm,Work in progress; PR for discussion only.  <b>Status</b> Position projection algorithm can be run in <i>exhaustive search</i> and <i>successive pruning</i> modes; impact handler currently performs exhaustive search only. Handlers no longer create internal copies of the MultibodySystem. Results seem reasonable for the six tests run here  though more testing is necessary. Toggle the <i>PRINT_</i> flags to see detailed output.  <b>To do</b> Checklist has been moved to Issue #115. 
simbody/simbody,116,2014-01-31T01:33:17Z,2014-02-01T06:52:57Z,True,2014-02-01T06:52:57Z,c74ece474be5f59c4430a4c7da25b99405141182,3,2,67750578cc1e5234d3129ebe7ecbfa1ba57703b0 9bf2a728e3207830d075c6897addab15ae4df693,,Fix bug in getTotalCentrifugalForces found by Justin Si and reported in issue 112 ,Fixes issue #112.  This method incorrectly used the articulated body inertia when it should have been using the body spatial inertia.This was a localized problem in that reporting method; it didn't actually reflect the inertial forces that Simbody uses internally; those were correct.  Also added some missing test cases which should have been there in the first place! 
simbody/simbody,117,2014-02-03T05:12:08Z,2014-02-03T06:10:15Z,True,2014-02-03T06:10:15Z,9d719bd86b6af5c40da63a1230fadee4f1c022ec,1,1,e309e0d6c7e5e5e6181052e77f046cd4307dbbd8,,Added comparison of exhaustive search and successive pruning strategies,Added a mode that compares exhaustive search and successive pruning strategies for position projection and impact. Exhaustive search occasionally selected active set candidates with "observing" points when the set selected by the pruning strategy had none. Modified exhaustive search for position projection and impact to favor active sets with the least number of observing points  which will (indirectly) minimize the number of intervals required and maximize the distribution of load. 
simbody/simbody,118,2014-02-04T00:09:32Z,2014-02-04T00:13:23Z,True,2014-02-04T00:13:23Z,ce1dfc49d4f7bcbc4ceb301b224d8c794298500a,4,1,741c06731a776f15b009c6754dab9e37e0d021c1,,Fix install problems,- SampleCMakeLists.txt wasn't being installed (now modified to use config rather than module) - pkgconfig had incorrect library names on Windows - changed "CMake" install subdirectory to "cmake" on Windows - simmath headers were going into the wrong directory - Problems with SimbodyConfig.cmake: didn't work if there was a space in the installation path name; didn't work on Windows if both Release and Debug libraries were available (not sure about other platforms); left spurious "onelib" variable visible to user in CMake GUI. 
simbody/simbody,119,2014-02-05T02:57:00Z,2014-02-05T03:39:17Z,True,2014-02-05T03:39:17Z,00b6d4983100a53ae271eb312b01fe23565f7d74,1,1,8dd5075df0d101bac2b0f5d60e64ebc7786ddf5e,,Remove unnecessary check when all sliding directions are known ,No longer checking to ensure sliding directions are acceptable if all directions can be determined from the current state (calculateIntervalStepLength() reliably detects sliding points that are undergoing large direction changes anyway). 
simbody/simbody,121,2014-02-15T22:07:22Z,2014-02-17T01:48:12Z,True,2014-02-17T01:48:12Z,bd00ba6b6b106e529c50fb73e9eefb698a1db63e,4,2,c8d9c394a543d58f6139c25df8f0d934889309f9 eb78db37e133f9f5cdf00066868f929708c07cd6,,Remove SVN_REVISION preprocessor definition ,Remove some stuff from the CMakeLists.txt that looked for subversion. We could potentially try to replace that definition with a GIT_SHA1 definition.  The SVN_REVISION flag did not seem to be used.   http://stackoverflow.com/questions/1435953/how-can-i-pass-git-sha1-to-compiler-as-definition-using-cmake 
simbody/simbody,69,2013-11-20T09:01:15Z,2013-11-21T21:28:05Z,True,2013-11-21T21:28:05Z,e4fc7e3ff9f04e2b567630e06fe1c45a0b24ef36,1,2,d0da7b0ab63e81db9dc41e89dc76f57b890335c6 2bd8c996a47f4e6d817a63150e48a6e91b03ea4c,,Fix 66 add operator to VectorIterator class,The build is broken on Mac OS X 10.9. One big change is the move to libc++ by default  which has caused some problems for other people.  I'm not sure if this is related to libc++ or not  but it seems that the templated std::sort with clang on OS X 10.9 requires iterators to have a += operator defined. Adding the operator fixes the broken build.  @sherm1 can you check the assert math? I tried to extend the logic used in the increment operators  but I'm not sure if it's off by 1. 
simbody/simbody,127,2014-03-18T16:01:53Z,2014-03-20T19:33:02Z,True,2014-03-20T19:33:02Z,4340efb9e6aa7a6e5a3fc57c2885941654299055,2,3,bc7884d12a92c5c651b69af093d8f2afe9cb3871 0ca1baed1300e98863cf368a53d887154e28ac56 6b69e981b7a9b44fa4b3bf93840c37016c03bb2c,,Improve dependencies handling through CMake,With this PR  the user is warned at CMake-configure time when dependencies are missing to avoid linking errors at build time. Also  Visualizer compilation is disabled when optional libraries are not available (not sure if this is the intended behaviour though) 
simbody/simbody,129,2014-03-28T04:42:13Z,2014-03-28T04:43:35Z,True,2014-03-28T04:43:34Z,64a4ddaf2f3d1519619f87348f46f28989bf0969,1,1,9a9bae1a1c57f4a079b3a54cdf85e1aba79a0ea5,,Fix bug in optimizer test suite nlpqlp for loop limit was too big ,This was detected by gcc's aggressive loop optimization when it tried to unroll the loop and found itself off the end of an array. This fixes issue #128 reported by @scpeters. 
simbody/simbody,130,2014-03-28T16:14:57Z,2014-03-28T17:30:21Z,True,2014-03-28T17:30:21Z,e21ee207efd1df9cf83244b982bc565fa19e9694,1,1,7c7978472cd186c49bfa15a9541105d1448238f2,,SIMBODY_SONAME_VERSION not updated after rerunning CMake ,I don't think this needs to be cached. If it is cached  if I check out a different branch of Simbody  using the same CMake build directory  then this variable is not updated. Would a user ever need to modify this themselves?  ``` SET(SIMBODY_SONAME_VERSION "${SIMBODY_MAJOR_VERSION}.${SIMBODY_MINOR_VERSION}"     CACHE STRING     "Soname version to use when generating shared libs") ``` 
simbody/simbody,131,2014-03-28T16:34:25Z,2014-03-28T17:39:37Z,True,2014-03-28T17:39:37Z,a0c9d85796098fb64f99f1afdeb0140727fa9a86,3,2,a345bdcd56971403da91ee2bd4761652c2ab1d58 a78c840f6a3678a2f8c5f44fde97d85239d4ea2e,,Fixes 128,We should wait till travis passes.  Here's one of my commit messages  copied for convenience:  ``` In travis  use the -Werror flag  as advised by @scpeters. Doing so required me to improve how I add the -std=c++11 flag to CMAKE_CXX_FLAGS.  In the future  the way I set CMAKE_CXX_FLAGS should maybe conform to how @sherm1 has done it  with a separate BUILD_CXX_FLAGS variable. ```  By the way  I used cherry-pick here to get @sherm1's nlpqlp fix so that travis might pass. My first time using cherry-pick! 
simbody/simbody,133,2014-03-30T23:26:04Z,2014-03-31T15:58:51Z,True,2014-03-31T15:58:51Z,2e3d1b289e9095780fddcc442d73e449c6c6fe1e,6,5,ef177d656fb0514590a3e4634c73c9afcdc9112f 86b526fb0368a86a9d61956e6d80ce9c8ae6441a aceb15dabc46593046726f6d71efbb4c3b2427c1 46c64c6f23b5232d76cc5dc2343b73f16b8653a5 39961237ecf76c05ec0adf89df64b1da2e1530a2,,Update debian metadata for simbody 3 4,I did some minor updates to the debian metadata in order to generate the simbody 3.4 packages into our building farm at OSRF. They are being built now. 
simbody/simbody,136,2014-04-09T00:02:11Z,2014-04-09T18:35:48Z,True,2014-04-09T18:35:48Z,5c11b0697d1b14dcc916a380fcfcf00eaeaa8718,12,4,4199401e40cda9f7d2f86521673829aa67ccde91 67d6a540ed67b97772cba685e5570e7e45d6257e 400783d16c249258c36f0015df91007974d53ac4 7e4c77dc3ad6e820ce9ba7a9b4450a6bd0b5046c,,Move debian directory under doc ,To improve the packaging method under debian  would be nice not to have the debian/ directory under the project root. [Debian developers asked me](http://lists.alioth.debian.org/pipermail/debian-science-maintainers/2014-April/024230.html) about the option of move it to elsewhere. I think than keep a copy inside doc can fix the problem in debian while keeping the easy option for us of generating debs easily (mv doc/debian ../).  The pull request include the rename to 3.4 we did in the 3.4 branch. Feel free to decline it if you plan on merging 3.4 into master. 
simbody/simbody,132,2014-03-30T18:31:08Z,2014-04-25T21:10:30Z,False,none,9c110685fb47ab434b67f74018582a5b41862818,1,40,79f237602f4c85b4d9e79e2d38c4acbc7d319fc9 7779fcadcc2f8044c94cb7ef8ab454315d849176 0b869b36e84380c8b8278e3fe6a8f1eacdae50f5 ad051227876d6a2d4408a71e4262ff0c3817d769 18af8eeb36fd5e3038e87aba7b5022f331549f6b 0aacca46e861d345582cb01c919a5b8393939d49 923d355e79bf39f0045192f2ec7ce35af923a29c 2bdf53d4462498d4bd3eace1c91a82fd67ff6bdd 87c3effdaa7196df5f535b1475e7ea5f5023e3a7 4ae231d4bd3b9d412b1fb82b6b14c70c3e122249 790e695b14d039bbe2f3de9f45660e0e8db4d162 20128c98cd4e92126b5b8322b513031b97c7a4b1 98254a4e7325e1bdc05b701f7685575e8ae93a42 e9819620b50b59a640b831ae22dd9ee143b47043 b89d6605e7ca7a051a7c9ddae4c51cf8388d9f84 a3e0b79d470692dfacb9665d9f28f78a91ef0c58 8addf35b75143cadf352cbf6856e334b8d8ab72b 0695004d1366e0127721ccfcb2be838e325a04ff 65a08d9f7feb867a0a6187598df2c00607b14020 916f3dcf67a72a8203ed34b6f5afb354aee9286a 005669759d2a9248c331e5f4248dda6b1a126447 3d8e8243f83be47cae46a0f5369892f58eea6961 808bfb09a52aea62d3fee7afcad190d92024f703 f7ddf76695dcb8993ac21e85a0e31139211e58e2 3be3a134a329b466b4f97e3053e29e656c038a7b 818658b39a372abb667fe66ef0cf6494fbc710c8 402412c299cbd2d2779a669c30780e853d290e18 37bcb369ce836ca647f442bedfdbb2bd718894ef 52344c44975faa02fb980b16c98d49b1d9bcf619 558c17e5b4f4b997edecbca321136234182868bd 9fbefecfe0a8245d9bf555a48fc2f8b2c120864e 426cfaede72e7b3c1f9d785ab49d4e7469659f2d 0bdc51f0d045fa2f1e3ca912340e5737b3fc25fa ebcd4a9e8553c43fd6deaa1f036daa5ee835dbe0 33d305a9c37ae7940e7919a182d2d234b21eca1f 6358ff30c6fccc349a403d10d9fdb956d9766cbd 4e67ef950c1d1c3f5a88248e57c7404f084fc43c beb446e87e593d528ea8dd064d7cb24d98e90b7f 4ddc91afbce7044d2a44a16271f0aefab0f84580 8141b31505e2b4e8c70cdb9b2a35f1d25f26d1db,, WIP SIMBICON example,I'm looking for advice on: 1. creating discrete/cache state variables. I need to update (1) the state of the controller (0  1  2  3) and the time at which the state last changed. I was going to do this with discrete variables  but looking at discussion with Tom  Sherm and Ajay about metabolics  it seems I should use an auto update variable. 2. storing the index of the variables I create  so I can access the variable again in my event handler. I am allocating my variables in my Force::Custom::Implementation's realizeTopology  which is a const method. However  I want to hold onto the indices I get back from allocating  so I can write to this state variable in the future. Does this code NOT belong in realizeTopology? If not  I don't know when else I get a writeable state. 3. In order to apply actuation  I'm using enums to keep track of Q and U indices. Is there a cleaner way to do this (to remember the indices that correspond to my coordinates)?  TODO: - [ ] use discrete/cache variables correctly. - [ ] write the handleEvent code to update the SIMBICON state of the controller. - [ ] write control logic for balance. 
simbody/simbody,140,2014-05-07T01:03:59Z,2014-05-07T03:09:21Z,True,2014-05-07T03:09:21Z,c89e96306e0a1bd277ec9d43d013eb1ad6511677,1,1,a6d2e18b03633e67f06268817032872d58afd43e,,Fixes 139 ,If using gcc or Clang and using C++11  then we fill in the OVERRIDE_11 and FINAL_11 macros with `override`  and `final`.  Note that the way I check if we're using C++11 is not completely legitimate  but it's the best we can do for a simple solution. The internet suggests doing feature-by-feature checks  since most compiliers who say they are C++11 compliant are not necessarily fully C++11 compliant. For the current C++11 features we use  there is no issue. 
simbody/simbody,143,2014-05-09T00:05:01Z,2014-05-09T00:13:46Z,True,2014-05-09T00:13:46Z,d845c5bac50400195b334a2f69f085081ec49d70,1,1,76ef794b781ba343ec7f4747cc9c8e02de43bb0d,,Change SimTK_NICETYPENAME_LITERAL macro to use SimTK namespace,This is so that C++11 won't complain about a template specialization occurring outside the namespace where the original template was defined.  Note: this will no longer work properly if expanded inside the SimTK namespace! 
simbody/simbody,148,2014-05-15T17:24:56Z,2014-05-15T20:04:39Z,True,2014-05-15T20:04:39Z,a553d0c298a21a16b261075159373dc1020845a7,1,2,89ccd283f1c73d11dbffe9f78e24c54378036717 e033780b06b294b0d93c62d073218dd9e080c919,,Readme debug release order,Continuing on #144. 
simbody/simbody,147,2014-05-15T05:48:42Z,2014-05-15T15:46:21Z,True,2014-05-15T15:46:21Z,963bb7c3c70a97bbe7f69c0f125fd33a1738f8aa,1,2,6ce78c889bd0737f6c908e54909fa44eccd49bef 11b5277b744d875109a974478652fd62888e0fb9,,Address Soha s feedback ,- Describe BUILD_ variables. - Discuss CMAKE_BUILD_TYPE  and building in both Debug and Release modes. - Mention `make doxygen` for UNIX.  See PR #144 
simbody/simbody,142,2014-05-07T06:52:11Z,2014-05-07T16:17:36Z,True,2014-05-07T16:17:36Z,6f7f26778c0c20cbd58b4578e026046781a87d86,1,1,22341df253c38a5129f718dc3bb22d5121ea36d6,,Fix small typo usin using ,
simbody/simbody,151,2014-05-16T00:54:17Z,2014-05-20T02:23:52Z,True,2014-05-20T02:23:52Z,3a271b927e0953e68a1e2fc78152b1614e49cd21,2,3,6e1b6bcfd9c22419184311bc9b7acecfc148cee3 650b598b460b5df49b8005fe3e8be7b214726472 d38187458b3c73bbb4510f80d02f526f4e0ea9fb,,Fixes 149 Change LIBDIR if installing to usr local ,Made corresponding changes to the build/install instructions.  Tested with 3 different `CMAKE_INSTALL_PREFIX`'s: 1. /usr/local 2. /home/chris/simbody 3. /usr  Works as intended (does not create x86_64-linux-gnu if installing to /usr/local). In the first case  I had to run `sudo ldconfig` to get an example executable to find the libraries (in `/usr/local/lib`)  which I did not anticipate. Maybe a system restart would have done this for me  but simply opening a new terminal window was not sufficient. In the third case  running `ldconfig` was not necessary.  We still may not want to do this. It adds a special case to the installation  and thus adds complexity. However  I think people should not have to set `LD_LIBRARY_PATH` if they install into a default location. 
simbody/simbody,42,2013-10-08T21:32:29Z,2013-10-08T23:22:32Z,True,2013-10-08T23:22:32Z,6a24c1ae3e77666963ad3725222cc144d9807a09,1,1,dfcab6bbd9e0b642214ce0b6e071fa9aa24168dd,,Fix minor typo in ExamplePendulum cpp,
simbody/simbody,137,2014-04-24T03:30:39Z,2014-04-24T03:31:15Z,True,2014-04-24T03:31:15Z,ee5929fbcae2665a4d8688e2d942155b19b4860a,38,53,141e8082403a460df6a8071d640753db3dc35fc4 0f585abbd8c0cbc36478cd794c8182df064f5a98 3d0c71b7696fa642b0c6432879f941f95cf27eb6 ba8d38b3d2970c1a21b0ff350246901ab32c915b c63e7a76fa44e279bcc69c73a2e4f45f2d8ed3dd 8363e46da150ca56acd7635931acfa77daa657a7 c936251969cd12b682493f5623ab900836862b86 6354dfcc41d49b189a5d8ecb0159e41928645d1e 7555acdcd73a6e079b718d75caebface4f2bc8f6 34d7bc63a80b4fe7ba2012811858ac7fab272541 aa7b0b6ea38973cb3fa379b2c433d6edd234dd4b 9a9bae1a1c57f4a079b3a54cdf85e1aba79a0ea5 4e0c5068e3fc7dd9bdf8292f212d57a189625c0e 87259a501a0d8035b59313214e413c99332eb004 5bc5a3456557949187bfc9aa2c662dfa00d651b6 49a0fa1f1a62df0aecb3a2d598ffb5294b19295d 1485f8fb546e9d9903e579e4dcd08d4a453c6294 22819f5c5127f9408d5fbd9d1ffc5b525f457499 21819022d844a3b2ca7b7ba92568f30c636081c8 20becf4d374edafde9336d081edb0c7f4a5680ab f80858d49bf69edd5dbb93b7b1469528cbcf22cd a33f9c76ed2afad028349846d1263271b7e6fab3 f82a199739d81f1423c248bd6abf22093c324595 cc6a4c64d8cf9796d2bb040562855b2490cebcff 1eb64e138c4b8cff46af3015831bf1348f18e897 49b8f7e889dcf79a133ff8023a9138f89e9dedab 37ac15c83a3e8b33ddbc511c2d7c5dad30c63026 a74d7beae412d362440a52390eae82a85b8d2157 322bebd4c3ab83d7cab305627b095f7b9a974159 57ff769e5ac1933ba7a27b03bbe4f8128004e777 c600fbf492f5d1234af93fed8a1d7ceca12813b2 471d486c8101c2993e3856e12627a48245be04c0 dd202faca5f7cb8fee6d03a1907dd9ba4a5e0ed7 39186135ed8003d65486aeda5953f48e688817a5 6ecbfb6b7202b62c8149c01f59634ffc4f9db7a9 25ba576b715a7ff96cd3f346089d48fdc630ded3 e3ab20c0ba0bc54ef42aec93666d17c60b1d39b7 21e9ab7c258e8153d93bfb34c25a0dda1b67f0d2 791c27f14c82e8974f661a70f01e2d8702a585d2 73eefbef6e9920a74a3604010a5a2a3efefa57ba 4c3a4eb8e8ba83c32fd3eb4763dc899910de2e60 31a011b96799206a2a3cf1b55843e1d93440bae0 aac4aa7b7f3b8941bbd273ee5461e18360459c68 9dd7c70d9deed298b934d7218f757746923f7f96 b9d385081af11669c00e09d24a327337697f89d0 79ee082077842bdc3c1260235ca0d3af1a858006 23e49a66f5c40fee12067e4338a85a540870f5fe 7a91d53b10ba21bcc54bb386c20faef620e5b269 b2fa54798dd7e82eb595fb2f083cd017bf4e8414 a3e8099f60492feb131815c92f356ba753fa21fa 5269faa2076d50254d0df4ee91d6f127fd75259e b941e1a949fa568aaf2fb7418c59ea955b25d4fa e7093ce43a8bd75fdb9029cf5725764fed80ac52,,Some rigid contact functionality,I'm merging the rigid contact branch up to master now although there is still much work to do. But much of the performance work there is applicable to general Simbody use  and I want to restructure Constraints next so this seems like a good time to merge.  Please don't expect the rigid contact API to be stable! 
simbody/simbody,156,2014-06-09T21:37:29Z,2014-06-09T22:03:00Z,True,2014-06-09T22:02:59Z,2a310c4826172ddb3ac2abd9d18b83493f132da0,1,1,0eedafc45aa0ecb330b4038786c17ec3baf95950,,Close one end of each simulator visualizer communication pipe,Only one side of a shared pipe should be open in each of the two processes sharing it. Fixes #155. 
simbody/simbody,146,2014-05-15T03:22:48Z,2014-06-12T22:26:59Z,True,2014-06-12T22:26:59Z,37a16cad63a163ae56c7e67172b1c07832a38c8e,2,5,d0ed7faae6d9f4a84de454aef55c08341c03ca11 08d2f9c004a1fa1e6723455d2b0d716f5a74d67d 078bec3749d1cb60bc99dac32d0e48720eccdfcd 48f2a51858dc04a8962207534cbb42dabb000fae 1eff3beee41e5ec623edf1498d13e0560aa9ea51,,Added doublePendulum gif to README md,In response to #145. Don't know how to test this locally... 
simbody/simbody,110,2014-01-18T03:07:22Z,2014-01-18T04:01:37Z,True,2014-01-18T04:01:37Z,c7c04ca5b6aae299a20a362eb783fc751fc88b7e,2,16,7196b330f9cdc31244bee2f90da2876d0f090786 6e79a3925a49638eb57b8e60977c34b9c8266122 9f6657c96d6317cba992c617b9ea9cb93d539e31 8e0c5b10d74372af6bdada243787c6944883233e 3fd37a304c7b5b6b347f69ac8136dfeeef93face e6a6f446d80a3726a94a2ff995239e1230acc33f 7f7d316557fe5aec41fc4adc21ce5863e2e641d2 984faee278e3e9dee091656ab85a5610543cfd40 533d81bfebb11871ffcde72e727c641870de58a2 eb3f68e2def23830ef853e3c57b8745d7ac1e83b c79380b60cf2a77d16e5801cfa71447d4857f134 e24b4288724f7c3f8f9a7e8dbd4f92762e7245cf 773b9d014b4814102337982934bd21fd4cbe6627 296f2484756ddb6dddf02db3fdd55e2f2f2ef669 67d56e4bb888f6ea97d2399bc511eab936d7c117 22a6593d9a69df3637e7c73024a29d11a6261cc8,,Descriptive README addresses 108,Addresses #108. Other relevant issues: #49  #50  #60. - Add travis build status icon. - Show cool GIF made by Sam Flores (will not show in this PR because I'm using links that'll only be valid once the PR is accepted. To see the GIF in action  see [this](https://github.com/chrisdembia/simbody/tree/c79380b60cf2a77d16e5801cfa71447d4857f134)). - Provide source code for double pendulum example. - List a bunch of links for where people can find forums  instructions  etc. - List project dependencies. - List basic command-line build/install instructions. - List other dynamics engines.  I'm overall dissatisfied with the build/install instructions I've put in the README. I realize our userbase is largely Windows users  but it doesn't feel possible to give Windows users anything too useful in the README. It seems that the README's usually are suited for people using a terminal.  Unfortunately  I don't have too much more time to work on this. 
simbody/simbody,165,2014-06-13T05:12:43Z,2014-06-13T15:30:21Z,True,2014-06-13T15:30:21Z,6c90609e619450c2a4b8849fd3a925d61044ed57,1,1,ce3e3dae1de674a302c3db28891e9f9d08f4877b,,Don t report assembly failure when optimizer throws an exception after achieving tolerance ,Fixes issue #164.   Sometimes the optimizer will throw an exception after it has already achieved a winning solution. One message that comes up is "Ipopt: Restoration failed (status -2)". We'll ignore that now as long as we have a good result. Otherwise we'll re-throw the exception so that the IpOpt message will be displayed. 
simbody/simbody,159,2014-06-12T23:26:09Z,2014-06-12T23:37:57Z,True,2014-06-12T23:37:57Z,b9686bd36176dda173136f0851a84ee54ef98c06,1,1,bc0c55fd5219902d540732cf8ce045835e88385f,,Use RelWithDebInfo to build simbody debian binaries,As per discussion on issue #157  modify the debian build to call RelWithDebInfo 
simbody/simbody,88,2013-12-17T00:11:32Z,2013-12-17T01:11:39Z,True,2013-12-17T01:11:39Z,8757da74acd40df9cae746d06da27be4c2a87812,1,1,d14fdd0a129c34aea368ebc2a70a15c75c6e018a,,Modify CMakeLists to avoid warnings in VS 2013 64 bit builds ,- Warning was: /arch:SSE2 unrecognized. SSE2 is the default for that compiler. - Fixed caching problem that prevented BUILD_INST_SET changes from taking effect. This required removing the compiler command line variables from the cache; those are no longer changeable from CMake. 
simbody/simbody,160,2014-06-13T00:17:20Z,2014-06-13T02:54:14Z,True,2014-06-13T02:54:14Z,a34f4daebab4d0e976dcc8ac84598fdafec49f33,2,4,54c7a2c89c88baa29dd61bc6ce50c0fd5934ff15 8a60e2ac6eb7699c555550ed35512905ce73ddf6 044470dc464e0815d1dff84f4719029bae9c7708 685f8cf8af830aaa420f7bb14cf55b21eb74fc56,,Dial down gcc clang optimization to O2,Fixes #157. Reduce optimization level from -O3 to -O2 per Debian guidance. Remove some dead compilation flags  including the -msse2 instruction set selection  for gcc & clang. 
simbody/simbody,64,2013-11-11T12:22:57Z,2013-12-12T06:39:51Z,True,2013-12-12T06:39:51Z,dab32b92857050eb27f8da238258509657383b26,21,27,f4a95616709c43dcc69eb7977fc2e5c15d42c5e3 ce956537913bce77e54558cd43cf4c190a4afad3 bf915b90727d503d6ef9d23fead216b88e3a390f 3979bfa17b83a397f4054d7f1f1ac14e09fde4d6 0332d989601f7b85faf10791983a9414e670fb0c 88a6fcf039953b562171f80750a1a9e499f8b295 2b7c31060e86982dbc292697eb15e1cc80aa6887 87f5ea762399ff9348f41e88227daf0826723cbb ee4e224404c4b6f99ca1261c9c217ff5fe87f741 272842140d9899c7b23dd8892bb7fd0721fd547d b8e444256db03bf3ef9a6cb30b430aaf1319285b 763dbf4cf3eaee3f51a2ea36e26a017cd5df70a1 5df0ecbe1213afacb87ea7d864c42354d8eb05fc d80e89353d5ac18af99b465d24ff67c41dfd82b1 5d2f8fe712e56fa2dad389fe81d962c9bc8607da 1c88d6002d70980b0eeda71be3075dd147dc9539 e26c354174464db653a761742d2e96641f97a5e1 bb1f80d3379afcac078f2e9b49928dbe10423249 851f4d81eb8697c6d516d776919e85dcf352c4eb f67c917876384207996421cb232701901d91cb53 dec0e916ff96618a64391a363c87fa7a5876332d ff8fb771c5c693e182a6d2b6e6aed40e263ddb04 3061cdf18d964cb7597130fd65e5b95ebeea26be cf8fa6eecd2b128988dc660bc1e661d11eaa552a 2a3be0c12f290fb2a3f3265dde729df439837dc5 38d95ca333589088419b7abaa757e730f64a2d7e ac1e1b4a8099ce967c442cdda0a984d036d26662,,Standardize install paths and cmake finder,I've made some changes which should approach Simbody to the standard guidelines described by Debian policy and AFAIK they should be quite cross-platforms improvements  although testing in Windows/MacOsX would be nice. Detailed list: 1. Use GNUInstallDirs  which should provide canonical paths aware of the platform. 2. Change all the hardcoded paths to use the ones provided by GNUInstallDircs (CMAKE_INSTALL_DOCDIR  CMAKE_INSTALL_LIBDIR  etc). 3. Adapt and change name to cmake finder  generate it from a .in file to be aware of CMAKE_INSTALL_LIBDIR.   I will move the debian/ directory out of the source  but I have leaved here during the pull request so the great @thomas-moulard can review the debian metadata changes and maybe provide some feedback. 
simbody/simbody,2,2013-08-16T20:42:09Z,2013-08-16T21:47:15Z,True,2013-08-16T21:47:15Z,e8a911fdcac23a733634e95d0ff50ea18bf32ada,2,1,2c7add1681a2a05a3187e79d68b55c66e42babe4,,Fixed Optimizer doxygen to make clear that setDifferentiatorMethod must be called before useNumericalGradient ,Fixed doxygen documentation to make it clear that you have to call `Optimizer::setDifferentiatorMethod()` _before_ calling `useNumericalGradient()` or `useNumericalJacobian()` or it won't take effect. It would be better to fix the API to make this less confusing  but at least this is an improvement.  Resolves issue #1. 
simbody/simbody,79,2013-12-10T00:26:18Z,2013-12-10T00:55:48Z,True,2013-12-10T00:55:48Z,897249ea78cf694e8046d9f82e026a94e042697d,3,1,e36bd9055c89c3a407e412cebb5f3827f6b31093,,More matrix vector doc fixes ,- Added missing large-matrix typedefs to the matrix/vector module and added some documentation for them. - Classified matrix/vector typedefs into commonly-used and uncommonly-used. - Added some missing `@relates`. 
simbody/simbody,95,2013-12-25T16:09:29Z,2013-12-25T21:48:43Z,True,2013-12-25T21:48:43Z,ef768e640837e037bb46df02d31f74abd44cbd87,12,1,88c0eb35e65559d56f243f7c0b9463d6b0f99cab,,Clarify test example cmake settings ,This commit attempts to fix issue #92 via the following changes: - Rename BUILD_TESTING_{STATIC SHARED} to   BUILD_TESTS_AND_EXAMPLES_{STATIC SHARED}  everywhere. - In the comments for BUILD_TESTING and BUILD_EXAMPLES  mention the   importance of BUILD_TESTS_AND_EXAMPLES_{STATIC SHARED}. - Edit comment for BUILD_TESTS_AND_EXAMPLES{STATIC SHARED}. - Add CMake errors if the user wants tests or examples but sets both   BUILD_TESTS_AND_EXAMPLES_{STATIC SHARED} off. 
simbody/simbody,58,2013-10-28T01:17:51Z,2013-10-28T02:34:29Z,True,2013-10-28T02:34:29Z,8f731aa4d870233d2ac835cafe62b8715ab0cf85,1,1,3ccb14050ac0313baaa0b13dfcd497a6698d37d6,,Update description in debian packages ,Description referred to an image of Isaac Newton that is present in the Doxygen. A user seeing the description wouldn't know what is being referred to.  This is for preparation of submitting simbody to be in the debian distribution. 
simbody/simbody,169,2014-06-19T16:47:19Z,2014-06-19T20:38:09Z,True,2014-06-19T20:38:09Z,369e531dca53a8f95a439587c8cd3f82e657b649,11,2,3d34dfd0f745ec86a00103cdf23b74ded193a25c 521a297c22692705ca5e777e829aed4f22bda5e1,,Add edge edge contact constraints,- Added bilateral line-on-line contact constraint with normal non-penetration and tangential stiction. - Added unilateral edge-edge contact constraint based on the line-on-line Constraint. - Modified RigidContact1 adhoc test to include edge-edge test case. - Added BilateralContactConstraints adhoc test to verify energy conservation for a variety of bilateral constraints that form the basis for the unilateral constraints. 
simbody/simbody,168,2014-06-19T05:33:09Z,2014-06-19T20:37:36Z,True,2014-06-19T20:37:36Z,59f4df2c146a06470251dcee6782fdde19fb6742,2,1,3d34dfd0f745ec86a00103cdf23b74ded193a25c,,Don t let Assembler make the initial solution worse,(1) Add short-circuit to assemble() and track() methods of Assembler so that no optimization is performed if the state is already feasible and either has no goal or the goal is within tolerance of zero already.  (2) On return from the optimizer in assemble()  make sure that the solution wasn't made any worse if it started out feasible; IpOpt has been observed to do that. This is to avoid embarrassment! I did not make the same change to track() since there is a performance cost.  Fixes #167. 
simbody/simbody,25,2013-08-30T07:47:49Z,2013-08-30T16:54:35Z,True,2013-08-30T16:54:35Z,8a80ec0a10d7c342b215d2521284d7e5d0998b2a,1,16,35aff561e8f0172812bb23f5eafc2badd32b996a 68c62fbea1db1ed6a36154d2364a6649492a682c 30230517e50eace1894198b010da189e6f3994c2 e26bb009c5d99efcffd45532710945fb45bdeebd 2a883cec9de062a1b5e0aa8c6a6d047032399c2c 3d18769d6daec83f215c6d862bb0db3b7234ac29 e03a99ffb4f021ab78ecea5d7f2d17d29be415b1 98abf8c4e96878d1759eee655dbbfbf96ba2aa1b c07a614feed15cab36198fd6d7701d254d5729d2 770acb2849b6937d73ca0ffc46be3b458bc32600 ccfab77e960aa429d8e7e25a426435fc33f7fbef b3457f87c866b5526b2c6fbbcc04d14810665175 4c177c491e55f31d1068708d46410c5d3700c592 c85f5acafd422ef82d5c6d7906a677d99968385c 496bcf8f059eebb6ee00fc3a17888ce9f53d0b1f 980de10badb5298a7fd13d3be489e100fd48c1ef,,Automated testing using Travis CI,You can view the tests as they're run  right after each commit  here: https://travis-ci.org/chrisdembia/simbody/builds. This is set up on my fork. You can see that the 8th test passed. To set it up on another account (user or organization)  see http://about.travis-ci.org/docs/user/getting-started/. Below  next to each commit  you can see a grey x  red x  or green check  indicating if the install worked  if the tests failed  or if the tests passed  respectively. The service is free for open-source projects. 
simbody/simbody,153,2014-05-28T16:48:05Z,2014-05-28T18:28:00Z,True,2014-05-28T18:28:00Z,f2733bf0897d50d206f7ee029b6f265b3292b35c,1,1,c79e2801d93bba43c384e17cbc31433a97540e1e,,Relative link for RNA gif ,See https://help.github.com/articles/relative-links-in-readmes.  Found that link from a link that @sherm1 sent around about github tricks. 
simbody/simbody,60,2013-10-30T21:39:03Z,2014-05-25T21:31:11Z,False,none,621eae5481d21da3b2f67e4a334412eb0a55696f,29,6,b62dc717a3a8ddb8ac8a3ff985059c48df48848c e1ab3c99f1f9690c78dab4468f5a74393d5da2af 3cc897061750bf46aea31ddae637b8af673b4e8e ec8368f75fb123fb80dc31e3c02381c2faf4ad58 3e4bcb1b303163c940a8d20a3b0126151f3e0fd0 1e3dcacba38366e854658a578dd260a6fec1cb61,,Work in progress to address issue 50 installation documentation ,An attempt to address #50. See commit description for 1e3dcac. The "HowToBuildFromSource.." documents have been moved to Markdown  but have not otherwise been updated to reflect how to properly install now.  Still to do: - Update the documentation to reflect proper installation procedure. - Update README.md quick-install/build documentation.  This PR is not ready to be merged in yet. Just looking for feedback. We may not even want to do any of this!  By the way  on my computer  doxygen fails to build completely. It gets hung up at `Generating docs for compound SimTK::EllipticalPointContact...`.  Related issue: #55. 
simbody/simbody,53,2013-10-19T01:55:53Z,2013-10-22T03:47:41Z,True,2013-10-22T03:47:41Z,ede430174d64839747d3f137d88d4ffc00ae8aeb,22,4,c0fd1dc71870fb6501d819e52919e3a211beab8a e386b0ba33ffa42e747e9cfe16c303972f6d1b47 9d574674b6c2a5ee04548e4df42394cf3884e3b8 792d4a2ac0d734b80edf4ad8cdd6ef41367759b8,,Fix issue 27,Addresses issue #27. See commit messages for details. The text 'VisualizerGUI' does not appear in folder/filenames or in any files  except  Word doc's. The name of the VisualizerGUI is now simbody-visualizer. 
simbody/simbody,102,2014-01-07T01:11:18Z,2014-01-14T06:03:12Z,True,2014-01-14T06:03:12Z,de4540c939818825278b26823b72dbb1e399c69e,5,2,6c489500c2b190d73d8c78f98cc5734cfef9b8e0 888ba119288be9c6538d1adc132207db379f1988,,Fix 101 install includes to simbody subfolder,Install header files to simbody subfolder to prevent mixing with other system header files. Fixes #101. 
simbody/simbody,78,2013-12-09T22:35:16Z,2013-12-09T23:47:41Z,True,2013-12-09T23:47:41Z,5e14d941e14395fe56506a3d80f28e8db842e56d,9,1,1b239838eff0fccec923acd76dc73a6f1c5062d9,,More improvements to Matrix Vector documentation,- updated Doxyfiles to doxygen 1.8.5 - added currently-unused images directory to SimTKcommon/doc to avoid doxygen warning - removed never-implemented "DeadMatrix" classes since they made the documentation confusing - removed the MatrixCharacteristics module since it is only of internal interest and is confusing - defined __cplusplus in Doxyfile; some declarations were being missed (including SimTK::Real) - changed formal element type template parameters from "T" to "ELT" for consistency 
simbody/simbody,144,2014-05-14T18:01:12Z,2014-05-14T23:42:43Z,True,2014-05-14T23:42:43Z,1af8b402a1621638b696beac4ea123fea0d5a47d,1,20,2f4ec460c7083e86dde0dada0642df95565301a0 34df59ce0346fb80f91f377ca13be72cb890ba38 4661601e82ed90aa33ff2d72ef05eae27b026a84 6ec3f7c81f7b6d803887ebdcafd570e370ba4b1e 66783e81be3169df4824a0fd3a2ae3d758b0b17b f587cb7a70bcf1afe402945943293d47b050b66e b99dacbfc7b0c319a45ce454e863e8b2128c6689 957c5312c5f6ea445ef1c49943d7f48c6cbcd0d9 39516cdfc9f37fe31ce7691e23bb0601b59d25f9 30d038cb96696dc355798c8c0e3f3b4343e680c1 5f9f6214c11637fe6ecd5a2299673945a76ec5d3 be420428c234f740b58978000869c6d91ec98aab fe933fb6d75130270ed35cbc2e06e3ca5f41f1cc 70898e0239c713493bcf9f1bee349d291f2f99e5 9606b559a36c8c1f7fc502e4c103420a7d33bdce 3b30193170ce6ef9fad0c3f005895fee96052f87 a4a7209eba3a36987bb61cdc9588e445eff48584 f8cffa1b74763f41ea708d869253e2b9d05996e4 0d79fb30c00605b51d6b25fd0d9f0327c3106030 2214f7f1f28aa4f9af2442522606116372a8e264,, WIP Complete install instructions in the README ,- [x] Write up Windows instructions. - [x] Write up homebrew instructions. - [x] Touch up various links. - [x] Fix internal links (see https://raw.githubusercontent.com/akshatpradhan/information-security-policy/policy_v1/README.md). - [x] Write up Ubuntu instructions. - [x] Write up UNIX instructions. - [x] Play with code blocks. - [x] Play with borders (`---`). - [x] Clean up external links (`[forum]`). - [x] Figure out `lib/`  `x86_64-linux-gnu`  (DY)LD_LIBRARY_PATH issue. - [x] Should we include instructions about SimTK_INSTALL_DIR? - [x] Homebrew seems not to be working on @apoorvar's Mac. 
simbody/simbody,176,2014-06-26T06:18:48Z,2014-06-26T22:44:45Z,True,2014-06-26T22:44:45Z,2c47a412b3a4caf8db90ca9c803ac0b370c82b6e,6,3,8d2eda8c23f580c92e770f98bdae6d9ea9e6427c e253d00a5f9d321db98914de88619170d0a59660 56eb214ff822ad0ca6b501f4e0bc646e5c295dcd,,Add STL reader for Simbody s PolygonalMesh class,Fixes #57. - Can now read ascii and binary STL mesh files (can force ascii with .stla suffix). Catches and reports most file format problems. - Supports some STL extensions for Gazebo compatibility (comment lines  "color" keyword ignored). - Added a new adhoc test LookAtPolygonalMesh that reads mesh files and tries to make contact geometry out of them (very fussy). If it fails it will try to explain why. - Added PolygonalMesh::loadFile() method that examines the file extension to determine what format to try. - Added PolygonalMesh::loadObjFile() signature that takes a path name (previousl required an open stream). 
simbody/simbody,124,2014-02-22T11:37:51Z,2014-02-22T22:03:38Z,True,2014-02-22T22:03:38Z,8dbede278078dcbd2734b1fbda842b9b32da6a9d,1,1,7d32cb98f0f2ed8a1dc4cfc398d20bf5e58a708f,,Overloaded geometric step length calculations to handle 3D vectors ,Overloaded calcSlidingStepLengthToOrigin() and calcSlidingStepLengthToMaxChange() to handle 3D vectors  as requested by Sherm. Both methods are simple analogues of their 2D counterparts  though the latter contains an optimized computation sequence generated in Maple. Verified both methods against a handful of Maple test cases. 
simbody/simbody,180,2014-07-02T01:49:39Z,2014-07-02T23:46:44Z,True,2014-07-02T23:46:44Z,a9a806731edc3194c61ca609351b256aeb4531cf,1,2,d6a374f987884c8ad791a42c1bb8ccd695704fdc ae0b37b72a67ac13046a474cba7a50f7b02162be,,Edited CMakeLists txt to support C 11 in XCode,Set some CMake flags to allow simbody to compile w/c++11 using Xcode. Works using OSX10.8 
simbody/simbody,84,2013-12-12T23:23:00Z,2013-12-12T23:24:23Z,True,2013-12-12T23:24:23Z,ead72b7df2b206c3b0be609bb1ecc2b8a8040be4,2,1,efccdf5a63c660bf7c5bff1f5c1e81f323830c90,,Remove the old SimTKlapack library for Win32 it is no longer needed ,SimTKlapack has been replaced by liblapack and libblas. This is the same as for Win64 now. 
simbody/simbody,182,2014-07-05T01:17:11Z,2014-07-05T01:36:00Z,True,2014-07-05T01:36:00Z,b20dfe3b0b04624f70315c378e66ea9b1b4ba61b,1,1,5ec287cf65ad82c738af215e5fbb551371f7c239,,Fix typos in Windows install instructions ,
simbody/simbody,170,2014-06-19T16:49:26Z,2014-06-19T17:08:54Z,True,2014-06-19T17:08:54Z,93532c28252be2c734d4a35cc626abc5a106be57,1,1,6f732f64fc3ff6705248febb031e4b642a4e0321,,Print test output upon failure ,One-line change to .travis.yml. 
simbody/simbody,166,2014-06-14T23:06:48Z,2014-06-16T15:38:50Z,True,2014-06-16T15:38:50Z,40c50fba56f9ff7d83515194d365ada4af5da76d,2,6,ed2dd360d8329fed8d5d0d27a02bc68b6493bc6a 3b2eb98f4c2e6463aa4ae4066b43017c7d4483c0 144c35c8de33c19946b3576acd926210e9059a69 f1e00779eb7d65ff1f02dbd2eaf305e9f052ae92 7cd323b07f5970412b612d99b8bb62e229517a8f 450db53a9aa57f49d4a4b6d61f564d8ce554dc7c,,Travis and cpp11 updates,1. Cleaned up travis file; now building 8 times: c++11 on/off  build/release  and gcc/clang. 2. clang c++11 now passes on travis  b/c I'm using an up-to-date libstdc++. 3. On OSX  if using clang and c++11  we use the libc++ standard library instead. Tested on a mac and all tests pass.  Travis takes 19-20 minutes to run all tests now. Perhaps running tests for debug mode is overkill? I decided to do this because OpenSim's tests were failing in debug even though the tests passed in release. 
simbody/simbody,122,2014-02-16T00:16:55Z,2014-02-17T02:08:03Z,True,2014-02-17T02:08:03Z,6531c081eba724c715d2e15736840d84adc64238,2,3,0573f07c7295305631c13694506fb02fc17dbd28 d03c8f891e1742352d521527926ed615a97839f6 9672611154500034bd47871a63888afe1ae70a42,,Cmake version config,Now  projects that depend on Simbody can use a line like the following:  ``` find_package(Simbody 3.4 REQUIRED) ```  See my toy project https://github.com/chrisdembia/sample-simbody-client/blob/master/CMakeLists.txt  A requested version is compatible with the installed Simbody version if they have the same major and minor version  and the requested patch version is less than or equal to the installed version's patch version.  If  instead  we want instead for compatible versions to be those that have the same major version   and the requested minor version is less than or equal tot he installed version's minor version  that is easy to do. Just let me know.  Here's something from CMake's documentation:  ```   if(version1 VERSION_LESS version2)   if(version1 VERSION_EQUAL version2)   if(version1 VERSION_GREATER version2) # Component-wise integer version number comparison (version format is major[.minor[.patch[.tweak]]]). ``` 
simbody/simbody,152,2014-05-20T16:36:11Z,2014-05-20T18:03:51Z,True,2014-05-20T18:03:51Z,26133094b8a4e122b4bf4c208def85af9c99cd15,1,1,7d8526c9c92fdc6faee4b4693270e3d9e7aac25a,,Incorporate some content from old instructions ,See #50. After this is accepted  I think the following can be deleted: - installation section of Simbody/doc/SimbodyAndMolModelUserGuide.pdf - doc/HowToBuild* - doc/INSTALL.txt 
simbody/simbody,191,2014-07-14T01:27:42Z,2014-07-14T01:33:18Z,True,2014-07-14T01:33:18Z,f74f324bba06e40297df6c15fb1d55543fbb76b8,1,1,d784d6445f6ae5e3ebb1998347658139ec6dd1ff,,Fix UNIX bash path setting commands ,See discussion in issue #50. 
simbody/simbody,190,2014-07-13T19:13:35Z,2014-07-13T22:46:05Z,True,2014-07-13T22:46:05Z,e1b6f8858dd057e9f9abdfd810a6f18536aa2280,4,1,55501e23adc4abfeb7e98fa8efa24dca3f87a2f5,,Remove old build install instructions Did not edit user guide ,See #50  in which someone tried to use old build/install instructions.  We still need to remove old instructions from the user guide  but I don't feel confident doing that. 
simbody/simbody,193,2014-07-15T03:27:15Z,2014-07-15T16:28:40Z,True,2014-07-15T16:28:40Z,e2b969249fa699633a960208f3998773325557fd,1,1,0edf3cf11d00253d7c23927dd5de9b5591575488,,Remove a type aliasing cast that was causing warnings in gcc clang ,This should get rid of the NTraits warning that @chrisdembia saw when compiling with `-Wall`.  See discussion in PR #192. 
simbody/simbody,192,2014-07-14T06:57:38Z,2014-07-15T02:36:11Z,True,2014-07-15T02:36:11Z,11648802770ec76f7c96e726d5dd5e61ebfd75a1,15,15,e192731f9141e4834ad31e3bdc22e01cf0f802c2 d8d8b2a3ad0038d6c2beff21726b7259d113186e 2deb1a1e1ef6273f2487f3903409fd17d333923c 5dac158981e987ce111fe40678dbe0e0b37d6f20 298491f7db91ee21134b6700d678e1e94f2c731e 7278c748462ef6cdd9af1047be351af1cd38e8b2 b29bcb4898f58bad5217b1361a6332114ba77955 7bbe1fff95dc6e62cae29b7e3f26b3b2efb0fd0b da13e69b27affde9cf671682f2a8c6ec4d34dfec b2d1fd4b10c965994807cd57601901f544bfe6ea 4eb0cb89dfce1f783474f555309e9534796cc955 d62e6df1fccea1ff914a9556b0e056c965f35d26 8babaf5af8dd34b5a107e455cd4ffd188e86e36f 726626c0cf8e83d103377f2eb9b6bff701cae05e b19e2d33272e86e82786cf759ab98c82f1df9082,,Fix most warnings generated from Wmost for SimTKcommon ,Addresses #181.  See travis output for the remaining warnings. So far  I only addressed warnings from SimTKcommon. SimTKcommon still has two warnings  but I don't know what to do with them. 
simbody/simbody,24,2013-08-30T01:30:53Z,2013-08-30T04:14:30Z,True,2013-08-30T04:14:30Z,954f6b3bdd4d2ad5e257404deeacdf1ae061b825,15,18,c0e90ee99b9bf186493480b64afe61c681106db6 57d179665044d0f9e5324a80f131813bbc962a48 39c48e258ffb39eaf49b0e01db779adcdcb4d976 83fbcb146cf708f74290890c6903300d3316bc0b d50f82d4560647d6c80754bc781be589accf86d7 5e2eed8a03d2b4a91fa251f73d1ac3629ac49b58 e73218d58c69773a465bf3ed0a132d08644e5bb3 2e59ca5ebcc1c69688807c4dca0812c8c624b5bb 0ee02ec4d887efedcd35161b8b9812417cb5c9db 182aa3062eee85e7feabeff793be0e25d87c5fd0 3e13e0235a25ec2088004959f3ee38459bbc72ce 4ecd5b8660606829531c23c791472898475a0bd8 a38c4156a810ccfd01c3aa74085345aea4d23547 9060c9755d81a85ff3d850efbd4349ceab62c544 6b9d37b3a1f84ecca1370a035d59899db9b26871 d3329db75f3e387b15be40f84486a3cb984ab84a 5d2b038db313ceb1a50e32cd25dd4ed1541c8176 43c46b9fd0e79f3249a0e3d564bc782ec92870d0,,Support for debian ubuntu package generation metadata ,This pull request will bring support for build debian/ubuntu packages providing the metadata needed in debian/ directory. I tried to be at less intrusive as possible but end making a few changes in the code base. It is prepared to build on quantal but can easily adapted to other distributions.  Details: - Implement soname in libraries: this will generate proper versions of libsimbody (and friends) in the form of libsimbody3.3. This is assuming that ABI will be stable during 3.3. It can be adjusted as needed. - The foillowing packages will be generated:   - libsimbody3.3: libraries  (stripped versions)   - libsimbody3.3-dbg: debug symbols for libraries   - libsimbody-dev: headers  cmake finder and symlink to libraries   - libsimbody-doc: pdfs and api html  In the copyright file I've included all I've found  but some authors/licenses could be missing. 
simbody/simbody,196,2014-07-16T05:23:37Z,2014-07-17T03:25:25Z,True,2014-07-17T03:25:25Z,47781182ff51fea75db07b1c4a71b3a82d0beeda,1,1,1d46149aaebe5a332a639259dfc5386760873997,,INSTALL txt deleted from repo update debian ,@j-rivero  please check. 
simbody/simbody,199,2014-07-18T00:10:23Z,2014-07-18T04:17:49Z,True,2014-07-18T04:17:49Z,be750d99f01ce61c2709ee931679fea3c33e24cd,2,1,6c681674ab65c21e0a6f8a6cd23bb6e2714d327d,,Fix bug in mesh triangulation reported by Alexandra Zobova ,This applies to meshes containing a face that has 5 or more edges. There were identical bugs in TriangleMesh for contact and in the code that prepares a mesh to be passed to the visualizer.  Fixes #198. 
simbody/simbody,194,2014-07-15T18:25:30Z,2014-07-15T19:21:23Z,True,2014-07-15T19:21:23Z,b1b446ad168c82e9cd006ce920ba01e01674689a,1,2,03bd33dec536b68dfa085792f196d8fa9911e3ee 4e8755d0577a4f4e4197296a8a453947e8fababe,,Add osx to travis ,Not ready yet. Need to make the PR to see if the osx tests get triggered. 
simbody/simbody,200,2014-07-18T16:39:30Z,2014-07-18T17:08:04Z,True,2014-07-18T17:08:04Z,4bf2e164950bc5398b06755926862fe4243f7f21,1,1,dba6b7349788451338e18633352877ce82e0fe3a,, travis CMake not needed on OSX,See #194 
simbody/simbody,197,2014-07-16T08:26:26Z,2014-07-22T03:49:44Z,True,2014-07-22T03:49:44Z,e3d0f1e83d3da1d2596d1e85688d6fc46a079f27,14,4,1a781f4a8de09681c82c63a3021b2af4c2ef1f51 f056ed691f9034b74ac0c8c41537b1e6024a3720 ef5ec8931e4e06f11a89c66998b6624a8e7db3da 9f239888ba2aa06b574d690e77ec54929bccca1b,,Change CMake for debug builds on UNIX and Xcode ,1. Use CMAKE_DEBUG_POSTFIX for all platforms  not just windows. 2. On UNIX  do not name targets differently if building debug. 3. Remove unnecessary debug/optimized qualification in    TARGET_LINK_LIBRARIES for SimTKmath and SimTKcommon. This is perhaps    controversial. Since for a given configuration  there is only one    corresponding target  we needn't specify separate debug/optimized    libraries: there is only one to choose from. Of course  a project    _using_ Simbody will need to specify separate debug/optimized libraries    when linking (and the SimbodyConfig file does this). I actually want to    hear what others have to say about this... 4. Visualizer is named as simbody-visualizer_d if in a debug build. 5. Replace instances of _d with CMAKE_DEBUG_POSTFIX  except in    Simbody/examples/InstalledCMakeLists.txt. This is in case we want to    change the postfix  we only need to change it in roughly one place. See    cmake/SimbodyConfig.cmake.in; I verified that this change works (on    Ubuntu). 6. Previously: if on UNIX  CMAKE_BUILD_TYPE would be set to Release by    default (unless it was already set). Now  I'm doing this default setting    if not using MSVC and not using Xcode. MSVC and Xcode are the instances    where CMAKE_BUILD_TYPE is not used.  Notes: - On all platforms  Debug static libraries are named as   SimTK(common|math|simbody)static_d  as they previously were. - The CMake cache variables like SimTKCOMMON_LIBRARY_NAME are incorrect    as they do not account for if we're building as debug or not. They   weren't correct previously either. All they account for is the   namespace. (not static  debug  or VN). Is this misleading?  Addresses #5 and #195. 
simbody/simbody,75,2013-12-05T02:41:27Z,2013-12-05T04:51:12Z,False,none,821fff6a44c331c66ee22f1d2ddc05b1bd20842a,1,28,059bca7ee65d06e38076ce45b352340990eff1cd 429b0051bd3c4797ccba3e116192320dff7a5f7e 1437a128f4fa9752631e57e763e80544a995165b 10ba1dafcf3cde6ec10306ae7224eb0b85897119 1af492dea270b0f14cf996f75cb46ba78b1e699c bab73363b544c17d103bc4bc73b3167cf0b52e27 b8b5257036066bb0126634498273b440bc844dff 70d6a413c176e6e0719bf30ceb599c4ec311c943 3d427d8e8103d2e29df0bd9c4f1976bd62f2f825 b4242d26d23f6d6cdeacf6af46fb5e4d83389dae b14fc6087025487807cdff7da8daa7ab885e95ac 30a8cf1f797418b4cf37e3e876e894458686dcaf 0cc022d3b6a2aa2d605647e639ba54546e928072 58c6e5304365e9492864db85d4ce1a3a2401c244 6ad016068b4e364ecc1f921c2180e3a20a124e37 71622a33733a6c3d586c6791566b4e76ffa1da6d 4ae37469a025614c896ef21a6e35f0b5117e5d59 3a1f3bc769450cf1d9896bdc56b07ff879b5f969 7367e7a2574fb214496daef3586d89eb3c04d935 d8605f26e3267ff9a12af523062b6aea720ec4c7 f04fd692816fcca1470173cc16d2e104bd172435 2b27ff6b0bc5ade2d7d5261013171c9eb4f9d45a af4cd95d4b14d385b98d64774768336ca1ff9b57 d639653868aa9f4d4b58f331a3120b7aa49afb36 81e6b9ed56867aa1b7ef5d0374b96547f502e28f 24c5489a3626a7ba864896fb78c909c54af4bfa1 7599184e2890c85b52719f4a6ec7e9aee87641df 14de7cb461902c048941143cb4ec899444252cef,,Doxygen for vectors and matrices,Small doxygen fix. 
simbody/simbody,202,2014-07-23T19:04:18Z,2014-07-23T20:32:22Z,True,2014-07-23T20:32:22Z,09b9d69e15b6d28fc229d8f1c8f5e8815398006b,3,1,436cc8564de0d3dc43da2a9543e35ce112fbc196,,SimbodyConfig cmake says where SimbodyDoxygenTagfile is ,This will be useful for resolving https://github.com/opensim-org/opensim-core/issues#122 in a cross-platform way. 
simbody/simbody,203,2014-07-23T23:49:38Z,2014-07-24T15:45:53Z,True,2014-07-24T15:45:53Z,f4e5df779a959ed41c6b94b511dd33c57090f57b,3,1,ce69077f57d0bbd659449b37ad020321dba90067,,Need more info in SimbodyConfig cmake for tagfile ,This commit contains changes necessary to get OpenSim's doxygen hooked up with Simbody's. 
simbody/simbody,204,2014-07-24T16:31:50Z,2014-07-24T17:04:35Z,True,2014-07-24T17:04:35Z,b4b124ea395167ecc36cce578246be5e19f1d194,1,1,488c2620d39455025694091ee6f7081cb6aa90d1,,Update CMakeLists txt,Simply fixed some typo's and fixed spacing and commenting as well as to be more consistent. 
simbody/simbody,207,2014-07-27T21:59:44Z,2014-07-27T22:47:44Z,True,2014-07-27T22:47:44Z,39796f735dfd370a9b3471f6c697f95c11cfd41b,2,1,403ef7524cfaff13c9f8e39e212030ec058b74d3,,Make Visualizer setMode return a self reference ,Fixes #206. 
simbody/simbody,209,2014-07-29T00:38:10Z,2014-07-30T03:17:12Z,True,2014-07-30T03:17:12Z,1a3fd2ac4f0c11669eef93003e230f0735878488,3,3,869c77dba4c44aa0c50fc2d18ed24b95448b45b0 f8d80d5bd3778b550fdf2f80ea098be13857df3f 217816a3a6c6d53ab71c2bd4d022ad9228b7f2f6,,Implement virtual OptimizerRep getAlgorithm ,Previously  optimizers were required to define getAlgorithm(). However  if a user defines their own optimizer (e.g.  CMA)  they are unable to modify the OptimizerAlgorithm enum  and thus are not equipped to override getAlgorithm(). Thus  we must provide a definition for this method. 
simbody/simbody,215,2014-08-05T00:18:51Z,2014-08-05T00:59:43Z,True,2014-08-05T00:59:43Z,e29f90bec99068bea1b55753e66c706c6a183d56,5,2,b31898f2cefbb0bb64e5f848e0d39e1ba2a5ad9a 1f33e223f633f27d04367fc3e77d8f6bec925013,,Make non camera facing text orient properly with respect to the model ,The transform was not being passed from Simbody to the visualizer for DecorativeText. I updated the VisualizerProtocol to do so (it is now protocol version 33 and is not compatible with 32 or earlier).  Fixes #214. 
simbody/simbody,218,2014-08-08T05:09:28Z,2014-08-08T15:43:53Z,True,2014-08-08T15:43:53Z,788710fe5efaed0ffdca224a4f12d7400507cb37,17,2,44a14fa9420343bd6a3d200f5ed149978e7d0ed7 84d2f327f644bee7a47825163b7bd99bdfd71447,,Add Brick shape for ContactGeometry,This is a first installment in proper geometry handling for convex meshes that can be used with either compliant or rigid contact.  - Added convex mesh features to Geo::Box. - Added penalty force generator for Brick-HalfSpace Contact. - Added adhoc test ContactBrickTest showing mesh topology and displaying generated forces & force details. - Misc. contact cleanup. 
simbody/simbody,222,2014-08-09T15:59:06Z,2014-08-12T05:12:12Z,True,2014-08-12T05:12:12Z,f27ff04c710b044c9c4ee50083bb53c4d7535eb7,1,1,47a9d72f4f267e24c66a5431959882e5142a084a,, readme SIMBODY_STANDARD_11 is on by default ,I thought it was off by default but I'm wrong; it's on by default. Also  could @scpeters and @j-rivero verify that the homebrew and debian packages have SIMBODY_STANDARD_11 _on_? How does this affect gazebo users  particularly if they use one of these package managers? 
simbody/simbody,224,2014-08-12T20:25:07Z,2014-08-12T21:53:37Z,True,2014-08-12T21:53:37Z,cb1ed96efc103954e833e43e87f2db08d0090441,1,1,2fde8a89d3d48d3f1a8bcfeb8fc7411708c2ca46,,Filled in missing calcContactPatch functionality for HertzCircular Elliptical contact details ,Simbody compliant contact normally calculates only the resultant force and other info needed to advance the simulation. On request  you can also get detailed "patch" information (sometimes called the "contact manifold")  consisting of both the resultant and one or more contact "elements"  like triangles in an elastic foundation mesh.  For Hertz contact there is only a single detail element  but that wasn't being filled in. Some of that info is useful  particularly the sliding velocity. I copied over the code from the new brick contact element which did fill in that info  so now you can ask for the contact patch for Hertz contacts and display the result.  Peak pressure and patch area are still not being filled in. 
simbody/simbody,91,2013-12-18T01:20:28Z,2013-12-20T19:22:09Z,True,2013-12-20T19:22:09Z,675c05bc0c023a92da4c17f95ad6b76fdeb1a411,5,5,7d21342c79d599d72d3ef4619aca905820fbd3d0 1348aae6e601f8895e970e139e9498fffee2e04c 16502f4f0fef961bf288442cc1c63d672f416642 9355e871634bd8a857890d3f5d0488ae55de2938 78cd0ef8645195c15aa426067d9c3983f81d5072,,Fix 65 Provide cmake config file,I've created a cmake config file that will be populated at build time with the installed location of include folders and libraries. I also restored the FindSimbody cmake module.  This fixes #65. 
simbody/simbody,123,2014-02-16T03:46:30Z,2014-02-17T01:57:21Z,True,2014-02-17T01:57:21Z,712b94f9ea56c7ff738a1aee101194d12d478f27,8,16,3d9dd8e811da328ed6f8e501d9e37c51869a1a14 8494c7cf79e646a13d59efefb5c1fc410d63cecd 87f126b3d37200603a5839f8696d5ca753c98ec2 e03aa744f846c577ca770a137045231253d72f8c 63e2baef2ab4bdd1d6d0a966c5ca6485f2aedc2c 90b358c8d80fe586fc9f797173c90a205883b0da a0ba8041d712106597eff643e9eb7b45d7dfd0f8 3cf78b232cc242b81b8b961e398e59412c58a1ab 9330d7fb0c435f211a1e7ff3621acffea80d39bf 8a951acfaef87abdcf9dbec7a2c9705d8587da4f 83b03e1653384a5c3ada36254096cf1ba591411a 6f37c60392d1037f7fbf4034346cce0ee195b34a eeed4912542873126033d9fee9f570f2ae24fbe0 92081684653414f5182bf09f0d9c40cffa90aa08 5656d28aa3a07530b0cff9191ef862837ae4865b 4537b6cb732e89a8fe94a3d067121b1eb71802d3,,Be compatible with c 11 standard ,- Modified the source code so that gcc 4.8.1 and clang 3.2 would compile the source code with `-std=c++11` enabled. While the changes seem minor  please review them to make sure I didn't mess anything up. - Modify travis testing to build both without the c++11 flag and WITH the flag. So now  travis is building 4 times. This required installing gcc-4.8 in travis. (EDIT: see below). - Travis testing now uses the '-j8' flag for `make` and `ctest`  though I am not positive it is having an effect. (EDIT: yes it is having an effect). - Create CMake flag to optionally use the c++11 flag (`SIMBODY_STANDARD_11`). Right now  it defaults to OFF. This is because Gazebo would rather not use c++11 for now  and while OpenSim requires the c++11 flag  OpenSim trunk isn't currently used by too many people. Eventually  the default setting should change to ON. ## Testing  The following setups all pass with and without `-std=c++11`: - Ubuntu 13.10  gcc 4.8.1 - Ubuntu 13.10  clang 3.2 - OS X 10.9  Clang 5.0.0 - Travis (Ubuntu 12.10)  gcc 4.8  Other setups: - Travis (Ubuntu 12.10)  clang 3.3 -- ONLY without `-std=c++11` - Windows  VS2013 (c++11 flag not relevant) tests pass  The only setup that does not pass is travis (Ubuntu 12.10) clang 3.3 -std=c++11. I thought maybe it was because travis was using a different version of clang than I was using locally. But that is NOT the issue. Locally  I tried using clang 3.3  and all tests passed. Therefore  I am disabling the travis clang -std=c++11 build for now. I do not know why this build isn't passing tests (two tests)  and I don't really have a way of exploring why the tests are failing.  The only thing left to do is: - [ ] Finish getting travis to NOT build with `-std=c++11` and clang. 
simbody/simbody,230,2014-08-15T07:10:44Z,2014-08-15T15:22:58Z,True,2014-08-15T15:22:58Z,1b720d42ca383579e1fa8fd069398d3465ea7219,1,1,b9cb703ec27a55ceb75efa28af00876433223183,,Animation in README md freezes in Firefox,Existing double-pendulum animation freezes after ~1 second when viewed in Firefox v31.0. Regenerated the .gif using different software; tested in Firefox  Chrome  and IE. 
simbody/simbody,231,2014-08-26T20:58:33Z,2014-08-27T04:25:22Z,True,2014-08-27T04:25:22Z,42923b283104145dfef653e737ce8f4b69ce3d7e,3,4,cab3f565034811dab1e528190b246dfc0dee96af d01ca3f89143ede326acd88985d401105d5b62d1 532ae28d605f9ada5c1e441d138f2206aa3cf3c8 97baa123c59f2b1a2b2a699df17b4da64d59fc16,,Add method for principal curvatures and directions at point on arbitrary implicit surface,Simbody's ContactGeometry class already had a method for calculating principal curvature and directions for parametric surfaces  but we needed one for Daniel Lopes' superellipsoids which are implicit. With some help from @stavness  this adds a new method `calcSurfacePrincipalCurvatures()` which uses only the implicit function and its derivatives. Only lightly tested but seems to work correctly on the implicit form of ellipsoids and bicubic surfaces. 
simbody/simbody,235,2014-09-08T21:14:55Z,2014-09-08T21:34:38Z,True,2014-09-08T21:34:38Z,a895e58c71bc63e7930d9c31eff0bec6713f7072,1,1,f4b464a33b2378e6e2fb8fcfabdb7d2d464995b3,,Restore xml declaration line at the top of Xml files,restore declaration line in xml 
simbody/simbody,233,2014-08-29T20:08:33Z,2014-08-29T20:30:58Z,True,2014-08-29T20:30:58Z,d61215c2c2d18acf25db9971ffa3daa7951b7853,3,1,e8491e62cfbd0c7ba51909f01d6c5208dc731df6,,Add HalfSpace ConvexImplicitSurface tracker,For contact  adds a ContactTracker for a generic convex  smooth  implicit surface hitting a half-space. Resolves #232. 
simbody/simbody,223,2014-08-12T01:41:50Z,2014-09-10T18:12:22Z,True,2014-09-10T18:12:22Z,ebcb7dce3f299ba9828f6187f134271be2ef8041,3,9,4988ab238606ceea2de038080edc17eee38cd61d 962cbc94ad614c1a0f912eda3cd612db3adf5690 92e3cde39e72ed6090e0148e4fc1a7f8d50cc231 ae5beb93b1db73e8b8d85f9ed5a77d588814e06d 9ca5af0fc862e57d53d2bffd72c5eab5484ec656 771f9b701718a802664e4aec9f852d7c5f14c954 a500451cbf9529858da19b9dbe138f9339a67f21 93ac792a3f9f4ed4c74e472c9258f5e68c434485 75b46da3ea4627f1e34fec0071987dc3a971aa2b,,Use gcc clang demangler for NiceTypeName ,@sherm1   as a follow-up to our name mangling conversation  I found a way to demangle right in NiceTypeName.  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/ext_demangling.html  https://gcc.gnu.org/onlinedocs/libstdc++/libstdc++-html-USERS-4.3/a01696.html  I don't assume you want to accept this PR. I don't know how portable this is  but I think GCC and Clang support it (idk which versions). I tested it on my computer and it worked (I actually tested it with OpenSim).  If you like this  I can write a test if you'd like. Also  There is still an issue: this leaks memory (`__cxa_demangle` allocates memory; see the last sentence of the first link above). I'm not sure how to prevent that... 
simbody/simbody,236,2014-09-11T00:05:34Z,2014-09-11T04:12:59Z,True,2014-09-11T04:12:59Z,302b8182988bc866e4f8e5c8f86d05252cd6fa52,5,1,79f9ad9639f2ba028c91495bd40514ac9c0593c9,,Make use of Chris Dembia s new NiceTypeName namestr method,Simbody used `SimTK::NiceTypeName::name()` for some error messages  but those type names come out mangled on some compilers. @chrisdembia added a `namestr()` method in PR #223 that returns demangled names on all platforms.  This PR makes some minor Simbody changes to exploit the availability of the new method. I also expanded some comments and made one probably-unnecessary code safety change to `demangle()`. 
simbody/simbody,210,2014-07-29T17:16:30Z,2014-09-12T05:48:38Z,False,none,9a37da26637ca6c82d80130ef197669bc3e25cb1,7,30,5de5a30a9153e7b79d12fa50ed0c7d83bb0a3cff a4fe7501c7d8e8536a90be170c4c625e1ace1992 6743cffa0fbb89fdc204debbda0a964a56fb23f4 087fcdfdf2300d2b64d21a5926daf0b0b14bc1be 9053fbd6b58acd2d628988b142c347eddea99a1a 187b8ad8ba208dcdd8b5535e0c86b9fd7d9b6804 9448a24eae5780155a992bd409721b27cc3191a2 c08d1791f9b3fd08b922ec5b7f17984e1baf6a6d 6d407fe5ab16719c8d3af15804dfe1082c0eec1e 2cefb768522b21d198fc6398f8672bddb36f423e 59321586c1d8a981dc07123ecfd386d4ec85fc58 4ccad7c673c9272e7e4145a9616c58a580e32705 9562ccdc5f0ad160fdff6a7593acd2e9f4a4ad7b 3a1d3b03ea55d18425f3a6f1943be364e93f8f62 c559616bffdc04da539568479c6bc95e325b8889 6c68303d8fd70a5ebcc98a1968c8e224c0f4657e 78e58a195ec14b32ca51420df22c748d25e50c7a 0902665043969ffd45f7ee8f1594251d9c2d1eb9 5ce1155377bff79919b83fd7fd7c59588c8222ad 3095a23180140e5003953b25cb65ab60ba5eb37d 09228685d922ca1221d2d8dea4a7947762c72bc2 94275f0dec40ff5932043c33b2300fe97e300fb9 d438899d31e8a3917942e927e97d855d990d19d6 31f4371534f05af639222edaffafdf09ca9ed0d4 b5c1d84eb80f38e3014fc324e2aa5b85e124108a 8ee9e0ba3e4d58039159332914e36334b2030c05 b5e6ebca5b858f5d4fb0dadb44b0c69b27327f39 6202533301fe57e8edcb3a49a4419a04baebf472 1dcb021f9d65109e750fd6b1138776ae8e25b7dc b7f0687e2d6213a1a8e2a95ecf4d04bf491a0367,, WIP Operational space ex,The start of an example of operational space control in Simbody. @hsu @scpeters @tkuchida @sohapouya could chime in too. I've added those 4 people and @sherm1 as collaborators on my fork; feel free to directly add commits to this branch.   Right now  there's a reaching task with gravity compensation in its nullspace. I have coded it up inefficiently and in one method. However  I have spent time trying to do the same calculations efficiently; look at all the commented-out code.  Possible things to do: - [x] Add methods/operators to Simbody to calculate things like the task space mass matrix  or the dynamically consistent jacobian inverse. - ~~[ ] Add a Force::OperationalSpace to Simbody that has an interface to build up an op-space controller for those who don't want to have to type out the calculations themselves.~~ - [x] Add documentation in the example  referring people to resources about operational space control. - ~~[ ] Use an internal model to compute the controls.~~ - ~~[ ] Add noise to model sensing of the state of the "actual" model.~~ - ~~[ ] Model the actuation: model torque sensing and control.~~ - [x] Display goemetry at the target point. - [x] Mouse or keyboard input to move around the target point. - [x] use Simbody.h instead of SimTKsimbody.h - [x] InertialForces should depend on Velocity stage. - [ ] Optimize. - [ ] Write test cases (using an RRR robot?). - [ ] Why does the simulation freeze when the target goes out of reach of the humanoid?  I'm hoping this PR can be a place for discussing exactly what we want this example to be  what new methods we want in Simbody  and what we are doing for the September deadline.  This code is somewhat derived from stuff Gerald Brantner did for ME 485 last Spring. 
simbody/simbody,237,2014-09-12T05:51:00Z,2014-09-12T15:34:17Z,True,2014-09-12T15:34:17Z,8c0a42a5ae87dfda8686536db92c4eb40fd9be87,7,30,5de5a30a9153e7b79d12fa50ed0c7d83bb0a3cff a4fe7501c7d8e8536a90be170c4c625e1ace1992 6743cffa0fbb89fdc204debbda0a964a56fb23f4 087fcdfdf2300d2b64d21a5926daf0b0b14bc1be 9053fbd6b58acd2d628988b142c347eddea99a1a 187b8ad8ba208dcdd8b5535e0c86b9fd7d9b6804 9448a24eae5780155a992bd409721b27cc3191a2 c08d1791f9b3fd08b922ec5b7f17984e1baf6a6d 6d407fe5ab16719c8d3af15804dfe1082c0eec1e 2cefb768522b21d198fc6398f8672bddb36f423e 59321586c1d8a981dc07123ecfd386d4ec85fc58 4ccad7c673c9272e7e4145a9616c58a580e32705 9562ccdc5f0ad160fdff6a7593acd2e9f4a4ad7b 3a1d3b03ea55d18425f3a6f1943be364e93f8f62 c559616bffdc04da539568479c6bc95e325b8889 6c68303d8fd70a5ebcc98a1968c8e224c0f4657e 78e58a195ec14b32ca51420df22c748d25e50c7a 0902665043969ffd45f7ee8f1594251d9c2d1eb9 5ce1155377bff79919b83fd7fd7c59588c8222ad 3095a23180140e5003953b25cb65ab60ba5eb37d 09228685d922ca1221d2d8dea4a7947762c72bc2 94275f0dec40ff5932043c33b2300fe97e300fb9 d438899d31e8a3917942e927e97d855d990d19d6 31f4371534f05af639222edaffafdf09ca9ed0d4 b5c1d84eb80f38e3014fc324e2aa5b85e124108a 8ee9e0ba3e4d58039159332914e36334b2030c05 b5e6ebca5b858f5d4fb0dadb44b0c69b27327f39 6202533301fe57e8edcb3a49a4419a04baebf472 1dcb021f9d65109e750fd6b1138776ae8e25b7dc b7f0687e2d6213a1a8e2a95ecf4d04bf491a0367,,Operational space example,This picks up where https://github.com/simbody/simbody/pull/210 left off  so that @sherm1 and I can work on this code together. 
simbody/simbody,240,2014-09-20T09:30:56Z,2014-09-21T19:31:06Z,True,2014-09-21T19:31:06Z,a84cab71694c93b8aaeea8af6ce4058b69113875,2,1,44ad29bd9e486d79eaf130e8896f2c46a9205025,,Use multiplatform copy,
simbody/simbody,239,2014-09-15T04:38:27Z,2014-09-22T19:34:50Z,True,2014-09-22T19:34:50Z,6f3e71a883b1c2314ad3a6f14f4e5b190ed0701e,13,10,54c3c2d39626b32e27f163bdff80dba67d1927e1 f02468a510996581303396bf65b7e407f61f87b2 f54ac13be1f2f0051c0adc49cebbb9b882052ee2 fbf3d5f9bbad6a7f2ee608109e040cc13fbd420d 3b2c8e089b6cbe2379b549c6ca711d44fcb5f4c3 5040d0558f69cd96fa0d7adf31a668530237d936 23430cbbf74610863b05ec7a6fea65f7d94a0819 97cb4e345e0e7ac5d852cd7c843ee923003604f0 9670019e997de6ad75c94794dbafabd8165e1e79 8fb86941858bbcf8345b8ccb90e224541ca2c1a5,,Add orientation sensor IMU as an assembly condition for IK,There is already a Markers assembly condition used in IK for position sensors. This PR adds an analogous assembly condition for orientation sensors  typically IMUs. 
simbody/simbody,241,2014-09-21T21:02:51Z,2014-09-22T23:44:00Z,True,2014-09-22T23:44:00Z,d35a0a56cef365c9b1fc565555d82be00cb8c0d3,4,2,d5d83e8932dac5ae0c06361ce4bd13b689a26425 0730d6ae4b7c922549ed8f84b4292d7f1373b511,,MinGW 64 fixes,When compiling for a windows target  this patch removes the need for embedded dlls & includes when on a non-windows host  for example on linux-mingw  when headers are provides and common libs like lapack can be easily found.  It also fixes a few build issues in the source with mingw-w64-gcc 4.9.1. 
simbody/simbody,243,2014-09-23T06:56:28Z,2014-09-23T16:16:07Z,True,2014-09-23T16:16:07Z,bb900e703aa00c2e5a5531b73c92781ecd4ff9fc,1,1,39ce70ca962213b61379ab3ad7b06b299dd197cc,,No platform files for non native win32 builds,I'm very sorry I removed the PLATFORM_ROOT definition and broke the build  it should not have happened. It is ok now. 
simbody/simbody,244,2014-09-23T17:41:52Z,2014-09-23T17:44:48Z,True,2014-09-23T17:44:48Z,83fdd08c60ba71f32857d6e328f89faf314ae09e,1,1,02887c89805991d7117f6978ecfd9daab131fcc9,,Second try at fixing Windows build still broken after PR 243 ,- The PlatformFiles target had been moved up to where it had a null dependency list causing failure to install needed libraries in the binary directory. 
simbody/simbody,242,2014-09-23T03:58:35Z,2014-09-23T04:01:30Z,True,2014-09-23T04:01:30Z,1955ae93290551a5f1fd562d33359e14322ec95b,1,1,54e9281e6803445200a148e5f16d284bbc2b684e,,Fix Windows build broken by PR 241 ,- Restored now-missing PLATFORM_ROOT variable which was still in use - Removed early return() in case of non-Windows. I want to keep this working for auxiliary files in case we need some later. Since there is no MingW directory  this should do nothing if that is the host system name. 
simbody/simbody,248,2014-10-17T18:07:36Z,2014-10-18T07:41:06Z,True,2014-10-18T07:41:06Z,5ab59faae751e44b5dab1a89b9e49a37faea098d,1,1,6be6a8bb55212022317a656cc5ce67bc33f74a00,,Fix SimTK_VALUECHECK_ALWAYS missing paren ,
simbody/simbody,250,2014-10-21T17:17:18Z,2014-10-21T17:36:51Z,True,2014-10-21T17:36:51Z,62acae974b2f0a184abe766f2ca9dad612fe96ef,1,1,817d07eb6ac1bdc0c03c2af6c2d82a52de1b8fc7,,Adding newline in doxygen,The text "The default values..." was appearing as part of the last bullet in a bulleted list. 
simbody/simbody,252,2014-10-23T06:24:28Z,2014-10-23T17:30:26Z,False,none,37471aae407b24d4e17028e1a4340fa38a1f3a05,6,3,43fc6acdb5b820ea30b68285a61e6c9db560246c a4e51780632b73f1cbf592dbc3e13b83fdd3234b 0dcb93642ac72c838e0b4dcaa022b0ca0d49b4af,,Modify symlinks for example subdirs ,Example subdirs don't need the symlinks  I think. 
simbody/simbody,249,2014-10-18T03:03:36Z,2014-10-24T00:36:12Z,True,2014-10-24T00:36:12Z,71f30d3a179cc751b994d5c965df3b05f97ff832,24,33,c0a286e9f3943c3b7a4d736cc551c03742f05bec c31c22bf1824e77e709c1ab2b20a5a6ba6830482 48824b8c426d7da187ab64f03c7a8af10a4e94f6 29770644d1cfa6531f0feaab88acbc6c54082246 03d8f4f839989dfc09c16890b10b29fb3877c53a ba1f9cc711fe8284c21d84813fc3611650c5cf16 2a8887653b86465fdadd61b5888e282da3d95242 109fe304179baa9f02213095b169ffcfa4efe9bb 91edc7c258f79dfe2f4ff356c5eb060d4eada003 2cb4505e526441cdc2fc3774cc2a945e9b66cb7e 99ae141b04827860765cf373da650b7649f96c95 35db30d3a7d7232b71884fc18c261348b5ab361f 22d3c1e5f30b154fda6635b92e0e66bd92c3417d 27f243d0f6f8b96acdb8cd977aefb33edd63b1f3 dd1446985c2f6d0322b23931b7a146ee839a83d7 face9770343c958ef0c9ad085abe95d167382191 32b109659fb4faba0157e006119e70cc1760f0f1 7073dfc044950b9b81ae31ad6d89f4704929c1c0 a9271ca69c6a9d5d949c1abf5282a2ae31cd917b 9fc066e09e5da60f42256a2c916b4832f3efa7f9 e79c1aa1aeb6a3793a5bd501c491daafa3d53093 22a1b47d0cd2eb47b60d708103de3deb752bcbe6 502ed4af8f38cfc710aaf7ba930118b32e9c1681 f67d0ed53882bb8bb92dcbe39438e807798a819b d4c133e7671a47b4e1c9c166449a1377d5c2e5c3 e5807190a8d5300d268b6628c79e78b58eec6bcf c5f20dc072996bdaf20b73cc9a15a46f78e29645 8c1e2212091b385987ffa9b21c947f1feab1193e 58f4347b0c3a221daa4d12340107410117e464bf 37e34718fe9a8a0f2002a895d006a8ac174d45ea 79b153670f096f5dfa158055a0576489105b711e 9a93fa1af5ed0ee9e396da2019537a131f31d1c8 26533fb895cf99066cda84cd8b3433909e2b6767,,Initial work on integating cmaes ,I started integrating CMAES into Simbody. Right now  everything is in quite a mess.  My objectives with this PR are: - [x] Get basic CMAES functionality going. - [x] Get the existing test cases to work (Rosenbrock  Schwefel  etc.). - [x] cmaes readpara_t settings (e.g.  convergence). - [x] Diagnostics levels and file writing - ~~[ ] Resuming.~~ - [x] Nice documentation about CMAES in Optimizer.h  describing possible settings. - [x] No memory leaks. - [x] Rewrite the test using `SimTK_TEST_` macros. - [x] Replace abs with SimTK::abs. - [x] Incorporate @nikohansen's updates to c-cmaes (cmaes_init_final). - [x] In doxygen  mention that the errcmaes.dat file will be written regardless of the diagnostics level. - ~~[ ] When to throw an exception upon failure?~~  This PR is going into the `cmaes-features` branch. There's much more to come  such as threading. However  to make this work manageable  those additions will come in subsequent PR's (still into the `cmaes-feature` branch). 
simbody/simbody,258,2014-11-03T07:55:55Z,2014-11-03T17:36:15Z,True,2014-11-03T17:36:15Z,9dfed2259751f80c156bb04f07d825fd21e0e019,5,2,8d10047e0246960e20180a053f8973c0571a2e88 50341e0d0ce3ea1c8dd5cb81acdade5a195d8ff7,,Clean up new examples CMake ing,Two changes: - Remove symlinks in example subdirectories. - Correct copying behavior into the build directory (previously  resource files were written to  e.g.  a file named "models"  instead of being written into a models directory).  Surprisingly  the second issue did not hinder the proper functioning of the examples. 
simbody/simbody,256,2014-11-01T18:50:03Z,2014-11-03T18:36:58Z,True,2014-11-03T18:36:58Z,b5593f3c4f83011f7bff16099d175bd2ec301677,2,1,35f748a8c189d61197500c8f00fff2b1044c422e,,Fix SimbodyConfig cmake for math libs ,The SimbodyConfig.cmake used to ignore some settings from the Simbody project regarding library dependencies. Now  SimbodyConfig.cmake pays attention BUILD_USING_NAMESPACE and BUILD_USING_OTHER_LAPACK.  Fixes #255. 
simbody/simbody,262,2014-11-06T06:15:02Z,2014-11-10T21:12:43Z,True,2014-11-10T21:12:43Z,5a1af15cbc9356d7315e7a3d1b9a38249fa555a8,2,2,fb2ebb27b6af3733d64d96d7416905b547c45627 2f121eba9c60466f838ace1fe089772e2216a58a,,Grouped methods in Rotation doxygen and removed unused method ,Fixes #183 
simbody/simbody,161,2014-06-13T00:54:59Z,2014-06-13T05:35:12Z,True,2014-06-13T05:35:12Z,7b0307b580e03edc9b2f14b1a3fa73de19d9e05c,3,4,efe3ce1c51b14099f6418c5b5b0d1ada8c33a26e fa6862400ad722e959dbcfc88329b554cb620968 4f4a33d54980524bbfd25b67b0dd48a0288ff752 0e55f5f67e3fa538d6da90e615f93b6e47339fff,,Improved Simbody s version checking mechanism ,This requires CMake 2.8.6 (only 2.8 was required previously). We use a script to automatically generate a SimbodyConfigVersion.cmake file. Previously  I wrote one myself  but it was likely to be buggy.  This new script enforces the behavior that changes to the major version number are backwards-incompatible  but changes to the minor or patch versions are backwards-compatible.  I tested this on Linux  with OpenSim as a dependent project. 
simbody/simbody,52,2013-10-18T20:02:34Z,2013-10-31T22:09:22Z,True,2013-10-31T22:09:22Z,eec232ef342086c48bb5b1766acb7043e9a4d080,1,2,94ca54926478f458cddb6adc7087646d0e8cf266 e07f8147261ae53907cabb430f55d320562c0178,,Create gitignore and ignore debian output ,Ideally  I think the debian output would not be built in the source tree. But since it IS built in the source tree  it would be nice if it didn't clutter the output of `git status`  or present the risk of accidentally getting tracked. 
simbody/simbody,265,2014-11-14T19:14:37Z,2014-11-16T02:05:21Z,True,2014-11-16T02:05:21Z,c859e58bc876ca16320e435d8ed2defea8f53d3a,1,3,daf81d3bb57107936f9aad2508734f37af53cfac ca0ad170230011a017b2ebab52728c870944b65a 1b5423961dd426ea305eb1433520314c5091a78d,,Switch test and subtest timing to use high precision real time and cpu timers,@chrisdembia  pointed out in PR #253 that Simbody's `Test` class timing counted only CPU time and therefore was no good for checking if multithreading worked properly.  `Test` was using the ancient `std::clock()` timer. I switched it to use Simbody's high precision real time and CPU time functions. This required some formatting changes for the output -- please check if they are reasonable. 
simbody/simbody,226,2014-08-12T22:22:33Z,2014-11-25T23:30:42Z,True,2014-11-25T23:30:42Z,01bb5a9f5c1b31693f19e2e731e5c7a2e3a06ac2,2,27,073a607aefbb93c3a4e85678aaec87a1f4d64c14 4ee75e8e998e75b1059120223cb77da16251b08b 94a05368817e2682bb0195ec9ef67410d20bf911 55006e98ba667d1576d8b7abdf7143d7f8a2d1dc 5379a59155066679fa41e0d722a4c296f6dd0471 0e65465a0b4a452f58b42318170b6f6e0321997d 0504bde4dba9de04fcb9bc836f762d9dcfeeb9f6 3e117f01e343c774b17991b9ce048fb3849a2310 139befe1a5a3bae067a960c67e4b62a5229712b1 ded2a3f97a4ae7fc735c2831d00ee2e8eeaf4ebb 023ad321934c2b46ee39d72591ba34a991808f24 7da796a8389784c8f98bb7450cc5bd21c6720f0b ff478f4b0192345ab226679e30a707ab943d2dc6 70a0ea106da20c568e191eaa33161774238b1ff1 4d8fc2e2ee390653953e66f12baaaf9d8c416584 8bdaa96a23090f61ea7dfa3b416b5c8fb4c5bded 192210a69fcb86309657bd45ab76efbb5e9d8865 c8b1b5040d0ca20f9af42023a3b59fff82742c1c 2d305477cc75fa0d73200bd05e8e1b2cce84345b 99adc316018be33e3e6b0a01eedaab17dc5c81f7 40902e867780dac3df3a5648730b16ce4c2f879d 9f7e7c7714037235386d608a3918bd0566e9666a bfadddfa735e79aef0f1d046cae20c442bfdef26 50b86cd04e6fe2e699f8cd129adadc607a6b5c5d c8fe42c959fbd90564493d086216b17e2b15f2bf 3d4a9bd875d3600b3e3923dbe6d6dd5cb3b1b698 418740c7fca2cde2cdf83485eb64bf3b020566bd,,Enhancements to PLUS and addition of adhoc test case for comparison with compliant contact,Expect considerable further hacking on this. 
simbody/simbody,253,2014-10-24T01:24:10Z,2014-11-25T22:22:12Z,True,2014-11-25T22:22:12Z,d65663092b12039c0bb2d0bbb49ee56602304a39,7,5,f93853c5a02b05f37e952525381d7385009cb6bd 90458b4154b8971adc4825078b75c1d4e6df8a91 4d819a3dfa820b45f92412f407d7e71b33a7cc33 37794f4635c41e8ed325f57c9549c0f8a6c347f7 87daeb987c88f3aa52d6b9efad22ec40b7561210,,Allow multithreaded CMAES ,@sherm1  are you okay with my use of auto_ptr? 
simbody/simbody,267,2014-11-26T10:03:52Z,2014-11-27T03:22:32Z,True,2014-11-27T03:22:32Z,0c0ba7f9a444cc9505c38520de6828a9b845305b,9,7,1befb78404297325b48ccfb88f745dc55c8792d3 1c3ac2969280b8acd581eaef992e7a2a1d175ad3 a4242cdf07c01fa9c6b5e75eedc74a1e519e71b9 abd25e3f3d2475767bf59ccca2c072daf56f5a5b 963c272eaff8dc551092b9c673ed18ac8413d9a8 4517c10f7c8a971bdb8e5c93864276222caea92f 47344916ed12cbd2948bbdf50d0010ba38391e05,,Cmaes prep for 3 5,1. Clean up doxygen. 2. Rename one of the CMAES advanced settings  because I've renamed it in the upcoming cmaes-mpi branch. 3. Incorporate @sherm1 's changes to cmaes to get rid of MSVC warnings. 
simbody/simbody,269,2014-11-27T04:37:12Z,2014-11-27T06:54:55Z,True,2014-11-27T06:54:55Z,9005488728fee26eee7c734cf2d25a19de64496e,2,1,d50cfdcab24f04be3116957287fe052582421f3a,,Support appveyor testing ,
simbody/simbody,268,2014-11-26T23:32:36Z,2014-11-27T07:02:20Z,True,2014-11-27T07:02:20Z,ec3aae1af4984cfcd70f69db6610507af170ae50,24,48,c0a286e9f3943c3b7a4d736cc551c03742f05bec c31c22bf1824e77e709c1ab2b20a5a6ba6830482 48824b8c426d7da187ab64f03c7a8af10a4e94f6 29770644d1cfa6531f0feaab88acbc6c54082246 03d8f4f839989dfc09c16890b10b29fb3877c53a ba1f9cc711fe8284c21d84813fc3611650c5cf16 2a8887653b86465fdadd61b5888e282da3d95242 109fe304179baa9f02213095b169ffcfa4efe9bb 91edc7c258f79dfe2f4ff356c5eb060d4eada003 2cb4505e526441cdc2fc3774cc2a945e9b66cb7e 99ae141b04827860765cf373da650b7649f96c95 35db30d3a7d7232b71884fc18c261348b5ab361f 22d3c1e5f30b154fda6635b92e0e66bd92c3417d 27f243d0f6f8b96acdb8cd977aefb33edd63b1f3 dd1446985c2f6d0322b23931b7a146ee839a83d7 face9770343c958ef0c9ad085abe95d167382191 32b109659fb4faba0157e006119e70cc1760f0f1 7073dfc044950b9b81ae31ad6d89f4704929c1c0 a9271ca69c6a9d5d949c1abf5282a2ae31cd917b 9fc066e09e5da60f42256a2c916b4832f3efa7f9 f93853c5a02b05f37e952525381d7385009cb6bd e79c1aa1aeb6a3793a5bd501c491daafa3d53093 22a1b47d0cd2eb47b60d708103de3deb752bcbe6 502ed4af8f38cfc710aaf7ba930118b32e9c1681 f67d0ed53882bb8bb92dcbe39438e807798a819b d4c133e7671a47b4e1c9c166449a1377d5c2e5c3 e5807190a8d5300d268b6628c79e78b58eec6bcf c5f20dc072996bdaf20b73cc9a15a46f78e29645 8c1e2212091b385987ffa9b21c947f1feab1193e 58f4347b0c3a221daa4d12340107410117e464bf 37e34718fe9a8a0f2002a895d006a8ac174d45ea 79b153670f096f5dfa158055a0576489105b711e 90458b4154b8971adc4825078b75c1d4e6df8a91 9a93fa1af5ed0ee9e396da2019537a131f31d1c8 26533fb895cf99066cda84cd8b3433909e2b6767 387d1e6269ea3b98cb9eb6a06236877172e0ecdc 4d819a3dfa820b45f92412f407d7e71b33a7cc33 37794f4635c41e8ed325f57c9549c0f8a6c347f7 87daeb987c88f3aa52d6b9efad22ec40b7561210 e59a0d5de66d81021b0da2d7f7b50c59d7cf8de5 1befb78404297325b48ccfb88f745dc55c8792d3 1c3ac2969280b8acd581eaef992e7a2a1d175ad3 a4242cdf07c01fa9c6b5e75eedc74a1e519e71b9 abd25e3f3d2475767bf59ccca2c072daf56f5a5b 963c272eaff8dc551092b9c673ed18ac8413d9a8 4517c10f7c8a971bdb8e5c93864276222caea92f 47344916ed12cbd2948bbdf50d0010ba38391e05 16e9c1bc9bdf14ab783253e42f9756f15698c008,,Cmaes feature,Don't merge this until #267 has been merged. 
simbody/simbody,261,2014-11-06T01:58:45Z,2014-11-06T02:29:35Z,True,2014-11-06T02:29:35Z,54635fed187164769efcb0f39fdf742fcc9a5011,3,1,7ae419f937de4e664762a5871f76f1fccd1827f5,,Moved matmul to private,Fixes #213  
simbody/simbody,270,2014-11-27T07:47:53Z,2014-11-27T08:01:22Z,False,none,735f71489b87fdf0e5fe8adf1015063904ee99d2,1,2,deef6c48d1fafef60d18495899a068ee992a7af0 3d244c72e78c64f71f0a731d322b76d507b3e582,,Appveyor status badge in README ,
simbody/simbody,266,2014-11-16T04:24:48Z,2014-11-16T06:28:28Z,True,2014-11-16T06:28:28Z,6d5ca2f848f643e9456445bc9bdae6afdf9e4c4f,1,1,b46e0494f6dc254a4fd5c1a2c396ad05ba670327,,Doxygen typo untouchged untouched,
simbody/simbody,272,2014-11-28T21:34:47Z,2014-11-28T22:35:18Z,True,2014-11-28T22:35:18Z,b508ad2817f8a83d810374b344469fdbccc5b05d,1,2,08fbd26ec23c80238ab93b3a4d426f622d4b7516 8167d25c43aae0af15243799c2add75e58cbf0b8,, doxygen Consistent bolding in list ,My doxygen documentation of CMAES had a small inconsistency. In my list of advanced options  I had bolded some option names  while others were not bolded. Now  all option names are bolded.  Can we get this in before 3.5? 
simbody/simbody,273,2014-11-28T22:45:12Z,2014-11-28T23:06:16Z,True,2014-11-28T23:06:16Z,08329b789b99cf60d704eb815c724a676cda52dc,1,1,545d6add5209c0d1ad389196cc59b7a3ce0750f1,, doxygen Direct users to cmaes default values ,@sherm1 feel free to merge this without waiting for travis  since I've only updated a comment. I don't want to slow you down if you are prepping the 3.5 release. 
simbody/simbody,238,2014-09-12T15:39:13Z,2014-11-04T21:03:31Z,True,2014-11-04T21:03:31Z,123a1e92ce19d303605eac00e9e783174434879a,135,83,5de5a30a9153e7b79d12fa50ed0c7d83bb0a3cff a4fe7501c7d8e8536a90be170c4c625e1ace1992 6743cffa0fbb89fdc204debbda0a964a56fb23f4 087fcdfdf2300d2b64d21a5926daf0b0b14bc1be 9053fbd6b58acd2d628988b142c347eddea99a1a 187b8ad8ba208dcdd8b5535e0c86b9fd7d9b6804 9448a24eae5780155a992bd409721b27cc3191a2 c08d1791f9b3fd08b922ec5b7f17984e1baf6a6d 6d407fe5ab16719c8d3af15804dfe1082c0eec1e 2cefb768522b21d198fc6398f8672bddb36f423e 59321586c1d8a981dc07123ecfd386d4ec85fc58 4ccad7c673c9272e7e4145a9616c58a580e32705 9562ccdc5f0ad160fdff6a7593acd2e9f4a4ad7b 3a1d3b03ea55d18425f3a6f1943be364e93f8f62 c559616bffdc04da539568479c6bc95e325b8889 6c68303d8fd70a5ebcc98a1968c8e224c0f4657e 78e58a195ec14b32ca51420df22c748d25e50c7a 0902665043969ffd45f7ee8f1594251d9c2d1eb9 5ce1155377bff79919b83fd7fd7c59588c8222ad 3095a23180140e5003953b25cb65ab60ba5eb37d 09228685d922ca1221d2d8dea4a7947762c72bc2 94275f0dec40ff5932043c33b2300fe97e300fb9 d438899d31e8a3917942e927e97d855d990d19d6 31f4371534f05af639222edaffafdf09ca9ed0d4 b5c1d84eb80f38e3014fc324e2aa5b85e124108a 8ee9e0ba3e4d58039159332914e36334b2030c05 b5e6ebca5b858f5d4fb0dadb44b0c69b27327f39 6202533301fe57e8edcb3a49a4419a04baebf472 1dcb021f9d65109e750fd6b1138776ae8e25b7dc b7f0687e2d6213a1a8e2a95ecf4d04bf491a0367 9bbe05d73cb3a33a6203ab62474fc1b08c05fbc9 ac115356f8a5e29652bcbfc24f1d0f43b4bab9f1 85cfc134578745303d65baa000a2782b75492229 f8304a4fa59d1d77667190155bb93181281bcf90 a9d3a20ce96ffd498e94541b4d55a21b83a06601 72dff3023a83120f9f1d42937342e5fbcd6a52c9 90e569ef38add9ec0f9df8d44826a0ee10ae02c2 14ba133efaca39418ea67859816b134f4acec743 4e744ee2bdfca66cb4e1afb7fc62fb169268cc9b efe254aa5f04f52f7eb8ac405377b8de6c2a1ede a73ff98a897ff03f4cf1f039ce9c80297926de29 9aa459f8f1961d12b98ece4bfdb489518fe43a71 296ad44507b183bc25e16fd5b641d36b39ecc73d 50f902c54538a21ecbe658b867e11db65349cdbc e4e300d87632fb9d23dea76040ad6362e5540406 76bdec117195e06dc0b3dd213fdf32dbbf231f74 6bc7165970eace60633affef0a6470433c877ad1 69a53e75b11db0097920cbea19a3b1f7d789b64c ae900b8894958353bd4e1bdbcebcf37e77e3cd6f c23ef74d0aed0abd27ce8a1e0ede0366eec484dd b969f0dc16525241e654212ef3bba322cb5c078d fdbf8355f5c76d7fc8d44adff47923480b6bc24b 43466a3923ab3ac11fcaa02e82f938a8dd155437 3b92ab3b29afeadc8723529dc65785b821759338 880653a7b783811f9f9f4b77276d7fe96c162c61 3da3ca8c0d3210cec600f050942ad1422fc6010a 6d5b556db6d71cccb34806744707207966451b72 c2edbfc7b102a65b7671947ff821fbec508616b5 f4f6fe1ff0c9ade7b3f011328c36197ccc479418 127922aeb9e4ecbe0f9e2e856bca6516451b4e68 b7d5593d9831783088d491523c496285f521d173 daa8f79e4b1fbbc1f734aefa28b3996cb02120b0 6a544df910c2568178d9388d49a2a2105fd4178f a60558ba4d17e51a7f5da3955ffc34aa3393917d b348fd171b6bb8db236a82ef3f37dba1d303dd29 58e9682af44f047c279271ae8a54896487a6041a b832c85941bf71c766eb6ffd2832932a00773a01 d7ef265497005958ce0d44592ffe88dc1114b9a1 94a9cc7d23cdd1690717a9db9e6b7ffb9eebb87f 4ee2bc62a54db8484d72dc2f35cd039f30f22e26 8d10047e0246960e20180a053f8973c0571a2e88 50341e0d0ce3ea1c8dd5cb81acdade5a195d8ff7 2cd4b1d1f8fca1233b729a622f77577e9ce921e4 98542b8ceb759b4d139eff604499893799bd6f95 dff0dbde73d3d11a7c75cd2d1a0830b136a3f711 9b0e4757b579e447a35c8754dd94149cb27a2ba2 9a47a137582e6b9fdcd5e39d1452167992e91990 64f7c9af220024961c45692ab7022883a1086f60 f49b1812add9b30d97e18d22d6213710c49be6b1 990c09d6d399aae0ecc2e4b1df402c62023264ea c0826f4ae0c97fa7bf2ba572da735c96faab0966 9f5fb749168dc83d2c3dc2d5a7c810916b6b2608 95f8e67f494c3c5001f1f9034bb76c36be272ede,,Task space class with UR10 Atlas examples plus example reorganization,This PR continues PR #210 but with the source moved into the simbody/simbody repo from chrisdembia/simbody. (via short-lived PR #237). This is so Chris and I can work on it together and with osrf.  cc/ @chrisdembia @hsu @scpeters  
simbody/simbody,277,2014-12-05T06:00:37Z,2014-12-05T06:24:54Z,True,2014-12-05T06:24:54Z,c9bad432f8ecf8fffdee0c3240fcd202a2b12b29,1,2,4567c652b142c62e464c1785b53a567e45924255 b3df8a8c2ba4af8549c0d4c46eb4255a954425fb,, appveyor build as 64bit ,
simbody/simbody,278,2014-12-05T06:30:26Z,2014-12-05T07:03:02Z,True,2014-12-05T07:03:02Z,82c5cf92b92693f39d8d43e06ee2b60beabcce4f,1,1,bbe30ae60a71391fada3daad7ee992f48a64e992,, readme Appveyor badge points to master branch ,
simbody/simbody,279,2014-12-05T20:39:25Z,2014-12-06T04:06:13Z,True,2014-12-06T04:06:13Z,8ec478114114595c78670cb16cef6f940cf2af50,1,1,4321d7a604f327774b2556af287bf592fad6959f,, appveyor Don t nupkg for pull requests ,I guess to test this  we wait for appveyor to run its test and we make sure that the nuget lines don't execute. 
simbody/simbody,281,2014-12-06T05:54:01Z,2014-12-07T23:03:43Z,True,2014-12-07T23:03:43Z,b9f48483a741ec61208bec0a753837043352a9d1,1,2,53723e2a987f353bbb66a409082b3be516a5d6f4 51b90dae6e500925217a2e3039807dfa154a9349,, WIP Fill in CONTRIBUTING md instructions,Various sections are incomplete and the whole thing needs discussion.  @chrisdembia since you were kind enough to review this when I snuck it straight into master I decided to go legit and make a PR. It's not ready to go in yet but I believe I addressed all your comments in the first commit. 
simbody/simbody,282,2014-12-07T22:53:06Z,2014-12-07T23:14:29Z,True,2014-12-07T23:14:29Z,e19cfd6665ee56f547822554afebc552ee212139,144,3,53723e2a987f353bbb66a409082b3be516a5d6f4 51b90dae6e500925217a2e3039807dfa154a9349 4aeddc2bd55ac29636544c4ef5762b042e6f6256,,Get rid of all tabs,In Simbody lots of old code  text files  and 3rd-party code contained tabs. In preparation for automated tab rejection of future contributions  these must all be cleaned up.  Some formatting messes are to be expected and should be fixed in subsequent PRs as they are discovered. 
simbody/simbody,283,2014-12-07T23:05:43Z,2014-12-08T00:01:39Z,True,2014-12-08T00:01:39Z,c6ff6bcb4a54657c2e31b21065b126e1a753bd80,1,5,fbe693458a9af79ce25077aa4b42172d346d93cb fe5032b77f773f1372f1b27da317bda79194d9a2 4c3c61db36a5c765492edc7810e4d66e10192233 f4c24a5d906dfc367e68765da9dc8c14f08b5889 cb19fd78b7dd021483279a14f6c20e4d8ac8d5f6,, travis Fail if tabs found in CMake cpp c h ,Fixes #280. Don't merge until #282 is merged. 
simbody/simbody,284,2014-12-08T00:20:33Z,2014-12-08T00:21:41Z,True,2014-12-08T00:21:41Z,dca8f87d3cb1d2a974a62a43f5180581838d96c6,3,12,4321d7a604f327774b2556af287bf592fad6959f a4c5167c2ee793f1618a2717c7d885271c5f69c8 b36dfbb2e1d9f8da9eafb671c1851779808ecbf0 fbe693458a9af79ce25077aa4b42172d346d93cb 40e72230afaea834c7a65bc7a4e656e6a9fbd524 fe5032b77f773f1372f1b27da317bda79194d9a2 4c3c61db36a5c765492edc7810e4d66e10192233 f4c24a5d906dfc367e68765da9dc8c14f08b5889 cb19fd78b7dd021483279a14f6c20e4d8ac8d5f6 b31d95c3e1dca2af968a48537959d97051f41dab 71fcd3df5d5beca6187e57d5f01c6aab726b958e 1020bc03221c411819653aac574f5d18ad99d6e8,,Get rid of all remaining tabs in the Simbody repo,Builds will fail until this PR is merged. 
simbody/simbody,285,2014-12-08T00:34:06Z,2014-12-08T00:38:31Z,True,2014-12-08T00:38:31Z,3274abeaa446e742d2f1fc02fcf855bfadd6b284,3,3,b130c5f87954154e3e8c3ff99a6718f6676c16b8 66ce585c79f9d4f328f55cbc483576e393319dce 10786a59d1af2cea089c784385069f9f2afcbd48,,Get rid of all remaining tabs,Still some stragglers. 
simbody/simbody,286,2014-12-08T01:01:26Z,2014-12-08T01:17:18Z,True,2014-12-08T01:17:18Z,a1a8e3ff1d4764af6d8a8195d4db059a0afb5cb5,1,2,db0ca63ee83688f8ce0c78998cf259e2d93951f1 f90e08647f79ed472de2ddb1159d6934f7f65ec3,,Add feedback in Travis builds about tab check when successful or not performed ,Nice to have some confirmation about whether the tab check was performed. 
simbody/simbody,74,2013-11-28T04:00:36Z,2014-12-09T20:49:47Z,False,none,bf4bcbdcb57d83c1b2e69af17e103867ed338bc3,1,6,f00f6987001f06e1272bb23da3b38e7324cacf2c fe91561e5190bb4fdc23eba5d999892b7ffbc355 2a13a1ab16d847bf0c3a09f41265847431d5ba69 a9b91dbb8158635fa6f98deb62a74fca39bc6b32 8ad290a8417d85487dab515924934aab76e9827f 0ea3056e657ba5541ca9390ed9edf7ec672bdf31,,Rollingdisc example,See for 2a13a1a comments (copied below for convenience). This isn't ready to be merged; I'm just opening the pull request so I can ask questions.  One more comment is that I think I'm accessing states the wrong way when setting the camera's location/orientation. See https://github.com/chrisdembia/simbody/blob/rollingdisc/Simbody/examples/ExampleRollingDisc.cpp#L46; is there a better way to get the x and z position of the contact point?  "I tried to follow @sherm1's advice about how to set the initial speed of the wheel. Currently there may be more damping than we want. Also  I am trying to follow the disc with the camera. However  I cannot seem to call both setCameraTransform() and pointCameraAt(); only one or the other can be satisfied."  I'll need to do another check about energy conservation; does its motion look realistic? 
simbody/simbody,287,2014-12-08T06:15:22Z,2014-12-10T05:05:52Z,True,2014-12-10T05:05:52Z,5f261b06c1f4fe2b3bd68d197e7f538ddb7aedb2,2,18,bfc6f21296d0bd6fe4e975547f4f07af99d07835 932d6da55c7fc6f284a2e591e32094859972139c 7b9ebb1946cb74ee129dc39fddbacc813daa2c6c 61cbcf00d46c91e2f6c534bbb2f3e6b488bc3936 2876d4c90ebdb5e95bc29467593594414319a94d 29687ab9481c32c5d241baad19fd10af8e0cc140 1461e1d678c31b52e19081df501e105cd4a977cc 1ca2463f81587a315f1cff84686776ba0b6cd9fd ad1d96c4c377dc6f65e283aa92ea2be47ac9fff6 6c9752057899cc3d4b3afd036f443547c6387cde 83004cd2f944f19db0a30ec2cfdca8d71eb1c938 66383a50c590b9abcb8ae37febb0aa88a1bb1027 3f9c8c0a8648a4931630a1d28cb3e704043b977f c5dfc5d156f08da195e563b9215f606145ba1f95 234da9f6f02a8959c7cb4edec77e1c801bc8033d 2830e05f8463293ff799cdbde5dc816e7f1ea121 bf009c523c4f0da476be59b2fd95d4f5216c560f 5e4868bcf2350fb63a3266775113c6cc67f2ff8f,,Final mods for initial CONTRIBUTING md,There are still a few sections that need to be written or expanded on. 
simbody/simbody,289,2014-12-10T19:01:15Z,2014-12-10T22:51:02Z,True,2014-12-10T22:51:02Z,8162ab5b45bf8fb268bf2b711dc13b0e0c412ec4,1,2,ca7de75a9937c425fbf76824c3f1af1dfbd65296 74b054f6f6d5bcae67a3a58773777f24482bec36,,Revised pull request section in CONTRIBUTING md ,Adding mention of Travis and AppVeyor per Daniel Lopes (@danielsimoeslopes) in #271. I also make the main PR activities bold.  Daniel  please take a look [here](https://github.com/simbody/simbody/blob/revise-pr-section-in-contributing/CONTRIBUTING.md#mechanics-of-submitting-a-pr) and let me know if this is what you had in mind.  [ci skip] 
simbody/simbody,126,2014-02-27T01:43:16Z,2014-02-27T06:07:52Z,True,2014-02-27T06:07:52Z,a7b2e6ddd2f6488b85c99e7d058dc8e41ce73e1d,1,1,5ea5a22bacb92bcebfeeb3343de3ee0e85c43249,,When using GCC or Clang use C 11 by default ,This came up with #125. 
simbody/simbody,292,2014-12-13T04:08:45Z,2014-12-13T06:13:04Z,True,2014-12-13T06:13:04Z,55f0cddda23ebb135297be58b04901ac9f1090b6,1,1,f3d9094a68e89089ab45a2a8264610f83f273f21,, readme Update apt get instructions ,OSRF updated the commands for setting up their debian repository. 
simbody/simbody,291,2014-12-12T22:34:53Z,2014-12-13T06:31:36Z,True,2014-12-13T06:31:36Z,f088ebb62ba689ff7fb69d3b3eec1fd082991e7e,8,10,522baa7b6667cc82e9b92754fb9928b083cd6128 2deb9a4d65f3be6c8cd80db4bbebbb4498e9acd3 b44c4e4f167c6167f1a247cb44067f41de8f039a e545aea9c5d6c2c9795da9c8bbd7663f99b04ab8 ffb120ba22df96082454f772d0f019e81d1090ab e773406997c92f09f0370975a2a351ea1c62bfe5 7f1192baea40ef4449ba103728ec1e5ddbaecc1d f3d9094a68e89089ab45a2a8264610f83f273f21 eb404e1961572e1368dc35733023698de5d4a5a8 6e023a96a90db5587f281203bb49587030cfeab3,,Update readme and examples,Addresses issue #290 by updating `README.md` and also by moving the Windows examples installation to where the `README.md` said they were (at the top level rather than under doc).  This also fixes #259 by preventing example binaries from being installed from a Debug build.  And I updated the version number examples in `README.md` to 3.5.  @mjhmilla and @chrisdembia  please review. Chris  I didn't try the installation on Linux to make sure I didn't mess up anything with the example installation (they should still go to the same place  but not for Debug builds). Also  it would be worth a quick check of the instructions for different platforms to see if they still match reality. 
simbody/simbody,294,2014-12-15T02:03:21Z,2014-12-15T02:32:52Z,True,2014-12-15T02:32:52Z,345be2d0f7546a9ab2ea0f2243ad4c7f3fb987ab,1,2,d22c9027d9feba91d9bd6c1cf10169c9afb2ceeb 902c3a574c31bdcae79d3158764bd1c8f03ecf29,,Remove CMake code to pick default install directory,There was old code in `CMakeLists.txt` to set `CMAKE_INSTALL_PREFIX` to the appropriate platform default  because very old versions of CMake couldn't do it correctly. That's no long needed.  Fixes #150.  cc/ @chrisdembia 
simbody/simbody,295,2014-12-15T02:17:01Z,2014-12-15T02:34:00Z,True,2014-12-15T02:34:00Z,bec6c737813d8b0378427946a988ae2eaf34ee09,2,3,d22c9027d9feba91d9bd6c1cf10169c9afb2ceeb 902c3a574c31bdcae79d3158764bd1c8f03ecf29 e5017e66e30303aae6c089c6de55f666f51cdf85,,Upgrade doxygen requirement,Modified to say we require doxygen 1.7.6 but recommend 1.8.8 for warning-free results.  Fixes #293. 
simbody/simbody,296,2014-12-15T04:24:27Z,2014-12-15T06:00:57Z,True,2014-12-15T06:00:57Z,cf8b4b3f7a10ecd53547ce22dbedbda241070742,9,5,fb98d79dfdc0add951e389c073b383e95ebf48fe 46f603731499997bfd25f6f7a65f111ae031541b e4413ccb62eb56793e7cf7a408b3c7a291ee7377 007fcb6d5c997f76477add8bff93697ecdb3a023 938d4088bf1f30def3a40bdc5640da568d44f917,,Misc prep for 3 5 release,Deleting obsolete documents  making sure new documents get installed  update the Doxygen main page. (See issue #275)  @chrisdembia  do you have anything along these lines you want to do? 
simbody/simbody,297,2014-12-15T18:05:32Z,2014-12-15T18:56:13Z,True,2014-12-15T18:56:13Z,60aff7b5c6268d804713eb7a9b728131dc14acd7,3,3,a98212d90938967cbbba27075fc49b91697119f7 3a639a33b9bf4474a59c0c5d79c53748bc0ac972 91e8cb4d1a6edbc241f3520d8a574aa5e1e7fb74,,Rename CMAES options lambda and sigma ,
simbody/simbody,298,2014-12-16T01:15:37Z,2014-12-16T03:41:38Z,True,2014-12-16T03:41:38Z,99300094e30c9ae43f9e1ee96340497784102404,6,1,5ad5afd73458286b452cd3c4ff0400fe6fc804a9,,Clean up installed doxgen,With this PR I'm attempting to get rid of some longstanding weirdness with the installed Simbody doxygen: - Got rid of unneeded extra directory levels so html is installed in `doc/api` directly  rather than `doc/api/Simbody/html`. - Shorten URL name on simtk.org/api_docs/simbody. Now the installed URL is just https://simtk.org/api_docs/simbody/latest. - The following links should also work:   https://simtk.org/api_docs/simbody/previous   https://simtk.org/api_docs/simbody/3.3  (etc.)  This required minor changes in several places where the old URL was referenced  and where the html files get moved around. I believe the changed doxygen install directory here will allow OpenSim to correctly find the tag file (now in api/ rather than api/Simbody/html).   @chrisdembia  do you see any problems here either for Simbody or OpenSim? 
simbody/simbody,299,2014-12-16T17:53:39Z,2014-12-17T01:26:30Z,True,2014-12-17T01:26:30Z,917367f57d39c1e79c2dd491996df5693c06ee6b,3,1,3f765cb4b6ec88294ad377f6c6ab1c15b4927711,, WIP Update Debian files for release 3 5 ,I opened this PR to finish up the debian mods for release 3.5  which I would like to get out asap.  This reflects the conversation in issue #275 as I understand it. I turned on the example building and didn't add the diff that unlisted the example binaries installation directory  which I believe is `/usr/lib/*/simbody/*`. But I'm fuzzy about this; I just wanted to start a PR where we can finish it.  @j-rivero  @chrisdembia you both can push directly to this PR's branch  please do! 
simbody/simbody,300,2014-12-17T01:31:58Z,2014-12-18T18:20:38Z,True,2014-12-18T18:20:38Z,2cd4553fa37af0ccb8a77245bc72fa1b085d7cff,4,6,0bda06554284578efda7ed31211fdc67247569e6 d52d01f50b78a5191ef75d2ba532608787f040e0 6d0fb4fbea5b0f0c6fef26a8ef85d3b1adeae915 d41379a4322b7b9a2518de34dc277bbdc4282d83 f0441f0c1d7bbcd1c7127613ad2f6f198e02e843 10f3ca99f478243d61b1f01011f6c1acf3e73a46,,Debian changes for 3 5 ,This is a continuation of PR #299 which I merged by accident. 
simbody/simbody,303,2014-12-19T03:04:10Z,2014-12-19T03:59:22Z,True,2014-12-19T03:59:22Z,643daed17cd3363c88c7ef9314927dba061a5c8e,3,2,84e9beef3bc8f3eb6321258956356bebcfdb57ab 30346e130145474cc8ba86ff68335ad4392d9581,,Remove SIMBODY_STANDARD_11 ,As of Simbody 3.6 C++11 is required so it is no longer an option. - Remove the option - Update README.md to match 
simbody/simbody,304,2014-12-19T04:47:41Z,2014-12-19T05:45:03Z,True,2014-12-19T05:45:03Z,b4794f724042c60bf9dfdd36ddd218a2c814ba70,2,2,3bfae4d8545780538eec38ce961404ef368527a1 5c149d70f151b88b9a02ae8df1b860f07a37aa7e,,Nuke some dead code,We no longer support VS2010 so don't need to cover for it any more. Also  following Chris in opensim-org/opensim-core#296 I deleted the long-dead CTestConfig.cmake file. 
simbody/simbody,302,2014-12-19T00:56:56Z,2014-12-19T04:39:12Z,True,2014-12-19T04:39:12Z,aaea0337b1301f1b3247cae6dc5e85c2566012c2,73,2,7fa4373ea0e2dd6f8f0dc98954563d4249fd3f38 bf9c69eda73905ece999f456a4178fe24f4dac53,,Eliminate OVERRIDE_11 and FINAL_11 macros ,Remove the macro definitions from Simbody  and replace `OVERRIDE_11 -> override` and `FINAL_11 -> final` everywhere. We said Simbody 3.6 and above must be compiled with a C++11 compiler. This seals the deal.  **Reviewer question**: is OpenSim still depending on Simbody to define these macros? Should I leave the macros defined unconditionally to `override` and `final` in case anyone is still using them? 
simbody/simbody,306,2014-12-19T22:02:52Z,2014-12-21T01:21:42Z,True,2014-12-21T01:21:42Z,1a9b644215249e39d9db268f50d8b2b4691629a7,2,2,6c35df25081c3d35b05904acbd2b1b835bd5f554 2d46c3d933b1ce88eb9bb7dfc04aff324abee6c7,, travis Build visualizer ,Let's see what happens on OSX... 
simbody/simbody,309,2014-12-21T01:54:07Z,2014-12-21T02:19:42Z,True,2014-12-21T02:19:42Z,201d15d72a4d2df9e9173c7a8aae3cb2890db229,1,2,cc63c91c05bbabd1e61010936138817526802734 33942edb21a299702c8009247c83453c48fb5e43,, readme Remove comment telling users not test ,Mimics a change that @sherm1 made elsewhere in the readme. 
simbody/simbody,308,2014-12-20T22:23:46Z,2014-12-21T20:30:42Z,True,2014-12-21T20:30:42Z,ed3657fd66e3a9c168b4b1a2e39046f0f02e6e5d,1,3,66731dafed4f3b8dd53983204c9a80633a7b7861 550234484f1f15f513075737c212b1227ae8f12b a0ef8bd806b4f56f30d8b0e14c88ec06ffaffb07,, contrib Describe how to untabify ,
simbody/simbody,310,2014-12-22T22:47:40Z,2014-12-22T23:12:24Z,True,2014-12-22T23:12:24Z,7209ff25b7f3b6580138c6b7cb511f101e31c0cb,1,1,684f71482beed7541376f76c338eec6340c0e6d8,,Shorten pragma in visualizer,I believe this will work because clang follows many of the GCC pragmas. We'll see what travis says of course. 
simbody/simbody,311,2014-12-22T23:29:05Z,2014-12-23T00:35:23Z,True,2014-12-23T00:35:23Z,62c9e72303c945877c777525ef7437ac6443fdaf,1,1,1141fd0bf46b017053f1b391a5a252c10e765cb3,,Switch to override final rather than just final ,Per discussion in opensim-org/opensim-core#299  I am switching Simbody to use `override final` rather than just `final`. That's easy since `final` was used in only one place in Simbody!  cc/ @chrisdembia @aseth1 
simbody/simbody,314,2014-12-23T19:54:05Z,2014-12-23T21:42:52Z,True,2014-12-23T21:42:52Z,091c8fc522fa00e25cecc31fa9d8439ab34db57f,2,1,d6fdb1f21b72cf20075bdfd029d43e63b20d2496,,Enable Markdown support in Doxygen and require 1 8 6 or later ,Doxygen had a bug that prevented us from being able to use Markdown syntax in Doxygen comments so we disabled it in Simbody and OpenSim. Dimitri fixed that bug in doxygen 1.8.6.   Since doxygen is now at 1.8.8 I would like to require 1.8.6 and enable Markdown from now on since it makes it easier to make nicely formatted doxygen comments.  We should consider this for OpenSim also; I filed issue opensim-org/opensim-core#305. 
simbody/simbody,315,2014-12-23T21:45:44Z,2014-12-23T22:02:46Z,False,none,c772a34089abd903dd4a692894bb60efa7cf0f3d,1,1,ee95a12ca7b7c58a7bcbc4da017c2b618cf96fb2,, readme Update doxygen version to 1 8 8 ,If you don't want this change  feel free to reject. 
simbody/simbody,317,2014-12-26T17:52:20Z,2014-12-26T19:56:39Z,True,2014-12-26T19:56:39Z,a93bcc5e62bb3be9f231946fb4f860ce476640ea,9,1,e5c1ce6a423f978884f12dec2f8255eb08ae03df,,Fix some cppcheck warnings,(style) Array index 'i' is used before limits check (performance) Prefer prefix ++/-- operators for non-primitive types (warning) Variable 'centrality' is reassigned a value before the old one has been used. 'break;' missing? 
simbody/simbody,319,2014-12-27T08:15:25Z,2014-12-27T23:13:58Z,False,none,0393c3a3a5887a6f808bfb08d3c845263e4e971b,7,1,23b9c1463c394796597677b8f09cae403f834eae,,cppcheck fix Exception should be caught by reference,Add const when it's possible to indicate the arg isn't changed Remove arg name when not used 
simbody/simbody,320,2014-12-28T08:25:14Z,2014-12-28T20:04:09Z,True,2014-12-28T20:04:09Z,5fd08c1823628d8a9fca31f8bad9350bbcbf437e,7,1,a8306bff1a1c714935786ef8806e54910f5f0e38,,cppcheck style Exception should be caught by reference,
simbody/simbody,318,2014-12-26T21:00:14Z,2014-12-26T22:27:26Z,True,2014-12-26T22:27:26Z,38b4baeb028e02c488baa9c201ad2cf6ff654c89,6,1,bb53e671764dd4f9d377191b6a647c162914dcf8,,Fix memory leaks reported by cppcheck,
simbody/simbody,321,2014-12-31T21:50:40Z,2014-12-31T23:42:28Z,True,2014-12-31T23:42:28Z,9f60a6a11283899c39ff6d517b1c5ecbdc1bb030,2,3,6925471660df2c4f5feb99f86e212998a841a8e9 510fea8ea5145d2b9d3d57ae53a065f9367b0903 7a4c6a9d68df4160a45ec79344a46d4661585d04,,Fix Simbody 3 5 install problem on Mac ,This addresses osrf/homebrew-simulation#33.   The Mac installation failed due to inability to copy a symbolic link. The code that failed was over a year old so we think this may be due to a change in CMake behavior (seen with CMake 3.1). The fix here pushes the symbolic link into a subdirectory and then copies the contents of the whole subdirectory rather than trying to copy the link directly.  
simbody/simbody,322,2014-12-31T23:18:20Z,2014-12-31T23:38:58Z,True,2014-12-31T23:38:58Z,1cdb9018f5db23f58d1f6ea5d0f6fc2abc861962,1,1,510fea8ea5145d2b9d3d57ae53a065f9367b0903,, travis Test that simbody installs ,
simbody/simbody,323,2015-01-01T01:10:42Z,2015-01-01T05:59:46Z,True,2015-01-01T05:59:46Z,613ca9926a21b6b6690ebb9c13cfc084bfc6d545,5,6,f00e2808d42563bbe778f4336b44403f798c1a27 e452d2e4e88ee725c33b32c52a7045d92be57e06 5542b65fe3926239cd15c3e276fa9a6f724ffe22 9aaaff7df20c76bbe3236ac25d73ef671301d281 03ffed282470e60352d4c86e60e802807e249a28 29957af01cf175845b4a5f8864753ce5dff1e319,,Backport from simbody 3 5 1,I cherry picked the commits added for the 3.5.1 release back to the master branch. This includes an installation problem fixed in PR #321 and a change to make Travis test installation in PR #322  plus some miscellaneous changes to changelog and readme. 
simbody/simbody,103,2014-01-10T01:56:30Z,2015-01-04T22:10:28Z,True,2015-01-04T22:10:28Z,b1079ba2840ac4508b21b3793d520d8516e0f758,9,10,0cafc9bcfb49a2bf9b161563a7f64b24ad449371 016016a1114d7f758a3ab40a8b9e21be6e1e89ab e0791ecc22fa8ab152324556a34224d1a0bd8d7a 9183020f8f659c96babf043105426594556ff85a 6c6879f35956df474d8741b53ca9ff61b1c9de05 384940eee6f2f20c07051fa966a6eedb51796c74 11057496c26e6c63ae141868d74ceb5764dc7e9b c120008bf2460a8c07a5fa81163a48e311adb88d 5b4e9d925ba3dcc91735a84f1e63fd7062f9ae52 09b0d9bc58fafc327667eff73eb37c5949d3a596,,Create Visualizer BodyFollower class ,To cause the camera to follow objects around in a visualization. The class is a generalization of the BodyWatcher class in TimsBox.cpp. I have replaced BodyWatcher in TimsBox.cpp with this new class. I ran TimsBox before and after the change and the camera behavior looks the same to me. I've also used this BodyFollower in the rolling disc example  and it works well there too.  I'm not sure where exactly I should put the new code; let me know if I should relocate the additions.  See some related discussion in #74. @sherm1 said "Attaching the camera rigidly to moving bodies doesn't usually work well either because then the image bounces around too much." I didn't do anything to account for this. 
simbody/simbody,327,2015-01-20T06:07:07Z,2015-01-20T17:22:19Z,True,2015-01-20T17:22:19Z,0780ed420399472e0a8b7e2219afa6961b538d7a,4,4,c697a235ae8bdb0737a6d3677781af1f0804ccf1 d60248b53aa4b3aa86b9e162595df3ea0dbdba50 709e08683f55ba9659f1ffcf1b47971e67a2a5bc dbde75d5a731c6cfab473e30e8bd497da3bed525,,Add copy on write smart pointer CloneOnWritePtr,Simbody already has a `ClonePtr` which is like `std::unique_ptr` but with deep copy semantics (`std::unique_ptr` doesn't allow copying). This PR adds another smart pointer `CloneOnWritePtr` that acts like `std::shared_ptr` when the managed object is being shared for reading  but acts like `ClonePtr` when someone tries to write on it. That means that it is very fast to copy construct or copy assign  because no copy actually occurs until someone tries to write. At that point the managed object's `clone()` method gets called and the writer ends up writing on their own private copy  while all the other sharers see the use count decremented.  This should allow for very fast copying of complicated objects like States where large chunks of the object remain unchanged from source to copy. In particular  discrete state variables are unchanged while integrators need to make trial copies of the continuous ones.  Note: I modeled this as closely as possible on C++11 smart pointers rather than on the existing `ClonePtr` which needs to be upgraded to match C++11 better. 
simbody/simbody,329,2015-01-20T18:26:41Z,2015-01-20T18:26:57Z,True,2015-01-20T18:26:57Z,46dc98e5c9ec2430ad66845150197392f9ba2d46,1,1,9ee346b7350a184ddffadeed800755c0e895b518,,Put doxygen in quiet mode to make it easier to see warnings ,Following opensim-org/opensim-core#319. 
simbody/simbody,330,2015-01-21T21:36:33Z,2015-01-22T09:06:06Z,False,none,0b90dd8bb53b1ad38bfe87f3d79f01ea3c911a4f,7,10,5c33f9eed02e238fd2c35f4c6ac229187457a332 a94205679ff74fbe0243404f0d16464900656621 7301977449a111bcf16122d86b0be6402a1cad2d 7362e84445bcd33a0193999b597fd7143d9b3579 71c6018eb3df1b948ac08583883d85b56681c92a 456ccc163710b56266ec8f7342afbc27a1044c2c fc1123ef83abe41a53093afb751ffe5d08d77437 3c6c62d517b3cfea943243beb4bcbac735deb3c5 2308e842ebb403b6bf98db5aeb79b8961ef2f980 4f91afbdbf92043e1fbed5dc66fd6a3ae207facc,,Mingw,
simbody/simbody,332,2015-01-22T08:55:57Z,2015-01-22T23:57:54Z,True,2015-01-22T23:57:54Z,daae41b12535ae278da9281f5809eda107f9baf2,6,4,4811e6590a0105297c6b123e5daf1b3526a05bf0 a6c07f904f94b823c5084cd737f4b1b4a3c2830b a61b10bf7843881c0870fd7d28811b2493b14cef ee1941c194db17527a76c5400fa7a6ca6105c38f,,Mingw2,
simbody/simbody,335,2015-02-06T05:29:48Z,2015-02-06T05:42:46Z,True,2015-02-06T05:42:46Z,c295edae2fdcc27e1859bc6cbb7c028291e22a21,14,16,7afc6c267fd76d2e2371838d45aae99a115c4717 0b080023d35c40184a5c96da116fb9af8cbf6ff4 24842df6d435f9cb6e6870021c50a6bf423fd6f7 b673430c19cf30e1741d68c91028949792d06415 ac64e550597212b9ac3a426fd734d8c9233f39fb 4811e6590a0105297c6b123e5daf1b3526a05bf0 a6c07f904f94b823c5084cd737f4b1b4a3c2830b a61b10bf7843881c0870fd7d28811b2493b14cef ee1941c194db17527a76c5400fa7a6ca6105c38f 607ad7a6508a81352f5e9d2a2adcd486cc050e24 310d5482a3d318c92ca08a734bca9255de6d576c 3d5289cb8718309ea9a66d690cf14ab7922ad961 372d9f4fe1d5e0a7907ac99b4b7b194eda098655 aaff4807e7bc8273b45d1a7deb04d00505093a7f 152db63bcf8a4c380d00f8c09f2c9535ee57b676 934cbc70eea83da579bf0aa53b3e1df601d5ff3e,,Fix SpatialInertia shift bug,This fixes issue #334 for the 4.0 branch; should also be cherry picked into master. 
simbody/simbody,336,2015-02-06T05:52:43Z,2015-02-06T06:06:36Z,True,2015-02-06T06:06:36Z,07eb3c9ada517fae0c74ae5c152fa1492ae4a894,6,3,717c2376bb969b276e0b552c72ce10f7daa939cb bfbae4f6168a255a65689dfde7e65f3732b1e6be 88d37b831a9b26d0f594001bf0c55df0ba2fb20a,,Backport SpatialInertia shift fix from 4 0 branch to master,This PR has some cherry-picked commits to fix the bug reported in issue #334 in the master branch. 
simbody/simbody,338,2015-02-06T21:12:43Z,2015-02-06T21:30:34Z,True,2015-02-06T21:30:34Z,845b41223f4f7da7418d43fcf991bbc60a4aacdf,1,1,9346dc5846f394237ec8bffa3b5dce74314de980,,Improve the operative system detection in preprocessor code,For some reason (my hypothesis is the use of [__linux keyword instead of the POSIX __linux\__](http://sourceforge.net/p/predef/wiki/OperatingSystems/))  I'm receiving [failures of Ubuntu Simbody](https://launchpad.net/ubuntu/+source/simbody/3.5.1+dfsg-1~exp1~vivid1/+build/6951817/+files/buildlog_ubuntu-vivid-powerpc.simbody_3.5.1%2Bdfsg-1%7Eexp1%7Evivid1_FAILEDTOBUILD.txt.gz) when is compiled in the Linux/PPC architecture (it fails looking for the windows.h header).  This pull request implement a small variation in the logic of operative system checking and fix the linux keyword according to POSIX.  Untested on PPC but should be enough. 
simbody/simbody,339,2015-02-09T01:54:32Z,2015-02-10T20:20:49Z,True,2015-02-10T20:20:49Z,34258e257f669db09bbb234cd3be19a6d373415e,4,2,f1c9808fc7a2c9ab5d09455dfebe251042edbc11 17dd918daca381475849fd8c8985174c97cc8aad,,SimbodyConfig cmake allows relocation of installation ,Previously  SimbodyConfig.cmake contained hardcoded paths to the installation directory. This is fine on Linux  but may be an issue on Windows where users choose the installation directory long after the build process.  To do this  I used CMake module that comes with CMake 2.8.8. We currently only support up through CMake 2.8.6. Since Ubuntu 12.04 uses 2.8.6 and it is likely that our users will be running Ubuntu 12.04  we cannot use CMake 2.8.8 yet. Instead  I copied the necessary CMake module from 2.8.8 and committed it to the repo.  I tested this on Linux by compiling a Simbody-using client project  and by changing the name of the install directory after the installation was complete. In both cases  my client project was able to correctly find Simbody. I do not think a Windows test is necessary  as I did not change any platform specific behavior.  @scpeters @j-rivero could you take a peek? Thank you! 
simbody/simbody,340,2015-02-10T20:24:02Z,2015-02-10T22:23:55Z,False,none,418670e0bf25fb8bddfc04de9e14df6bb3e43e35,6,12,62fd99e8d1eaab0888d03b0bca7a0a384f27e373 717c2376bb969b276e0b552c72ce10f7daa939cb bfbae4f6168a255a65689dfde7e65f3732b1e6be 88d37b831a9b26d0f594001bf0c55df0ba2fb20a aa13d2229e9e7a6a1a3666ea482777c58744adaf 9346dc5846f394237ec8bffa3b5dce74314de980 ed73dd53939f4c63491851469aa4691e1805d57a f1c9808fc7a2c9ab5d09455dfebe251042edbc11 17dd918daca381475849fd8c8985174c97cc8aad 8706c32b4637b1662772f39125f3df81b43497e0 7595e38279ece6ce0a0364c3a5e584f0eff9babd af3f0c65c4b88c940f16e7334db5c9cb401c87ec,,Cmake config relocatable 4 0,Duplicate of #339 for the 4.0 branch. 
simbody/simbody,345,2015-02-20T23:26:17Z,2015-02-21T02:45:45Z,True,2015-02-21T02:45:45Z,b32e8e45ae311b27127a808b5e740c344c870fd2,3,1,331932d5491316ca09ef7827d4d62b0e1b265640,,Set the index on body automatically when DecorativeGeometry is added to a Body,Fixes #344 
simbody/simbody,346,2015-02-21T02:48:57Z,2015-02-25T00:57:27Z,True,2015-02-25T00:57:27Z,860265d1923d61d74d6a7eaba8a23ddf7a6a575e,3,1,6fb8c9df5c8b40058c76cefe19e5c880c71967e0,,Added index on body and userRef pointer to ContactSurface,Also makes `Body::addContactSurface()` set the index automatically. Fixes #98. Partially addresses #263. 
simbody/simbody,326,2015-01-12T17:07:23Z,2015-01-12T17:17:44Z,True,2015-01-12T17:17:44Z,6326ddbb270ee40784eb8c9e4940da0b5b29604c,1,2,7afc6c267fd76d2e2371838d45aae99a115c4717 0b080023d35c40184a5c96da116fb9af8cbf6ff4,,Update debian changelog to 3 5 1,Update ubuntu distribution and release number. This is part of our work to release the simbody-3.5.1 under the OSRF repository for Ubuntu trusty (probably precise too). In parallel  I'm working on getting it into debian  so we will get the update on Ubuntu Vivid as well. 
simbody/simbody,347,2015-02-27T23:33:21Z,2015-02-28T00:09:57Z,True,2015-02-28T00:09:56Z,130ed9a6c1da67837045401a31271e7a9e7753a8,6,3,41e35dedde35e1b557f35994f73d9af1c46d659c 7b13cdd217b82a824a38bb1ae98d8b6ac0835327 dd99a49e54aa8d92d020e4f8bb5ffe0047f7eaee,,Find ContactSurfaceIndex of surface ,Previously there was no good way to map between a system's `ContactSurface` objects and the `ContactSurfaceIndex` assigned by the `ContactTrackerSubsystem`. The PR adds a method `ContactTrackerSubsystem::getContactSurfaceIndex(MobilizedBody  int contactSurfaceOrdinal)` where the ordinal is the small integer returned by `Body::addContactSurface()`. With the `ContactSurfaceIndex` in hand it is possible to ask whether particular surfaces are currently in contact  so this fixes #263.  This PR also cleans up some doxygen and fixes mobilizer-associated inboard and outboard decorations to record their ordinal numbers (obscure). 
simbody/simbody,324,2015-01-05T21:10:20Z,2015-01-05T21:26:31Z,True,2015-01-05T21:26:31Z,004f22232812ed00918766afe7079c20f59c39a8,1,1,bf9be77c3a82041376d2e671e25903a29891cda3,, cmaes Get rid of auto_ptr ,Fixes #254. 
simbody/simbody,351,2015-03-25T17:25:47Z,2015-03-25T17:37:27Z,False,none,db725905f7980acca6ce6e40a56252dd185c2ed4,1,2,ead9ea4525839747bf091b3a1fe77c1eb3d92e2a 20af744ee778f325d859f14942e0e0cada013a3b,,Fix for issue 350,Fix for the issue #350 https://github.com/simbody/simbody/issues/350  (and removal of trailing whitespace in CMakeLists.txt) 
simbody/simbody,353,2015-03-25T19:33:01Z,2015-03-25T19:41:10Z,False,none,aa707ff3052c27cc067a4506413132c401467c16,8,1,5bd83d6cea27f1b90c9f0ef0d07850071aeb4d84,,Parallel force calcuation works ,Using ParallelExecutor and ThreadLocal. Still lots to clean up (documentation  pointer member variables  etc.). 
simbody/simbody,355,2015-03-28T05:18:14Z,2015-03-28T06:22:50Z,True,2015-03-28T06:22:50Z,cf6de3c6892ef1a1cd70dcda994b4fc6e20ecd7b,1,1,7888a884953a2ee64f5436ae9b1a79880f1017ea,,Added Dzhanibekov Effect example,The Dzhanibekov Effect is a non-intuitive rigid body effect in which a smoothly rotating rigid body suddenly flips 180 degrees  then rotates smoothly  then flips again  etc. It is best seen in zero gravity: compare [this one on the space station](https://youtu.be/L2o9eBl_Gzw) with [this one in Simbody](https://youtu.be/L8B83DUKiiA) produced using this example.  Erwin Coumans posted a simulation in Bullet [here](https://plus.google.com/+erwincoumans/posts/TAyj5x4Q1HQ)  which inspired me to try it in Simbody.  Here is another real-life [space station video](https://youtu.be/JB0OAt4zQ1E?t=29s) (in Russian but it doesn't matter). 
simbody/simbody,357,2015-04-03T23:36:37Z,2015-04-04T00:02:30Z,True,2015-04-04T00:02:30Z,fd6310fe8fbe914dafcac68d81015b06483e5fb4,3,1,34dccf5b04b6902dad6a7dec04dc6c72f65a16b4,,Improve simbody visualizer relocatability on Linux ,If one relocates their Simbody installation  the primary mechanism for finding simbody-visualizer no longer works (the original installation path is baked into the code). The backup plan is to define SIMBODY_HOME; then  $SIMBODY_HOME/bin is added to a search path. This works for windows  since simbody-visualizer is installed to $SIMBODY_HOME/bin. However  on Linux  simbody-visualizer goes into $SIMBODY_HOME/libexec/simbody. With this PR  the _relative_ path of simbody-visualizer is ALSO baked into the code  resolving the platform-dependent issue.  Tested on Ubuntu 14.04 and Windows 8.1: I installed Simbody then built a client project that uses the visualizer. At first  my application can find the visualizer. Then I move the installation. My application can no longer find the visualizer. I define SIMBODY_HOME appropriately  and then the application can again find the visualizer. 
simbody/simbody,354,2015-03-27T00:20:24Z,2015-04-14T21:32:57Z,True,2015-04-14T21:32:57Z,94289ca25a20198351c0414598f384618df4e119,4,14,3ddf3502d9b50c0a75eee846f69104121ab84171 8a7319f54546a9b5920d28e998c1405785e7feca 217042aee01bebaf18b6e2695a4a4ca7e12b9874 9f681c1e0961b260c5ff03cad1867427c7fde8b1 08ad0e5549fb4cf355837b8de77c055fe2c40a17 839be826aa5863cb2d20243a9a9e46673acbb41a f5710d0d7aa3c7d9bb0920c01d89e5acf360f425 51ce76dc1864e0ae76233050d8fb0f3dea7813f7 fa40d8a5a451fd7793a4813f02564996c4b56793 58979cf589aa76fd7992f0e9fad9cb9e059532c0 c0895c322421c65226a1e434012388fe911c126e dd8cef3f9f1773517d2975f4f37e7303af76a112 128d8ed82a310c99b4e8000a0f34ba7ab662685d 97c92fe2a75ef68a5285b64be0ec270803fd92af,,Decorative geom opensim40,This commit adds DecorativeTorus and DecorativeArrow to the set of primitives that can be handled by the Visualizer. As of now the built in visualizer ignores these primitives. The OpenSim GUI/Visualizer which uses the same mechanism/primitives will eventually use these to display forces  torques and WrapObjects. 
simbody/simbody,363,2015-04-21T20:23:08Z,2015-04-21T23:15:56Z,True,2015-04-21T23:15:56Z,a6b1b2703c02ea33f32b01aeb875d78ac6010901,3,1,5f864a4fecfa620173020cffdd1933f86b1f55d9,,Modernize the SimTK Array_ class for C 11 compatibility,Added std::initializer_list construction  move construction  and move assignment. Updated doxygen comments. Added test cases. Updated Changelog.  This PR makes `SimTK::Array_` compatible with the C++11 standard `std::vector`  with the exception of `emplace()` and `emplace_back()` method which still need to be done.  The original motivation for this class was that Microsoft put a bunch of junk in its `std::vector` for "safety" that caused it to run too slowly. I ran timings in VS 2013 to see if that is still true (see the TestArray regression test for the timing code). Array_ ran twice as fast as std::vector (roughly 300ms vs 600ms). I ran the test on gcc 4.8.1 and clang 3.4 on the same machine. No advantage for Array_ there  _but_ all the tests took 1000-1200ms  twice as slow as Microsoft's _bad_ implementation. Not sure what to make of that.  
simbody/simbody,365,2015-04-24T05:52:54Z,2015-04-24T18:03:55Z,True,2015-04-24T18:03:55Z,a45f8a0249a00b68e7161572c38e6418dcdfc2ff,2,1,8f3c1b6f3a03189a70bde58f95b2a85044909ec7,,Add missing emplace and emplace_back methods to Array_ T class and more ,Fixes #364. - Also adds missing move form of `push_back()`. - Switches to using T's move constructor (if available) when resizing an `Array_<T>` when it is growing  rather than copying the elements. - Now works for `Array_<std::unique_ptr<T>>`  which does not have a copy constructor. - Added some more tests; fixed some comments.  The switch to move construction for resizing arrays is potentially a very big performance improvement! I am really liking C++11. 
simbody/simbody,367,2015-04-28T22:49:55Z,2015-04-29T00:07:45Z,True,2015-04-29T00:07:45Z,a69ab387e563bf9d7947459d512b435071c7e80d,2,2,5e1c72418a0e5c9a5898fa60788529dd827d6b88 d2e565ae7dfaa2e0926c79eb21397921100f9256,,Fixed element initializing Matrix constructor failing in Debug builds ,Fixes #366. The Matrix element-initializing constructor like Matrix(2 3  3.14) was failing in Debug builds for any Matrix where all the data is contiguous  due to a broken optimization for that case.  Added test cases.  /cc @aseth1 
simbody/simbody,307,2014-12-20T21:09:23Z,2015-05-15T17:57:08Z,True,2015-05-15T17:57:08Z,0ecae197bc707975c6f3651a3cfa0e965f55c666,3,17,0fb615a3d897f0d5f35cba349c7536f9e2332276 3a36ddf3a091c4a81e924f293a0d5ab89427ed99 9566a97b9d108919a3af9ba5e4a3d4efba027fb1 61347b9aa1c363a0539d40f04401324eb962bb54 db27648b97b6a79bc1acdff7ecfa58ceca2bbbf5 51735da2657cab075de76cde5df0586485e14f0c a5fa6afcd8f6993c58850e72a14ce015b19c47e7 69b9e9e3b09123f5e145b83538078b03da0fff4e be333905d753e095a3652cefb61836c8bf87a02e 133fd6f6d2ae97caf1ff79e90dc3e39500d1fd20 6de1f585238faf1a75b9d686a70476f115f81147 007a9730767b909d2b2504f894930b7b18ee2c22 03bc14f0aa9a2a66586d91bf93beea5d064c0394 ea0a0349611fa1c67dc20eb1d99fbddd17210ac3 dc625373eb2b8cb82dcf21d87328d9a9a5af9660 763aa4e5e1442401914da33654158fbe3c9ff0f2 c6fe1c9bae008ed12791678ca37fa6d4a9823540,,deconstructPathRelativeToSWD,Addresses fixes to deconstructPathname (addresses issue #264). Introduces a new function deconstructPathRelativeToSWD that finds the absolute path to a given path name relative to a specified working directory (swd). 
simbody/simbody,342,2015-02-20T06:23:57Z,2015-02-20T18:36:21Z,True,2015-02-20T18:36:21Z,bc9b3b96ef449dac7abc56fa6089a53a1207d372,1,1,a46fe3ac0897609b674afd5a6171c794011cb836,,This is a patch to Lapack to fix issue 177 64 bit Windows only ,Patches Lapack 3.4.2 (64 bit) to fix the bug discussed in issue #177.  There were two functions where convergence failures incorrectly caused an abort (XERBLA in Lapack-speak). The functions were DLASD6  line 420 and DLASD8 line 282  and the single-precision equivalents. See discussion on Lapack forum: http://icl.cs.utk.edu/lapack-forum/viewtopic.php?f=13&t=4586  This DLL is binary compatible with the previous one  same functions and ordinals. 
simbody/simbody,372,2015-05-15T22:32:10Z,2015-05-26T18:57:15Z,True,2015-05-26T18:57:15Z,8dfdcbee8662d691d08468a900dae9d61d7ef53e,5,3,a3772caae49a3f6ca82c8857db999368744ebf54 493e327f6c7c855a99bdc1ad9c8d149618efde94 d7a60be34f6d6b3cc3e7d6cac51d4567e31e37b5,,Minor follow up mods to Pathname specified working directory additions,I made a few follow-on updates to @carmichaelong's PR #307: - renamed _find_AbsolutePathnameUsingSpecifiedWorkingDirectory() to _get_... for consistency with the other method names; fixed test program to match - fixed doxygen comments so that numbered list formats properly - added missing method getAbsolute_Directory_PathnameUsingSpecifiedWorkingDirectory() - updated copyright and authorship; added Carmichael to the contributors table - updated changelog to mention new pathname methods - some minor additions to comments - fixed addDirectoryOffset() method so that the result always uses the platform-appropriate slashes  Carmichael  please review (other interested parties also welcome). 
simbody/simbody,376,2015-06-02T03:20:30Z,2015-06-02T04:43:18Z,True,2015-06-02T04:43:18Z,6117c11dba4e670a859b8c833443b2b2f38b64b4,2,1,f3302649030f7079dcdb0d7f439099b55839d467,,Attempt to create v3 5 nuget package ,This is intended to be used for testing the opensim32 repo.  Related to https://github.com/opensim-org/opensim32/issues/19 
simbody/simbody,352,2015-03-25T17:55:32Z,2015-06-03T03:50:22Z,True,2015-06-03T03:50:22Z,6dc491c0ef7106c2997a6af8db2189aef85d0aba,2,3,ead9ea4525839747bf091b3a1fe77c1eb3d92e2a 20af744ee778f325d859f14942e0e0cada013a3b 33eb49fcf7b1533af14de8e7e24de346bcbf4c29,,Fix for issue 350,For main and one other make files  (also removed trailing whitespace) 
simbody/simbody,386,2015-06-04T22:48:22Z,2015-06-04T23:24:04Z,True,2015-06-04T23:24:04Z,51a7854c6f4d46f8df74c8301a79873063456149,2,1,a447d76d6c9e4e3efa519ae860a31fd15b2c0608,, c r poly cpp fabs std abs ,Fixes #384  
simbody/simbody,385,2015-06-04T21:54:53Z,2015-06-05T00:26:25Z,True,2015-06-05T00:26:25Z,c600824075b1c29309acc433a2ae9cc9e0cedab3,1,2,6d53a43b28585beec1ab270d6eca56139452d599 92dd9db78d7bf6c68e513ebdf1532bc061e4e9eb,,Remove cmake dev warning about OSX RPATH cmp0042 ,This PR removes the following cmake warning on osx:  ``` CMake Warning (dev):    Policy CMP0042 is not set: MACOSX_RPATH is enabled by default.  Run "cmake    --help-policy CMP0042" for policy details.  Use the cmake_policy command to    set the policy and suppress this warning.      MACOSX_RPATH is not specified for the following targets:       SimTKcommon     SimTKmath     SimTKsimbody    This warning is for project developers.  Use -Wno-dev to suppress it.  ```  Before this PR gets merged  I want to see if travis gives an error about policy 0042 in cmake prior to v3.0  since it wasn't defined before v3.0. 
simbody/simbody,383,2015-06-04T04:14:30Z,2015-06-05T15:50:00Z,True,2015-06-05T15:50:00Z,54794a652918299c4690dbc49eed35ed1ce35d83,1,3,88b940b003250acc19f823df0f5cd5946b20e1d1 ac3dab4346453857adbc8ce688efc6627b42cac2 4702d76e811ef9942df3346f94a196c38ca569c9,,Clean up document and modernize AbstractValue and Value T code,I cleaned up this code in the develop-4.0 branch; this PR copies the cleaned-up code from there.   The reason is that @klshrinidhi wants to make some changes to it (see PR #382) but the master branch code is very old and ugly so it would be better to add the changes to this version instead.  The functionality and API are unchanged but now there is actually some doxygen to say what each method is supposed to do. 
simbody/simbody,382,2015-06-04T00:52:05Z,2015-06-05T16:51:28Z,False,none,b3b8f75bfb51927610b7c71945037769c2feca4c,1,3,4aadd7b15d6217812f8e41fc908cc7c05bfe6aa0 629294f93a0ad019b61ff6c0773755e169db23a5 1a27757e33c0c26f96e3b2d785d45c797849af1f,,Edit the Type Erasure classes to allow for retrieving the stored type erase object ,- Add two methods that use the type information provided by caller to 'cast' the abstract type the correct concrete type. - Add a move constructor to the concrete class.  This modification will allow us create containers of _heterogeneous_ types. We erase the original type of the object by storing it in Value class and use a reference/pointer to the AbstractValue class in the containers. The original object(properly typed) can be retrieved through the added methods. 
simbody/simbody,362,2015-04-20T01:23:15Z,2015-06-07T01:48:56Z,False,none,b15a23bb442d07ff4680ccfd3fee03d09c7e081c,1,2,ddfcb46c4e65daea8d1f451c3f9045ec463a906d e673904f1a1774c74a0775ee0e6278752748aca1,, travis Use container based infra and ccache ,This should speed up gcc builds from 6 minutes to 2 minutes  and clang builds from 4 minutes to 2 minutes.  I'm not sure what will happen to OSX builds. Let's see what happens when Travis tests the PR. 
simbody/simbody,390,2015-06-08T03:02:49Z,2015-06-08T16:37:52Z,True,2015-06-08T16:37:52Z,597079b4a64172d402e85d594ab6d7db019453bd,1,2,4a379bab6d8aa4a6572421037e39ad00e596d1f3 a2d310cedefcbcc7aaaeb5236ead088657c64316,,Remove check of reference against nullptr ,Fixes #388. 
simbody/simbody,358,2015-04-07T00:29:15Z,2015-06-09T19:40:11Z,True,2015-06-09T19:40:11Z,a6e34e788b92aaaf526e5a016fa214cfed0eca2a,2,3,7fa84f2a6703642f232e959fdfda345721ba0ba4 cb598f30b22c59b3ef939ca7a2fe7395bd4bf2bc ebf320eee6a5fea87bc75111f0938fa3e20da196,,Improve creation of symlink from docs to lib installation folder on UNIX systems,As mentioned in #356  right now the symbolic link between the examples docs directory and the libexec directory that contains example binaries is wrong when the installation prefix is changes after the first CMake pass. This PR addresses this issue creating the symlink at installation time and without the need for a temporary symlink in the build directory. Also  the symlink is a relative path  in accordance to https://www.debian.org/doc/debian-policy/ch-files.html#s10.5 (please let me know if I am following the wrong policy :confused: ) 
simbody/simbody,356,2015-04-03T07:06:27Z,2015-06-09T22:19:00Z,True,2015-06-09T22:19:00Z,7ffb800ad985a19dde951f7a15fa776c054f1ea7,13,7,811503820f8949954c00b370da6e0aa0e7f500fe a295d4927a08ac412cacc07ef4abcf6b23e246ff cda458466c9817c019e9fb74367de7852721400b 4f3da69f0c8df38ed3bf8813c32d988ac31f890d 8f3f0fa700c4c35d4f64149145361903407274e7 bf85480fc773018b4565ccd6e53c2fe79eb677c8 0396c5b8b84ebd8e2dd19bcb97eda039e116f140,,Export Simbody targets in SimbodyConfig cmake files,Currently  SimbodyConfig.cmake is an adaptation of FindSimbody.cmake  and libraries are found using the `find_library` command. With this PR  libraries are _exported_ so that downstream packages can import them (along with their properties) through SimbodyConfig.cmake.  Tested with OpenSim (master) compilation on Windows (VS2013  64bit) and Ubuntu 14.04  but it's hard to tell if this can break other downstream packages' build :confused:   **Note1**: There are also some pure-cleanup commits  hope they don't create too much confusion  **Note2**: I was trying also to get rid of the need for the deprecated `link_directories` command  but I cannot find a way to trick CMake into treating as targets the blas/lapack/pthread libraries that are provided as binaries on Windows :confounded:  
simbody/simbody,393,2015-06-13T16:33:13Z,2015-06-13T19:13:59Z,True,2015-06-13T19:13:59Z,d1e3e53f25a914759e276b6214ecafffe0dc58b1,1,1,2c9f2c71f7e46519f42f803e6c90a8991c934155,, doxygen Remove link for Force ,
simbody/simbody,394,2015-06-13T23:46:57Z,2015-06-14T00:17:10Z,True,2015-06-14T00:17:10Z,6ce058fefa171887af2a247703db9a70f40be474,3,1,a075deaafb0b70ccc2fc16f264b8d27b26476ff5,,A few changes needed to get Simbody through Visual Studio 2015,The main issue is that Microsoft added a definition of "struct timespec" to time.h which conflicted with the one we were defining.  There is a potential problem with timespec-related functions in our fake pthread implemention since the new Microsoft definition isn't identical to the one in the pthread library. I'm not sure that we are using those anywhere however. 
simbody/simbody,395,2015-06-14T00:58:14Z,2015-06-14T01:22:23Z,True,2015-06-14T01:22:23Z,c74b3b8d08b25b750c3e9a3aa115de2d3f53d9f6,3,1,3c60a459cf4220ecb6040effacd8a437375d79f5,,Minor modifications to get simbody 3 5 to compile with Visual Studio 2015 ,The main issue is that Microsoft added a definition of "struct timespec" to time.h which conflicted with the one we were defining.  There is a potential problem with timespec-related functions in our fake pthread implemention since the new Microsoft definition isn't identical to the one in the pthread library. I'm not sure that we are using those anywhere however.  Same as master branch PR #394 except attempts to preserve C++03 compatibility. 
simbody/simbody,397,2015-06-14T20:19:31Z,2015-06-14T20:28:45Z,True,2015-06-14T20:28:45Z,267a7dafbe961b48e80829c594711bfc85662933,3,2,1ca8447baa5157393577705dab7b93b9938508fe 67e60710051d945016c3d280fad658fd1c9a1bb2,,Fix some VS2015 warnings from simbody3 5 branch ,See PR #396. 
simbody/simbody,396,2015-06-14T19:46:45Z,2015-06-14T21:12:05Z,True,2015-06-14T21:12:05Z,97a0fec026b5ce3121f1e58788c78973e47ba97b,3,2,aeb7de8937a80d15828e7e71f1c13863c52c010f f74188f5a91269687324786edde0d6b7d1dd0d6d,,Get rid of some warnings detected by VS2015 at warning level 4,This fixes a few warnings  including those mentioned by @chrisdembia in opensim-org/opensim32#19  but there are many more. This is warning free on level 3. 
simbody/simbody,398,2015-06-14T23:15:20Z,2015-06-14T23:34:18Z,True,2015-06-14T23:34:18Z,2dcb6aefd39a17ee6491baf109634db7604f6b6e,5,2,c1fcca8c05bbdd9ed54a86a51ee1b2e78342f485 498d8523deab7cee1346540502a38bdc3c409957,,Backport SpatialInertia shift fix to simbody 3 5 3,See issue #334. 
simbody/simbody,399,2015-06-14T23:54:02Z,2015-06-15T00:56:36Z,True,2015-06-15T00:56:36Z,632b64f659a96565d2d68fb8b5de56594308deaa,2,3,25e8f08e806a0b34713b67f3f6a1de6950181a06 434c88c23a5045f2166619164840882a5f8bcedb cbd7e1f374075d1b127a5eb8b439fa0b1da56b2a,,Backport VectorIterator assignment fix to Simbody 3 5 3,See issue #349. 
simbody/simbody,392,2015-06-13T01:31:56Z,2015-06-15T06:47:39Z,False,none,6f5df609958d49c35ec4a2affebe2e270fc5e726,2,16,22b176d89e760c3c3ead8edf7d953f7b47003b1f 0ef65e2fdc8a63598799f378df17d06996e5de30 3296ffebba3791bb7d43eff1b0de4dd66e2ff06f 6a719d1c60e27ddc7bc446d163acb842e3fed4ce d830b194bd99b2408e8b025195665d83b80f4d02 4af4ad742f35f7a8242e97e73d8c8a92049824dd 8f51e70c9cdb5cac220781f2e5f4e30a505c9cd3 ca6e9c39f2e55038fc4c8b84abb5043cb2d8bfb6 1aefaa390c476bfde4b0d9cbb95264cae6a1acc5 8fcb88c5a508805b36406f7e6f0fb9b1c5de3922 710ddcd2bb7bbbf9f91c793821ce05908f710d4d 7a25b2e1b5a9c029d515cbc3537a6201c20e7e4e 70048b76e92c9ab42a3f14030f8a8c04420d6d08 c5ecabedc44c09b4d101f4c712b020ca95fd618e eda4af13dbf297ffe3aec8ea87633814bda9374e c5cf01f1f7506ece01bfcae7f20b7f05d74c62c4,, appveyor Try using vs2015 ,
simbody/simbody,402,2015-06-18T06:00:34Z,2015-06-18T20:04:14Z,True,2015-06-18T20:04:14Z,2733e4da5ae87a40e81d6ee89bbafd318922f315,40,1,fb861630b598ce76e3c58607285eda2f73e40bfb,,Descreamify cmake commands ,Performed with this bash script:  ``` for file in $(find . -type f -name '*\.cmake' -o -name '*\CMakeLists.txt' -o -name '*\.ctest') do     echo "Processing file [$file]"     for cmd in $(cmake --help-command-list)     do         perl -pi.back -e "s/${cmd}\(/${cmd}\(/gi" $file         perl -pi.back -e "s/${cmd} \(/${cmd}\(/gi" $file     done done ```  All changes were (quickly) manually inspected. 
simbody/simbody,403,2015-06-19T20:56:00Z,2015-06-19T22:05:15Z,True,2015-06-19T22:05:15Z,93a3d8a8bffb2907ec3a42704ae2ec3b2a919b76,4,1,07dfff264b0ebff04f73c8350e01e0bc1c36a6ce,,Make Array_ T copy more strict for element type mismatch,The Array_ class supports creating an Array_<T> from an Array_<T2>. It was allowing this as long as there is a constructor T(T2) that works  but that is too generous. It should only work if there is an _implicit_ conversion like that. The existing behavior was causing some unexpected copying to occur due to inadvertent type mismatches.  This change uses `static_assert` and `std::is_assignable` to prevent compilation in the case that there is no T2 to T implicit conversion.  This PR also fixes two Array_ usage bugs caught by this change. 
simbody/simbody,404,2015-06-24T18:14:05Z,2015-06-24T19:03:52Z,True,2015-06-24T19:03:52Z,fc0e095f2ebe11d753afe8661940803a989cbf54,1,1,fd975ab1791027386609b4389a9ee796d6507dbb,,Replace some asserts with friendlier range check messages,User attempts to get MobilizedBody and Constraint objects with out-of-range indices were being policed only by `assert()` macros. This PR replaces them with `SimTK_INDEXCHECK` macro that provides a better message and uses the `std::exception` mechanism.  These are still only checked in Debug builds. 
simbody/simbody,405,2015-06-29T00:41:37Z,2015-06-29T20:41:37Z,True,2015-06-29T20:41:37Z,20ebc26616015448b5f914641aed82e51950924a,4,2,4ef4134f34b4232d47a4fe2be5929faa679deb74 1a3d1875330d765bb4e47c0b9795da69d029f95c,,Add CloneOnWritePtr smart pointer class,This PR backports the `CloneOnWritePtr` smart pointer from the Simbody 4.0 development branch. This is applicable to any class that has a `clone()` method and provides ordinary  non-shared copy and assignment functionality (like `ClonePtr`) but defers the actual copying operation until someone asks for mutable (non-const) access. So the object is shared for multiple readers  but anyone can write on it without affecting any other user because they will magically get their own just-in-time copy.  The API is intended to come as close as possible to the C++11 APIs for `std::unique_ptr` and `std::shared_ptr`; `CloneOnWritePtr` borrows some functionality from each. Note that the older `ClonePtr` API is somewhat different -- I will update it to match this one after this is reviewed.  /cc @klshrinidhi would you review this  please? (other interested parties welcome too!) 
simbody/simbody,407,2015-07-01T05:37:12Z,2015-07-01T19:32:38Z,True,2015-07-01T19:32:38Z,162be416ee4f066a5485a36334bce2562e8abc68,22,3,814db57a7a7603d2f956a3b429f1ad68386d1eef cf37d43914626640cc5676534fa3e0b3a4239ae4 47e6ee4abbfe620967aa9058a568901281ff33a6,,Add DEPRECATED_14 macro,This PR adds a `DEPRECATED_14("message")` macro to be used until we can require C++14 everywhere. For now it expands to the standard `[[deprecated("message")]]` when compiled with C++14 but otherwise expands into non-standard compiler-specific hacks that work the same way.  This required turning off general suppression of "deprecated" warnings in VC++  replacing with local deprecation where necessary. That may affect users of Simbody (possibly including OpenSim)  if they are using functions that VC++ deems (incorrectly) to have been deprecated  such as `sprintf()`  `getenv()`  and `ctime()`  and were counting on Simbody to silence those warnings.  I also used the new macro to deprecate `ClonePtr::getPtr()` and `updPtr()` in favor of more C++11-like `get()` and `upd()`. 
simbody/simbody,408,2015-07-01T17:21:32Z,2015-07-01T20:06:58Z,True,2015-07-01T20:06:58Z,138b0b4e040b10dd05389526359825c134c54d8b,1,3,fba02cf9f51247f5a884747313646c3c49871dca 471e425519727384c4f1a90c8ffd1cb489397ba1 5c430551ada46852d73038941e383dff879079eb,,Updated doxygen for SimbodyMatterSubsystem getNumBodies ,Doxygen update in SimbodyMatterSubsystem function getNumBodies():  Sherm and I discussed an update to the doxygen for the function SimbodyMatterSubsystem::getNumBodies() which I found confusing. Now the documentation includes an example so that it is clear that getNumBodies() counts ground as the 1st body  and continues from there. Thus getNumBodies() will return 2 when called on a planar pendulum. It is also mentioned that this counting convention differs from the MobilizedBodyIndex (where Ground is at MobilizedBodyIndex(0)) to prevent any confusion. 
simbody/simbody,410,2015-07-12T00:53:28Z,2015-07-14T04:23:03Z,True,2015-07-14T04:23:03Z,27c29fab3e4c584d53c6c3afd0f3b84b44218eb3,7,4,a6c57f78dec97bb1531c6abe4b065789692bd3bf f250356b6fe4b115f6321b27c840842f9d80db87 67a950ea31ce148f7f31d02acdbf0c8fd69f5850 3008028bb51deab8776500cc34837779aef4bc23,,Improve Simbody s smart pointers for consistency and compatibility,Improve smart pointers for consistency with each other and with C++11's smart pointers.  Added NOEXCEPT_11 define to allow "noexcept" specification to compile with VS2013.  Moved namespace-scope comparison functions and swap() overloads to SimTK namespace.  Fixes issue #328 
simbody/simbody,411,2015-07-21T18:16:11Z,2015-07-21T23:11:27Z,False,none,e0eee5ff4b3d98731675080552226ad9a9d532af,15,14,bf7db2f170369e8ee2292c7dfc63aff860f9e3bb ccce1abf4315dc30e2732d19e80b1eb6fc15063d bf3859fdf0c934a651a6312de2eac5b6e1d56305 ce43b51734ec1b905604a616b5a5b92114dd1106 86e12dd14d6b8c928965160c9218bb62e845a96c ba0fa89ffd2e606bbd461e192c1b125232b23f1e c0f4653371c1ee94e0dfd513592ed190bf71628a 72e5f31defb363f59344a030be175368016f952c eb6ff032f3bde292260069f2845b3e8ef0ee8711 0677c9a316af9660176e0f004896ec1b25309632 70e2a2afb9d8db74e2bd4d628c01e2d6b2bb74fc f18d25481f6e567887b891fe46d8b9d0283edf06 e8d9bd391e372745023442d9bc21bc138fcafff4 f58ad8f56962d4441436cc63c892f65f834f8a75,,Implemented Parallel Forces Changes to ParallelExecutor Class,
simbody/simbody,412,2015-07-21T23:12:03Z,2015-07-22T04:06:10Z,False,none,81d7253ada215ecdda3ba1babb592636c09c7a2f,19,4,111cc4c5281dedb4052f9545899a13bd69d99be5 b4c50cf8d8772bf12672ed813199710429b3c9c1 87888a516ac149b0db46a7f760dd434d4699b8b7 f29a484ef43107222f4601615bace7943abda60a,,Implemented Parallel Forces Changes to ParallelExecutor Class,Passes all tests 
simbody/simbody,413,2015-07-22T05:47:38Z,2015-07-22T16:43:50Z,False,none,none,887,1,44e4d2e0d27d69727442bbea6cf871c36d4de347,,Whitespace,
simbody/simbody,416,2015-07-27T17:36:54Z,2015-07-27T21:53:59Z,True,2015-07-27T21:53:59Z,955025e6bca34d8f61f71ed7b72cca62f2391c1b,4,1,c673b23ef198efd5c1ea7a6ec54f5f24ca80ff79,enhancement@OpenSim,Make SimTK Function_ objects cloneable and assignable,Some minor improvements to the `SimTK::Function_<T>` classes: - Added `clone()` method to `Function_` base class and implemented it for Simbody-defined concrete Function classes. - Made concrete Function members non-const to permit assignment. - Modified `Function_<T>::Step` to allow changing its parameters after construction.  @chrisdembia please review. 
simbody/simbody,417,2015-07-28T00:08:01Z,2015-07-28T16:27:37Z,True,2015-07-28T16:27:37Z,cc41aa58f14314b95623d91779afa6e8587ef8ab,5,4,b52cc1a829b99cf778a905c35def447c467d01a1 78d6e7e8b297e0100339d2d6caca64553e76f736 29e1443df9de708043cf7fff32b1b85824b26f50 03081a0719ebfe92131f5d0a87f2f4ad701f4393,enhancement@OpenSim,Add NullOnCopyUniquePtr and regression tests,Added smart pointer `SimTK::NullOnCopyUniquePtr` which is the same as `std::unique_ptr` except that it adds copy construction and copy assignment that leave the  target null. This can be used for owned heap-allocated objects that are "local" in the sense that they should not be copied along with their owner. That allows use of compiler-generated default copy construction and copy assignment for the owning class.  
simbody/simbody,419,2015-07-28T18:49:15Z,2015-07-28T19:02:19Z,True,2015-07-28T19:02:19Z,88c37a8811dd8a8583fa6b08787a39af9d8dd244,2,1,9578d0793fd71e0de0047f3e8061952b056afcb2,,Switch back to build with VS2013,Added some more constructors to NullOnCopyUniquePtr rather than inheriting them  so we can continue to build with VS2013.  This should allow the new smart pointer from PR #417 to continue to work   but with VS2013.  /cc @aymanhab @klshrinidhi @chrisdembia  
simbody/simbody,421,2015-08-03T18:19:08Z,2015-08-05T17:26:53Z,False,none,b4cc175662987f365f711d3307938742d528e993,1,3,ddfcb46c4e65daea8d1f451c3f9045ec463a906d e673904f1a1774c74a0775ee0e6278752748aca1 aaaa12b42128f3a8c60b1a8197f0ed240f043831,, travis Use Travis CI s container based infrastructure,I think Travis-CI is trying to get people to move to their container-based infrastructure; build times should be faster there (guaranteed 2 processors and 4 GB RAM compared to load-balanced 1.5 processors and 3 GB RAM).  This PR does _not_ contain ccache'ing of the binary objects. 
simbody/simbody,423,2015-08-04T17:36:14Z,2015-08-05T17:49:40Z,True,2015-08-05T17:49:40Z,16e6ceeca06cfbf7a78b1e01a4b3ba4545528ad3,2,2,7f1132a1935f02b5e1c1d5f737c0560472e50371 c7ce015f6005a3472631b9769e3a3dd663470478,,Fix ThreadLocal so it doesn t try to destruct thread objects from the main thread,Fixes #422. Addresses a problem discovered during review of PR #414.  @thomasklau  @chrisdembia please review. I marked the class as deprecated in the class documentation but I didn't make it generate warnings. That should wait until Thomas reimplements it in terms of `thread_local` and then we can replace all uses of it in Simbody to avoid those warnings.  I got rid of all the unnecessary "static" infrastructure the class had before. 
simbody/simbody,414,2015-07-23T20:19:41Z,2015-08-06T04:24:07Z,True,2015-08-06T04:24:07Z,469032e8c795b8941b5d20b46fef70a51e7c96f5,14,36,2dc3a135fed8df6016b02edf83a2a57b02dad0c2 8906a6971359a39ae1461387127f67a9dc990717 89a6fccde6a90f197be06999eb8fd11696b32bc1 e589794aba0502b537ac786cf5f60a8fe8ae3eef 15adc8f939a6e37a3b2421fb36546f0d61effa51 afcd4e6572bb11f26db6d7f8b8da1919822a1cde 0ee0495409a44472b61c962e212786e435ef4ef0 0be365e82b45a9b8794955954ac75e6b35a6a0f7 695cc8ca57059f494070e32155bc53388ae87963 5ac4c5ea19564ff1591b634e49cade5f51ac8be1 78d673bf637e32b127f5a7984566b3dd7d0a7e0c 2a04af93ef2b442fe235bfd669d4c2b56c6f2bcf 94429145b10418f47bc9da1a06a294c5d063086b bb8f14427ac55e665585ad42f87a6c013bf79ed5 806ad6d563cba869508d7bd26c04bf81d372386d efd641f19b41b37acd9c7f7800f2aae761ceb789 2812f873672af9368d19a976db5dccc68bae4881 c4d6818081b047694975be99c3f14c94aa24e6cb 16fe528c7ce29d1d2c38bef9261937f5a02bd397 f0794a27371b20ca92e30ee62c6ced6c7aa83215 040ae3019d07be7731e38c5ec5d872a19f2d912a 4a49c6719bad594fe3d10026c817f299737f7cfd 680a46260c3f1c1c8c12ac397a94e75c01334760 7ceb8af7807b93cd1d6211e7f66d6c2b12a1b2c4 48a1f229f30dbcf1917a834092c8915048f2aa68 c0d1c7f9cae96259dc9be150cb5f77b536e56299 b60ec06046fb9594b3eefd717cca65088adde5cc 63b2f5ffbec4dd132663679593734068ac33b8d7 15b176732502fba2577d8f94bf04310558c21ea8 7e5760fccbf6bb968552a3fe164a302659a05982 234874544db20cb6fe44c340eeeef76ecb86c83e b375dcb5a6ff692b1fdeed3e9da65fd237d3cbe5 2afd43fd0fc2e03876e6ad2c6081aafb69d670c6 1ff28bc72dfc59e2dc7ee4fd531908594d75140d bc1801ae5565f132d0fefea0f3cfe8aaff102786 82aa0768ab8dbc78933a8e9a620e49174ea4b0c5,,Implemented Parallel Forces Changes to ParallelExecutor Class,
simbody/simbody,425,2015-08-11T04:48:54Z,2015-08-11T15:58:27Z,True,2015-08-11T15:58:27Z,95dcbf533c7d16284cf592e182ccb6dc2327b7e9,2,1,f989aff4bec8999a9fb5936527ee3da159ed3a47,,Update appveyor and README for vs2015 ,Let's see if this works! 
simbody/simbody,426,2015-08-13T05:19:49Z,2015-08-14T23:04:32Z,True,2015-08-14T23:04:32Z,ec22519798cb6d390d7c9d39a8f7d00cbdd5bb5c,7,10,7fa09810372595c546190a5a44b9e5ddcd356632 7c5f27624cd6225306bfb9442c83cdcec693496a 1a2eb42e57fcd78e5d3beaf9227ac1ce875d92ee b00c170fc8564ed3f9732a48393078b8a19159dd 43aa572761400056e81369906563b5f8c850b319 5efb7de238e1d70582170275409188545bbea812 8f30814da38864938a2d3bb917da2abdf8ad1409 f6c748bb45ab5c71d766510cd4bfa94fec82f34b c51473b5a1435968f142bec6b5d9748eee58f2f0 ef324bbfd414a64c30c667450c5cb7ad5d118bb9,,Add ResetOnCopy T and ReinitOnCopy T mixins,Add ResetOnCopy<T> and ReinitOnCopy<T> mixins. These are used on data members to provide resetting to default values on copy construction or copy assignment  or reinitialization to specified values. These can be used on built-in types  pointers  containers  smart pointers  Simbody resource index objects  and almost anything else. (I don't know how to make them work with C array types though.)  Also: - Added a clear() method to unique index types. - Added templates that define all relational operators when given only operator==() and operator<(). 
simbody/simbody,428,2015-08-21T03:26:12Z,2015-08-25T00:31:53Z,True,2015-08-25T00:31:52Z,80dbcdf00136d9ee04aea1f725277d3f7c82fc50,21,13,769754826679baec00eb6c3d9838a41181c023fc 214042c9885f6b407531d351799c1781f10ec742 826a81d3e56132e0f33b89bc678b879091aedaed 956e6d3878f1dbe00e16c9412b6f7b91758e8603 3909fcfe462898835523138253a4a59761c7460c e1764e8d4d8f9f7dcc0faa4582aed41067d499b1 d0f372cd8581cd4aac20e8c4e81ba9d487cb0c1e 1e768e06033bf6f36cba58805911786aee50af94 9a256436b9f023f945ddab93ff1e7c2b526d3c93 59998efa24b7510c2069f73a6aa75359f7c1d9a6 8231df5852b59a42e2f82d81436924d3018bd39b 09292239fe4b0dd814f5f5ee68a71e94b836d691 7113594307ccbb22caad2b2b45bc3f028316cd74,,Allow kinematics evaluation separate from position and velocity stages,This PR adds some flexibility to make state cache entries have more subtle dependencies than just realization stages  then uses that new capability to allow early evaluation and time independence of position and velocity kinematics (that is  mapping generalized coordinates to spatial pose and generalized speeds to spatial velocities).  Now changing time does not invalidate kinematics  and only `Stage::Instance` is required for position kinematics. Velocity kinematics requires `Stage::Instance` plus already-realized position kinematics. New (optional) methods `realizePositionKinematics()` and `realizeVelocityKinematics()` can be used to get these quantities without having to wait until `Stage::Position` or `Stage::Velocity` are done.   Also added move construction and move assignment for State objects.  Fixes #185. Fixes #188. Will address related #370 (articulated body inertias) in a separate PR. 
simbody/simbody,431,2015-08-25T04:20:20Z,2015-08-25T04:37:42Z,True,2015-08-25T04:37:42Z,fc8ded8bc5fe834e419334f555610a9beb3ad1b2,102,3,146ed941d55ae2a4b593505227032f3ae1b72c03 d9aa56e4de640bbdac87ce7dbcf6d3fde664447a ef02dfd3ca8bf4dd8210d5f958a35f7b51754aa8,,Fix common typos from tbeu with manual merge ,This is just PR #429 from @tbeu but I had to manually merge it to fix a conflict. 
simbody/simbody,429,2015-08-21T08:42:13Z,2015-08-25T04:37:44Z,True,2015-08-25T04:37:44Z,965849310c782b677d6527247888acf18816b338,102,1,146ed941d55ae2a4b593505227032f3ae1b72c03,,Fix common typos,Detected by https://github.com/vlajos/misspell_fixer 
simbody/simbody,427,2015-08-14T23:45:01Z,2015-09-03T03:00:24Z,True,2015-09-03T03:00:24Z,a39ef076853ff56808a3a74978525a71a3941fa9,6,3,9d055f7098a3ca21f5cc5536f7a27282e36a79d3 f8e1df4b789d619b0ad7bb6672e886cba28eac87 7923e4e6af6121e64086acdef951f491b2e275e8,,Remove ill conceived NullOnCopyUniquePtr class ,This backs out the `NullOnCopyUniquePtr<T>` class that was added in PRs #417 and #419. It is not needed now since PR #426 provided `ResetOnCopy<unique_ptr<T>>` which does the same thing in a better way.  Don't merge this until OpenSim switches to the new class. 
simbody/simbody,189,2014-07-11T19:28:19Z,2015-09-03T04:03:06Z,False,none,b1d9dbf91f85a3347ea4feffb272acdf4b80886c,8,6,7e1bebd6885fef20c04fd78d3f619650a1f792e4 cf9934cf154ce4f80e091c699b643ce941c5b338 fce227969ec49e41ae04f9c87f978c1e89f9fe1a b478002bf000a0a41e5ecab1c8472bc6512d6276 21fb95b32e76e10d0f7399d6dce32b1aef01dbc1 773edb35ae8442dc53569abe587f78412093a5ac,, WIP Parallel force calculation,Nabeel  you mentioned there's some refactoring you want to do before merging this. Could you list what that is? I'd be happy to help out. 
simbody/simbody,432,2015-09-02T22:28:18Z,2015-09-03T04:48:43Z,True,2015-09-03T04:48:43Z,072218930f9bf4cf977f48a3b2d6de315ac62574,14,7,bb1137462ac0b42ebfbd76aeb2cab29b5d08bd8f 2b13c9ad2d4b3eb6487805e7899a4d7a0689c1dd 9829c636144eba615d5a39849a635b81d3bc8cef c12503798a9a353c083f1db4ca851da78d13fcad ec2e3716c5859daf437635a6d0e75acad80cfc56 17c6bd999655e60f8ea226f86f24aec824a1a4d3 3bcad45924922a2e06c46fe35491b20095b0204d,,Allow state cache entries to specify explicit prerequisites including tree kinematics ,This is a complete do-over of PR #428 (that fixed issues #185 and #188). The method I used there turned out not to be general enough to handle the needs of issue #370 and anticipated rigid contact needs. It was also very difficult to use correctly. So I tossed that out and implemented what I think is a much better method. (This still doesn't deal with issue #370's articulated body inertias but that will now be a small follow-up PR.)  In this implementation  I have added the concept of "prerequisites" for cache entries  and each cache entry has a boolean `isUpToDateWithPrerequisites` (initially false). Prerequisites can be any state variable (q u z or discrete) and any "earlier" cache entry. Now every state variable and cache entry maintains a `DependentsList` that records all the cache entries that have declared that state variable or cache entry as a prerequisite. Whenever a state variable is modified  or a cache entry is invalidated  all the dependents are notified (recursively) so that all dependents get their `isUpToDateWithPrerequisites` flags set to false. When a cache entry is explicitly marked up to date  the flag gets set true.  The new scheme has better performance properties than the old one. In particular it is optimized for speed of access  with costs pushed to the point where variables are updated rather than when cache entries are accessed  which happens _much_ more often. There is much less code involved in checking whether a cache entry is up to date  and I used some force-inlines and examined the VS2015 generated assembly code to make sure that `getCacheEntry()` is entirely inlined.  This was much trickier to implement that the previous hack. I added a lot of testing and debugging infrastructure: "advanced" methods in State that are useful for testing; detailed value version checking that only occurs in Debug builds; and a bunch of test cases for esoteric behavior.   This code ought to be broken up now into separate files but I don't want to do that yet because I have to merge this with my Simbody 4.0 branch which also has State changes.  If anyone is willing to take another look at some or all of this for review  please do.  (@klshrinidhi  in case you're feeling bad about DataTable code that got implemented beautifully and then tossed: I had to completely flush PR #428's code _after_ it got reviewed and merged :cry:. Oh well. I like the new code better and I did learn some things from the earlier attempt.) 
simbody/simbody,433,2015-09-04T21:33:25Z,2015-09-07T18:49:15Z,True,2015-09-07T18:49:15Z,0aad6f9f2999802620db4034f027de63f8504a5e,8,2,c14e3295e76775154f2a1016e387d596c89ba24c ba8ef3dd67c359d84253114d848c9d6c8f403e04,,Changes to allow swig 3 0 5 to process certain Simbody headers ,The changes I made here are based on discussions in https://github.com/opensim-org/opensim-core/issues/592.  I chose to remove the template class typedefs necessary  but I left the ones that I didn't need to change (with perhaps 1 or 2 exceptions). Also  I chose _not_ to remove any typedefs for Mat.h; instead I put the typedefs in the public section. I justify this because Vec.h has similar typedefs that are public. By making only the necessary changes  I hope to have minimized the chance of introducing a bug.  Also  for computation within enums  I chose to use `#ifndef SWIG` rather than resorting to a `constexpr` function in order to make sure the C++ code remains clear and that I don't introduce a bug.  I've tested OpenSim wrapping against these changes  and both the python and java wrapping compile (and the python tests and testContext both pass). You can see my changes to OpenSim here: https://github.com/opensim-org/opensim-core/tree/swig-simtk 
simbody/simbody,437,2015-09-09T21:12:46Z,2015-09-09T21:29:32Z,True,2015-09-09T21:29:32Z,52df502b83b9e610846854b558772d8ba787c48a,1,1,31a6d6b17d117dcc2a6acf8e266e019258d152fe,, README Noted remedy if VS installed without C ,It's surprising that Visual Studio 2015 does not support C++ by default. I selected _Typical_ during the install  which is what I would expect most people to do. 
simbody/simbody,435,2015-09-09T04:34:26Z,2015-09-10T02:51:16Z,True,2015-09-10T02:51:16Z,5c1a13ed6bef4fca009e228cc892df2634cb1c3c,15,5,a3786d2f19c86e19d31008984a72cbb7fecf3e9a d8e222013f4069b50c67eba58a0bfaf019278496 bda0841a45abf166d14d05fd24491e734aae2371 bf24f5d7350f45abb5d08507f1ba5ef872545294 04a3223bff860efc6ed77bce8fbb4d89059ab251,,Defer calculation of articulated body inertias until Acceleration stage,This is a follow-on to PR #432 that uses the new facility introduced there to fix the problem described in issue #370  and opensim-org/opensim-core#429. Now a model with zero mass properties can be realized to `Stage::Dynamics` without causing a singular mass matrix error; that error will not occur unless the model is realized to `Stage::Acceleration` where the mass matrix _must_ be inverted to calculate accelerations.  Three more cache entries now use the "prerequisites" feature:  - CompositeBodyInertias (depends on position kinematics from PR #432; never valid unless explicitly requested)   - ArticulatedBodyInertias (also depends on position kinematics; automatically valid at `Stage::Acceleration`)  and  - ArticulatedBodyVelocity (depends on velocity kinematics from PR #432; automatically valid at `Stage::Acceleration`.   [Technical note: So in addition to the last two being deferred to `Stage::Acceleration`  all three are now correctly understood as time-independent; changing time does not invalidate them. Any of them can be realized any time after `Stage::Instance`.]  Reviewers: you can probably ignore the changes to `RigidBodyNode_...` files. Those were very ugly and I couldn't resist cleaning them up. The real changes there are just to pass in the right cache entries for the data that got moved around. It might make sense to start with the test cases I added to the now inadequately-named TestMassMatrix regression.  /cc @chrisdembia  @tkuchida  @aymanhab  @aseth1 
simbody/simbody,434,2015-09-05T00:41:08Z,2015-09-10T20:19:05Z,False,none,8180ebbdd75a31bc89075168ea772640132801dc,197,1,dcfff2fd4135b67ff7de4069f69a7b754409b3df,,Add in missing overrides ,I used clang-modernize to do this.  @sherm1 do you want me to remove third party code from the changes (IpOpt  tinyxml  is CPodes third party?)? 
simbody/simbody,438,2015-09-10T20:19:21Z,2015-09-10T21:10:53Z,True,2015-09-10T21:10:53Z,493705d8b55ad4a3fa0d29bc947ac03691578375,194,1,d75d24cbe3f8a74bf7c3a0a7255eacd5a798777e,,Add in missing overrides ,
simbody/simbody,430,2015-08-21T08:42:28Z,2015-08-25T05:12:59Z,True,2015-08-25T05:12:59Z,071a052cfd12f38cf3474adcaa9e93875270abfb,2,1,fd50eff8fb3199eb4a7b1d7db380a4baedf37a33,,Rename RecieveNotification to ReceiveNotification,Detected by https://github.com/vlajos/misspell_fixer 
simbody/simbody,440,2015-10-11T16:51:01Z,2015-10-11T23:56:13Z,False,none,ffb36a08147909d2c9828ffd74eeacb0659f0024,786,10,88e7f4827fee253f1979b8c348acbca184d71991 7c91fc569f0727e540719a4c5e309b95a088228a cb41dd6d62bde89335432322c4e87d89596f3cd1 9234b9b322e1567273ca4d56fe19417b077f983b fa2f461bc0d9b875ec9afb37941e6200c9fa79af 49525a942a23d8150c0ee669a1032db681d52018 da2a6c11122ecc3c577136d47e99ae370227135d dcda5fccfa9e45de55d16932933cea66ec3e9a05 42f075743fb3ada5c6155c45dae56f299f815f6e e2ffddb0fab756b54259fd32a47bee5c6444dd37,,Added the possibility to compile simbody with MinGW for Windows,These commits enable compilation with various versions of MinGW for Windows.  Since  simbody is shipped with Blas and Lapack libraries compiled with specific versions of MinGW  some checks had to be added to verify compatibility.  If it is possible to compile simbody  configuration and compilation run smoothly. Otherwise  user is asked to provide its own version of Blas and Lapack  or to change to its version of MinGW.  Versions tested: - MinGW 32 with gcc 4.7.2 and dwarf exception mechanism - MinGW 64 with gcc 4.9.2 and SJLJ exception mechanism - MinGW 64 with gcc 5.2.0 and SEH exception mechanism with Blas and Lapack compiled manually 
simbody/simbody,442,2015-10-16T00:20:35Z,2015-10-16T02:49:38Z,True,2015-10-16T02:49:38Z,751da060fc829d6c0c5b7b5c862818ffd031201d,1,1,e6135f57d650aa6518878787203836d89eac4cb4,,SimTK_ASSERT was defined twice,
simbody/simbody,444,2015-10-23T01:52:24Z,2015-10-23T03:11:37Z,True,2015-10-23T03:11:37Z,5bdeb0572f0e618ee2c6ec134858bb44d662595d,1,1,aa144ec94faf8867459456133e4ba4c6b1bedbc6,, readme travis svg,
simbody/simbody,445,2015-10-23T06:00:13Z,2015-10-23T16:56:17Z,True,2015-10-23T16:56:17Z,1c0193c09526d2aedc2a7fba7439efda44998c91,4,2,2df56fe9a779999139ac0f024d77e248123a9c0a 6ca9fba3c0a0a20bece3005265d43833bde3ec2f,,Upload binaries from travis to bintray,The simbody bintray website is here: https://bintray.com/chrisdembia/opensim-testing/simbody/view.  The download zips are here: https://dl.bintray.com/chrisdembia/opensim-testing/ 
simbody/simbody,446,2015-10-24T00:23:50Z,2015-10-24T02:56:13Z,True,2015-10-24T02:56:13Z,e0b7260d47a02cf5d3afb35dcceea0e7a7759c79,1,4,35c7b44981b8775d98f77ca95b244f93959d84df 782ceddc8cc3df8d53fd45abfc12bcb0bf04d1d7 6ae53acf307aae34d178b39b5128dc48aef57da9 d31b34269eaf3560dbeb0304f7ef312d76fdf862,, travis Upload debug build to bintray,This PR adds a debug build to travis and uploads it to bintray. The debug build is used to test OpenSim in debug. 
simbody/simbody,447,2015-10-24T20:44:44Z,2015-10-24T21:07:12Z,True,2015-10-24T21:07:12Z,adc938a2a6483f4462c38c63c3970353c9e1c140,2,1,bcb3a0df9686f867103acf17db4bf5a5ae90ea71,, cmake Min required version for MSVC ,
simbody/simbody,441,2015-10-13T10:27:28Z,2015-10-30T17:15:12Z,True,2015-10-30T17:15:12Z,7c010c3ff38072b3dedb9b72e8866fddaa30fd3d,11,21,036a61fe9aa788fa49bd61a3b0fdf61223e93256 e9f0880ec77a51fc58393caa89a85ca7b1b43888 76c45a3fe3499b1a2e7e81ab7f2504fa9d4dc521 2a60eb07bbe0483c1209ff8e80a1d4c0da8d217c 70976e351aeee2a3228acc81070ab14e4af5305e 2682745dbe12c81b3324ab361c0f139a4910089d 48bd767e88583e7982f7ce5c9c090b8ede75cace a83cd153e485f5f96bd28ec7a24a2ace77307672 989f0b5d8fc851076116285746851baaae333be1 eab39405f01911e6c8cc4dcdad54c3702fef80a4 fe26b190fc6f88b0975e553b2a7f4ae1f67b8ca2 8ff76b45002a8dfbe5fea1b7f9262afb9d90bf4b 60744204e01324c9b11a0efc4f2bcc974beefea1 7635dda5413dcf13fe80390cb786bbd124973df4 ac999c08860485b3d55cf62b746a34751f5377db 0a546712db32a48e8721e9f1a99cadca27bbe1bd 4cc67553dfa128e4b0179eee197d3c2e2824fcff 322caa983fa9f004f0ee0cf784eef9620b204283 f5a33aa295a6e905b06308c4d429e4cc4990802b 8065fd3e8e4af23c5cc08b49c5d1d110d3c2be37 dd0c6e5cbbb00f791c9384f979ada03e9a1ce2d4,,Added the possibility to compile simbody with MinGW for Windows,These commits enable compilation with various versions of MinGW for Windows.  Since  simbody is shipped with Blas and Lapack libraries compiled with specific versions of MinGW  some checks had to be added to verify compatibility.  If it is possible to compile simbody  configuration and compilation run smoothly. Otherwise  user is asked to provide its own version of Blas and Lapack  or to change to its version of MinGW.  Versions tested: - MinGW 32 with gcc 4.7.2 and dwarf exception mechanism - MinGW 64 with gcc 4.9.2 and SJLJ exception mechanism - MinGW 64 with gcc 5.2.0 and SEH exception mechanism with Blas and Lapack compiled manually  Please note  that one can clean the code with the the two Python scripts:  The Python script that has been used to remove trailing spaces from CMakeLists.txt files found recursively is:  ``` import os PATH = r'simbody' for path  dirs  files in os.walk(PATH):     for f in files:         file_name  file_extension = os.path.splitext(f)         if file_name == 'CMakeLists' and file_extension =='.txt':             print(f)             path_name = os.path.join(path  f)             with open(path_name  'r') as fh:                 new = [line.rstrip() for line in fh]             with open(path_name  'w') as fh:                 fh.writelines((line+'\n' for line in new)) ```  The Python script that has been used to remove trailing spaces from files *.c *.h *.cpp *.hpp found recursively is:  ``` import os PATH = r'simbody' extensions = ('.c' '.h' '.cpp' '.hpp')  for path  dirs  files in os.walk(PATH):     for f in files:         file_name  file_extension = os.path.splitext(f)         if file_extension in extensions:             print(f)             path_name = os.path.join(path  f)             with open(path_name  'r') as fh:                 new = [line.rstrip() for line in fh]             with open(path_name  'w') as fh:                 fh.writelines((line+'\n' for line in new)) ``` 
simbody/simbody,451,2015-11-04T16:57:36Z,2015-11-04T22:11:08Z,True,2015-11-04T22:11:08Z,bf5791e8334517805ae829f0a858a9157e79a906,1,3,b15ea230242c6dce4ed25818d49f4c094563808b 445ca7ad5e2eecf7e4c4a15c2b4e68e83aa40fdb 89d689016cfc5dded60fc811aceaffb7e26cb561,,Added a check on MSVC compiler with C 2011 features,This PR adds a CMake check on the MSVC compilation. If C++ 2011 feature like `constexpr` is not supported  we stop configuration.   I have used MSVC2013 and I only discovered at compilation time that this compiler did not support all C++ 2011 features. This is why I propose this PR 
simbody/simbody,452,2015-11-05T16:53:58Z,2015-11-09T17:40:41Z,True,2015-11-09T17:40:41Z,e3d873937799a972a11d1952807387e0f113bfae,1,1,759d79b67f240e12d44300bebaed8b9c5ecf3c83,,Fixed a bug detecting if file is DLL,Before this fix  CMake get_filename_component ext function returns 0.dll for "lapack-3.5.0.dll"  which is not the expected result  This fix proposes to test the end of the filename to see if file is a dll  Below is a CMakeLists.txt that exposes the problem  ``` cmake_minimum_required(VERSION 2.8.8) project(test) set(LIBF "lapack-3.5.0.dll")  get_filename_component(LIBF_SUFFIX ${LIBF} EXT) if(LIBF_SUFFIX STREQUAL ".dll")     MESSAGE(STATUS "File is a DLL") else()     MESSAGE(STATUS "File was not detected as a DLL -> PROBLEM with get_filename_component") endif()  string(REGEX MATCH "[.][dD][lL][lL]$" isFileADll ${LIBF}) IF(isFileADll)     MESSAGE(STATUS "File is a DLL -> OK") ELSE()     MESSAGE(STATUS "File was not detected as a DLL -> It should have been detected such") ENDIF()  set(LIBF "lapack-3.5.0.DLL") string(REGEX MATCH "[.][dD][lL][lL]$" isFileADll ${LIBF}) IF(isFileADll)     MESSAGE(STATUS "File is a DLL -> OK") ELSE()     MESSAGE(STATUS "File was not detected as a DLL -> It should have been detected such") ENDIF() ``` 
simbody/simbody,455,2015-11-15T01:37:40Z,2015-11-15T01:57:48Z,True,2015-11-15T01:57:48Z,79094cebd8b0f5eb3eb95651165af8efc5c92a4c,1,1,4d8bf52f2fb483ec49c4166683ff012863aaf865,,Fix typo in ASM gmx_atomic,Thanks to Frederic Bonnard frediz@linux.vnet.ibm.com in https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=768155 
simbody/simbody,457,2015-11-23T20:26:50Z,2015-11-27T19:54:31Z,True,2015-11-27T19:54:31Z,0dfab4fada6c1f693f92e0e251abcfcc78f501cc,1,5,90f453a710e79b0fd0d4a7a09637d5de8056db50 f75ede6037fd2fef92630a4207668aa3cb33cfc9 40ef9771162688dfa5ac5a1cfd6def60604d4dea e02bd384b2aaf63144086f9324d6bc8fd4a074c1 4b0ab7e0673af0194bccac2af9b959c63f5208cd,,Added test cases for elastic foundation theory,I have added two test cases for the elastic foundation problem of a sphere on a plane (old and new formulation). For this problem  an analytical solution can be computed: the resulting force corresponds to the product of the spherical cap volume of intersection with the stiffness.  For the different penetration values  I have set a tolerance in %. For some penetrations  we are very close to the analytical solution. (Less than 0.5%). For other  tolerance may be higher (15%) - For the old formulation  I have understood that we declare the contact property taking into account the properties of the material. It is fine. - For the new formulation  we declare material properties and the code computes global stiffness. I would have liked to have the possibility to declare an infinitely rigid ground. I had to split the stiffness between the material  which for this test case is not ideal.   Moreover  I did not understand why with this formulation  I had to declare a thickness. In the old formulation  I did not have to do so... 
simbody/simbody,458,2016-01-01T00:07:49Z,2016-01-01T01:36:22Z,True,2016-01-01T01:36:22Z,476f152945af4b27b68dec14e3f355c291cee129,7,1,0dbbce45c09eb2dc58c20368c6d0ac4730e5b1d8,,Remove usage of NOEXCEPT_11 ,Leaving in the definition of NOEXCEPT_11 in case users are using it. 
simbody/simbody,459,2016-01-20T19:31:49Z,2016-01-21T00:05:07Z,True,2016-01-21T00:05:07Z,55c8a7f3b74f7eba515c2814d6f7a79fa91b9b84,4,3,8798a3f96d7d0d09a552d23b5bbcda913dc942b5 87e00f9b95c318f7eebbbadca2eb4b1524640018 f1ecffddffc8369490ac4158084538b2be369623,,Minor fixes in support for upcoming state serialization,A few miscellaneous changes needed for issue #305: - Modify default floating point-to-String conversions to use lossless number of digits. - Make lack of type-to-String conversion a runtime rather than compile time error to avoid overly strict requirements on types that never actually get serialized. - Remove some unwarranted code from existing serialization collection. 
simbody/simbody,460,2016-01-21T01:05:14Z,2016-01-21T04:27:39Z,True,2016-01-21T04:27:39Z,3654fde9f1f725d39cd4ef8782570de2f09916c4,7,3,6b5d71d72476e2f4be67eedbe6a7495eef67a701 4241ba8c7dd95cbee143a1005e4ae9a907049614 99955d4fedbb697f6651204004c96861b0cae8f1,,Convert SimTK Xml from a class to a namespace,This is needed to untangle the `Xml` and `Array_` classes which will be mutually dependent at the completion of State serialization (issue #305). This is the change that was anticipated by OpenSim PR opensim-org/opensim-core#736.  This change is backwards compatible for people who were following the recommended approach of using the `Xml::Document` typedef rather than the raw `Xml` class. Otherwise it is necessary to change uses of `SimTK::Xml` to `SimTK::Xml::Document`.  There are also some as-yet-unused new serialization methods at the end of `Xml.h`; please ignore for now. 
simbody/simbody,462,2016-01-21T18:12:33Z,2016-01-21T18:32:22Z,True,2016-01-21T18:32:22Z,664798d9f500d5dba18ea506d6285be4b2012740,1,1,973a02e9f1579cfd478ba93043637c9120c9469f,,Update Ubuntu package instructions ,Simbody is now properly distributed through the Ubuntu and Debian repositories (thanks @j-rivero!). I updated the README to reflect this. 
simbody/simbody,461,2016-01-21T06:33:05Z,2016-01-22T17:34:53Z,True,2016-01-22T17:34:53Z,971acc19e584491b698e42e4a8033cdf21da5045,6,9,2e33cd0f48930ed8378f5f39563ac00c52f57193 275e0b54c1f3dc1f2800db06336a732d7bb553b5 03013bc0fe15de4b38d2356739480c4b772c7078 f3cea2f9bcd048ce9120d573438c3d7c311084bc 0351e6fc2fa64516a4d452b6fc1d769f0b4b9d90 68b022087e0ef925055794de815fa6bc3caeb4cd 961cd036fa04affa602a6864306f812bb51c68fe f2e8188fe492be2675febb2906cc45b5be0bb907 f6db5945e6a99040e829b3500ba1518573a2c9f6,,Canonicalize NiceTypeName and add XML friendly version,For serializing arbitrary user-defined templated types as is necessary to resolve issue #305 (State serialization)  we need a unique  persistent  platform-independent  human-readable  XML-compatible string to represent the type. That string can then be written to the XML file  and then used as a key during deserialization to find the correct registered deserializer for that type.  Simbody's `NiceTypeName<T>` class is the right idea  but was not producing canonicalized names. This PR modifies its `namestr()` method to produce cleaned-up names  and adds an `xmlstr()` method that processes the clean name to replace XML-unfriendly angle brackets with curly braces; that is then suited as the registration key.  There are some SimTK namespace free functions introduced for doing the string processing  which requires the C++11 `<regex>` facility. That in turn requires at least gcc 4.9  so this PR modifies the Travis installation to use that. This will affect the minimum supported Ubuntu level for Simbody except for users who are willing to upgrade compilers.  Known limitations: types that are in an anonymous namespace or are function-local still produce ugly names that are not platform-independent. These must not be used as types for serialization.   @klshrinidhi  @chrisdembia please let me know if you can find flaws with this -- the State serializer will be counting on these type names to be reliable registration keys. 
simbody/simbody,449,2015-11-03T09:03:02Z,2015-11-04T19:28:58Z,True,2015-11-04T19:28:58Z,165e5c8b9a626878575aba8dacea07a9603f6fdb,7,4,07b44a4f2bc76d531fb0392257054d9bc43b6fd2 4f93be5f632657a9986f8948a80bc6e32d9fb4ac 9035fe1bcb132c4d04ffad4773571165c94ca0c4 ad2a0e6ee9f92631370f5480ee18182705f4419f,,Remove need for link_directories ,This PR addresses an issue raised by @elen4 about removing the requirement that users call `link_directories(${Simbody_LIB_DIR})` in their CMake project. This is done using imported targets that are different within Simbody's CMake versus in the SimbodyConfig.cmake.  This PR requires a little clean-up before it's ready for review; I'm opening the PR to test the changes. 
simbody/simbody,463,2016-01-24T01:06:00Z,2016-01-24T02:24:12Z,True,2016-01-24T02:24:12Z,018c6c79cc06ae8f886c7d5fd5a58331b6ca22dd,1,1,4b1c5b966e137904c73fd59abc3e0288b9200b84,, appveyor TreatWarningsAsErrors,
simbody/simbody,464,2016-01-25T05:42:26Z,2016-01-25T07:09:12Z,True,2016-01-25T07:09:12Z,d5f75bfff58bc4e60d4526749859e30f89f92616,1,3,08e49d6f90f8f6c31c861172e000c1ef8a7f265a 518d53c9deca41641900550f524034a178f1602a 131404957a7e589f3a708bbc7840a724646071cd,,Have NiceTypeName put anonymous namespace in parens rather than curlies,I changed my mind about using boost-like `{anonymous}` as a representation for anonymous namespaces in NiceTypeName; this changes the representation to `(anonymous)`. I was worried that this cosmetic choice would cause trouble with the XML mapping I'm using that turns angle brackets into curly braces to avoid XML's prohibition on literal angle brackets. There is a routine that maps that back to angle brackets and I didn't want to end up with `<anonymous>` by accident.   Parens are used anyway by the gcc/clang demangler (they produce `(anonymous namespace)`) so this isn't too weird of a choice. 
simbody/simbody,465,2016-01-26T18:26:23Z,2016-01-26T18:51:30Z,True,2016-01-26T18:51:30Z,4746abbfaf1af7b2577efb030dbdac0d24390bb2,15,1,c6f465bc7de0ca2adaecdbffac6076a173f5a347,,Use Value updDowncast rather than downcast to avoid deprecated warnings,Will deprecate `Value<T>::downcast(non-const&)` soon; this PR will avoid warnings by using the unambiguous `updDowncast()` method instead. 
simbody/simbody,466,2016-01-26T18:52:30Z,2016-01-26T19:43:54Z,True,2016-01-26T19:43:54Z,fba83dfe74a160691bbd96556a16dcc894a10dee,9,1,897b640ced1c1181ec7754d9943992aa9886f7eb,,Classes T used in Value T now require default construction for deserialization,This PR adds missing default constructors and NaN initializers for bugcatching. 
simbody/simbody,470,2016-02-03T04:28:25Z,2016-02-03T05:36:59Z,True,2016-02-03T05:36:59Z,4764808405d4ef677792dbc8ca484ba564f4be2b,1,2,ab68527b2ca7760c60d0408621c1f735f81e1d60 50aecec258ff3b6054ca09dec1cfbdb9366932fb,,gitignore vim emacs gedit backup files ,This PR causes git to ignore vim's and emac's backup files. 
simbody/simbody,467,2016-01-29T18:35:40Z,2016-02-05T18:22:39Z,True,2016-02-05T18:22:39Z,3eaacee2e501e6f9cb9c839f678bdd70202723c3,5,4,1babe6683605cbea94b8621ec43cda3d0a17b5e4 fbc096bb226eb40a14fff91798e6db3757f26c2e 2734ae16dc919f344cb9edd4a431193dd5626ed3 c464da3a693e7c6af62e3c3ccf998d95f5ed4948,,Iterator range,This PR adds a helper class that allows using range-based for loops with a pair of iterators:  ``` cpp std::vector<int> v {5  10  15  20}; auto first = std::lower_bound(v.begin()  v.end()  10); auto last = std::upper_bound(v.begin()  v.end()  15); for (auto& x : makeIteratorRange(first  last)) {     ... } ``` 
simbody/simbody,469,2016-02-03T04:21:00Z,2016-02-16T07:13:53Z,True,2016-02-16T07:13:53Z,490dd0edb33db24e04f8008947f09ab71fac5716,4,5,dbfaef9052f2a4e59ae3ee60ea6c92ceae985331 3474566fd6996e611703e14c3438cc32d068516b eb244e26ce508a328937911ecda3174ae2b396e2 5734ab7fb28dee6c6f9397b4d6a71c4698dddc57 2f2f61b9693f603a067dbc084cda6ce3bf2275d0,,Add State isConsistent method ,This method compares if two states have the same number of subsystems  state variables  constraints  etc. I use such a method in OpenSim's StatesTrajectory class ([see PR](https://github.com/opensim-org/opensim-core/pull/730)).  Notes: 1. The function checks that the number of multipliers matches in both states  even though NUDotErr should be the same as NMultipliers. I did this in case the two numbers diverge in the future for some reason. 2. The test is only executed in release mode  since the test relies on the fact that the stage checks do not occur in release.  Questions: 1. Where should the implementation of this method go? It felt wrong to put its implementation in State; should I move the implementation to StateImpl? OR should this method be a static method in State that takes two states  or a free function? 2. Where should I put the function in State.h? I chose to place it between `clear()` and `setNumSubsystems)`; this is how it looks in doxygen:        ![image](https://cloud.githubusercontent.com/assets/846001/12772964/aac750c8-c9eb-11e5-84f5-3f4a44aaaf81.png) 
simbody/simbody,472,2016-03-03T20:34:14Z,2016-03-04T21:33:07Z,True,2016-03-04T21:33:07Z,cf1867d1763fcb675e942119350ae22f9c937092,1,7,dd39ade623192c43dc68f0d4a276ed05fe3f067a 24218dd3427b724c0a88cd9133cc710aa2ab4056 6198e60e685c37cd99a57b8419e957853a6369ac 7f4e3d821b8f5bfc0ecdce23748d2ee53c922548 63826520dfbdc3e9c2e9bea1bcb07391434c4c78 9fa8587003abc3a5d40fff7653f9f3936a4e4633 27d1fb15e37fe4a9f3e87bd53ddd75b9c98366f6,,Add some compiler checks to avoid having compilation crash,This PR adds some compiler checks to avoid having compilation crash. These checks stops cmake configuration if compilers are too old. The minimum version number are taken from the Readme.md  This PR comes from a compilation crash that occured with GCC 4.7.2 on Debian 
simbody/simbody,473,2016-03-04T00:01:22Z,2016-03-05T07:19:12Z,True,2016-03-05T07:19:12Z,96fb25c2e74989903381c17a29890a83070a5961,5,5,abef1ec034860f79756a7dd9b56335d8ef713906 e9bdfa9f3c00be4f5c3e30d2b49a4d3700133cc0 c6839ea7fb4c1faa7b412aa7c463642ce4eb8c4a 02a75a45cb6a221bb6f51f1b1d2f01a98d215caa f3ee232a5e017237cfd94310452ab9bee33ea30f,,Use RPATH on OSX to find simbody visualizer etc ,On OSX  we can avoid requiring users to set DYLD_LIBRARY_PATH by baking  into executables  the relative path from the executables to the Simbody libraries.  This is helpful in OpenSim also when using the Simbody visualizer; OpenSim users won't need to modify their DYLD_LIBRARY_PATH to point to Simbody's libraries.  Even if you relocate the Simbody installation (intact)  the Simbody visualizer and examples will properly find the libraries. 
simbody/simbody,475,2016-03-10T23:23:59Z,2016-03-16T14:51:23Z,True,2016-03-16T14:51:23Z,4f868a99bb9cd65f1c9ef40ffe48b26d4b05013b,5,3,14cf7e21f61028a0b39b4cde7745306672e47923 d7bd260b39143aff5b89a8bd893f1af17ee61ecf 51a44856abcaceb18158fcb9cef85f98a9821681,,Implement VisualizerGeometry implementMeshFileGeometry on Simbody side,Some background. The cleanest fix in my opinion to this issue is to beef up the protocol to  support passing MeshFile by name and have the Visualizer process load the file   cache it and never load it again  unfortunately that shifts a significant responsibility to the visualizer and makes it hard to report/handle errors gracefully (since it's a different process).  Implemented fix is a compromise where the caller to construct DecorativeMeshFile does the search to make sure the file exists and can be opened  then DecorativeMeshFile is instantiated with the full path. DecorativeMeshFileRep lazily loads the file into a PolygonalMesh object  caches it and sends it across the protocol to the visualizer.  A straightforward approach to do the loading inside implementDecorativeMeshFile call proved expensive since it causes the file to be loaded anew with every frame (even if it's 'Fixed' geometry).   Please let me know what you think or if you have suggestions for improvement  before spending much time on the code/implementation. Thanks much. 
simbody/simbody,478,2016-04-01T09:27:45Z,2016-04-01T20:19:54Z,False,none,5b23b199746ec3530bc0f425acdbfda9b064b0ba,3,1,d8c0e94747662aa829075115e3bfb882bdc307b9,,Qt conflict with definition of qInfo small,Regarding issue [#477](https://github.com/simbody/simbody/issues/477) I have renamed **qInfo  -> q_info** in StateImpl.h and State.cpp. Also  for some reason on windows when I use Qt and Simbody there is the header rpcndr.h  which defines small as:  `#define small char`  which is in conflict with SimTKlapack.h. I have renamed **small  -> small1**.   The tests pass  and I have also tested with Qt.  
simbody/simbody,480,2016-04-06T02:47:08Z,2016-04-06T11:49:27Z,True,2016-04-06T11:49:27Z,76ca55bcfc169a1ddf3b13903d3cd1aa15d6e957,3,5,290939fcb2c083275f88e71172fae1842f36b53f 08af9fac5f023854be094e7829d1758decbd9fc8 8269e770e312d0071741dfb195ba292f90df05f5 fbc754d25a1646865ba6a2e612c3c43e7eb4fba6 1ae83d1ef1ff89927a37ac9cab71e975d7b94b60,,Remove warnings in installed headers,This PR is to remove two warnings we see when compiling OpenSim with Simbody. 
simbody/simbody,479,2016-04-03T07:47:33Z,2016-04-07T12:36:32Z,True,2016-04-07T12:36:32Z,b346aee199d204cd45ac313362fa9fb6b3087075,3,2,a883ef4b344bec9dc942806e49fbafb96f8d9f16 3a3bba2de139e230ed4d73ace0005956a252bd26,,Qt conflict with definition of qInfo and small,Without auto formatting.  Regarding issue [#477](https://github.com/simbody/simbody/issues/477) I have renamed **qInfo  -> q_info** in StateImpl.h and State.cpp. Also  for some reason on windows when I use Qt and Simbody there is the header rpcndr.h  which defines small as:  `#define small char`  which is in conflict with SimTKlapack.h. I have renamed **small  -> small1**.   The tests pass  and I have also tested with Qt. The Qt team said that will work on a definition that will undo some of their macros. 
simbody/simbody,481,2016-04-08T11:29:13Z,2016-04-18T02:12:06Z,True,2016-04-18T02:12:06Z,a5a6447718671d899f476754f5c95474b0a03b53,2,4,1563298fc9085665443ad4335cfc18c801427c45 d9770bfbb53fa89d0bdecd6c29c27ba05efbdd32 4ae2f7210912c3f9bf0cab1979fa2cabe0432dd3 140b4397b69ac02cbe07b723b9531ab6d09b86e6,,Added second AppVeyor job for CI testing of OpenSim on 32 bit,AppVeyor now runs 32- and 64-bit jobs. The NuGet packages ("simbody-x86.0.0.0.nupkg" and "simbody-x64.0.0.0.nupkg") are used by [this OpenSim PR](https://github.com/opensim-org/opensim-core/pull/921). 
simbody/simbody,486,2016-04-18T22:37:41Z,2016-04-18T23:29:51Z,True,2016-04-18T23:29:51Z,26c1b05bd2a43825334c6c4cdba18c76c91d5f01,1,1,cb3f0d5d61c09cc4e8c52b5d9b081661d30add58,,Workaround apparent optimization bug introduced in 32 bit VC 2015 Update 2,Microsoft apparently screwed up something in Update 2 of the 32 bit VC++ 2015 compiler. This change seems to avoid the problem.  See discussion in issue #483. 
simbody/simbody,484,2016-04-18T19:54:40Z,2016-04-18T23:33:45Z,False,none,128a85828167b60294c8ff8d6b9d2f5fb8fc3ac7,1,1,fa66b22278e8db6b62c053161e9c657bea296ebc,,Use old AppVeyor build worker image,TestMassProperties fails on 32-bit AppVeyor using the [recently updated](https://www.appveyor.com/updates/2016/04/16) build worker image. Use the old image for now.  Fixes #483 
simbody/simbody,485,2016-04-18T20:03:27Z,2016-04-19T18:48:56Z,True,2016-04-19T18:48:56Z,d4c0472280f433009fed28a0b896e9010b8ac93c,3,8,b6ad6a9b8eb9ec45b903e058318cbbd2236efe66 3c59355dae3b360ca4f1753043e3a11036df3fb3 03aa7da552901f559f010bdc0cdc87b1a51cbd5b d92edba7228c55a01440ed61a306c4939c16a57c 13c70dccdf722603b92d2cfdbce22a2e7eb6881d 35c969ab95355dfc1a47dbbc7f5e705fb78aa165 b7f513517fd939d1e567d1e45906355efbec0500 f6c31677f86b007e960976de629e2d25a8d7b55d,,Fixed bug Compiler version check for gcc incorrecly fails 482 ,This bug was reported here: #482  We use CMAKE_CXX_COMPILER_VERSION  to fetch compiler version  I dont think it is required to update the version of CMake required to configure the project: from Cmake documentation  it says it is already defined  Below are the documentation found  From https://cmake.org/Wiki/CMake_2.8.8_Docs  it says it is defined but internal   CMAKE_<LANG>_COMPILER_VERSION        An internal variable subject to change.  ```    Compiler version in major[.minor[.patch[.tweak]]] format.  This    variable is reserved for internal use by CMake and is not guaranteed    to be set. ```  From https://cmake.org/Wiki/CMake_2.8.10_Docs  it says it is defined   CMAKE_<LANG>_COMPILER_VERSION        Compiler version string.  ```    Compiler version in major[.minor[.patch[.tweak]]] format.  This    variable is not guaranteed to be defined for all compilers or    languages. ``` 
simbody/simbody,492,2016-05-09T14:21:38Z,2016-05-15T17:13:51Z,True,2016-05-15T17:13:51Z,6eddcdc50f356cb8236b7e09c1ee9544e3c6aafc,1,5,c11863e744dd1cf4f9464acec86ac39376120b44 2c49b4b8d73f62986691912db5ab31a1ba1b00c4 2fad4c948e80a38b78e2c50abe8b1785029b2c2f 69809d5919c7bb55ccb538ff7d93968e68e7afde 8c88dea0b11b472d50925c6c36e21946956c6ac4,, Describe how to get GCC 4 9 in Ubuntu 14 04 in the README 487,This PR describes how to get GCC 4.9 in Ubuntu 14.04 in the README.md. This is related to issue #487  
simbody/simbody,496,2016-05-22T19:47:09Z,2016-05-22T22:35:33Z,True,2016-05-22T22:35:33Z,ea3a61fd18cd72be0bc8a149edfc76cbfab67e09,1,2,6bda70e4876abf3d6779ac1d10d1bbb16b55680d 0e0853495910c119673b875148ce961e7df22250,,Updated version number in Readme md,Updated the Readme.md and gave some details on how to pull a specific release 
simbody/simbody,497,2016-05-31T05:51:24Z,2016-05-31T14:57:42Z,True,2016-05-31T14:57:42Z,d190dc15bdaa68d60b5e7d5c756be36e81b72d1c,3,2,b429f8343a5766da9cba5900ab3619b365712b30 6b9ea71641299e654a9ff8aab6aa6cd091356f7e,,Add in override keyword to some RigidBodyNodeSpec classes ,This PR suppresses some warnings in clang v3.7 related to missing override keywords for RigidBodyNodeSpec classes. 
simbody/simbody,498,2016-06-03T05:55:09Z,2016-06-03T17:24:02Z,True,2016-06-03T17:24:02Z,bc063a748a7f0751d79528827e7ce783e6309937,3,1,ea13f919d7c36c6ec1ae87650a10c76c55f2a2e0,,Add operator to index types,This PR adds `operator>>` to Index types generated with the macros in common.h. This stream operator allows one to deserialize an Xml element holding an index.  Note: This PR is into the `feature_state_serialization` branch. 
simbody/simbody,499,2016-06-03T06:25:38Z,2016-06-03T17:27:55Z,True,2016-06-03T17:27:55Z,5e962bf03ba0321d9b0118ad87474314c035d74f,2,1,3b9d20c93c1c85518c138afdb8a25d51650724c6,,Add operator to Stage,This PR creates `operator>>` for Stage allowing deserialization of a Stage from xml. 
simbody/simbody,500,2016-06-03T06:31:06Z,2016-06-03T17:28:12Z,True,2016-06-03T17:28:12Z,ae4deaa79e1030b573383c69b62592818f8c09ab,1,1,e904d0ab614b2f655f3837db023d519df1bb8475,,In StateImpl fromXmlElement clear subsystems ,Previously  calling `fromXmlElement()` multiple times on the same State caused subsystems to erroneously pile up.  This PR also reserves the appropriate memory for the `subsystem` variable. 
simbody/simbody,501,2016-06-03T06:48:23Z,2016-06-03T17:59:22Z,False,none,c23d2a1d158009b87cbb9f6b8406a998f32b33ac,8,6,3ea0cf18fd9237687a33d7df7436804d451159d6 8b500bb8cc4e4dcb7c7a3c91d7599df6f433083f 72b04289e8330cf2d945f4127d6bd7c525977071 85b904111a676c3cf314853a367bb18e2c3ea54d 3f553e53359250b2901d245e3a32ad4f27687df5 ba07766028e5e0e7afaa54bf5de8f2d1cfe6ad5e,,Throw detailed exception if can t write T to Xml element ,This PR introduces an exception if we are unable to write `T` to an Xml element. 
simbody/simbody,502,2016-06-03T18:04:14Z,2016-06-03T20:23:56Z,True,2016-06-03T20:23:56Z,c41b7857168ba84640c4a46d918293b8e95bb203,2,3,3f553e53359250b2901d245e3a32ad4f27687df5 ba07766028e5e0e7afaa54bf5de8f2d1cfe6ad5e 272d315f3c694e1bf01a9dcfad3de2df2e7c847f,,Throw meaningful exception if T cannot be converted to Xml element,This PR now correctly goes into the the `feature_state_serialization` branch  and hopefully does not produce a warning with MSVC.  Could you also review the exception message? It's tailored for developers  not end-users. Perhaps that's not what we want? 
simbody/simbody,506,2016-06-06T05:27:21Z,2016-06-06T05:48:56Z,True,2016-06-06T05:48:56Z,be5c858ffff2b070761357a5a33919c329eb930e,1,1,59ffb367a0ee53ac19cf95db609a9cff4df9060c,,Fix bug in ContinuousVarInfo toXmlElement ,I think were was a copy-paste bug in ContinuousVarInfo. This PR fixes it. 
simbody/simbody,508,2016-06-07T07:19:19Z,2016-06-07T14:54:56Z,True,2016-06-07T14:54:56Z,c02da4750ea84fd9dae67eb5320a8a18125ac382,1,1,a23d6422dd483f9af6ae5d82f4767eefc210b180,,Set Ground s Inertia to Infinity using UnitInertia instead of Inertia,Previously  Ground's inertia ended up being NaN as a result of an Inf/Inf in Inertia's constructor (thanks @sherm1 for explaining). This PR changes Ground's inertia to be Inf by using the UnitInertia constructor instead.  Fixes #507. 
simbody/simbody,515,2016-07-27T18:00:22Z,2016-07-27T18:57:08Z,True,2016-07-27T18:57:08Z,3a2693dd85e8f6681dbceb8ea47b53bb5bf57fd8,1,1,b576bc2c4b92e7f3c3079c0086829a8cdd752f71,,Fix doxygen typo in SimbodyMatterSubsystem h,This PR fixes a typo in the doxygen SimbodyMatterSubsystem.h: `is is` -> `is` 
simbody/simbody,517,2016-07-28T03:00:10Z,2016-07-28T14:48:47Z,True,2016-07-28T14:48:47Z,3469006e99a94e9a3c7201a5308d298d20acf07f,4,2,ce5fb7a4e5e3518c99e8fbaa092ab29aef484e75 408522fe731aae15f902f78f56e50e3ace2acf04,,SimbodyMatterSubsystem calcConstraintAccelerationErrors ,Previously  `SimbodyMatterSubsystemRep` had an operator `calcConstraintAccelerationErrors()`  but there was no related operator for use by users. This PR introduces such an operator. The operator is tested in TestConstraints to ensure it gives results that are consistent with other methods/operators.  In the doxygen  I stated that the complexity of the operator is O(m+n) This was determined by inspecting the internal documentation for: - `SimbodyMatterSubsystemRep::calcConstraintAccelerationErrors()` (O(m+n))   - `SimbodyMatterSubsystemRep::calcBodyAccelerationsFromUDot()` (O(nu+nb))  and  - `SimbodyMatterSubsystem::calcQDotDot()` (O(n)).  Fixes #514. 
simbody/simbody,521,2016-08-22T14:43:42Z,2016-08-22T14:44:14Z,False,none,cfc3cc31776c2cc1a55173251f412bbe5d9b6faa,1,1,3a93bc400a25e1c3e0d91b62d66d6bf4d9b761e4,,Updated readme, read more in capital 
simbody/simbody,518,2016-07-29T18:58:10Z,2016-09-22T15:54:42Z,True,2016-09-22T15:54:42Z,b84760a6adce24ff3531a23dc25c6393857b6e46,1,2,8db6e7974b98eaa2ef948e2fde65ba085c4f0317 776c9bca75521808f7983c71e14566b871c41d37,,Add version dependency and compilation instructions for LAPACK,See issue https://github.com/simbody/simbody/issues/516  Long story short  Simbody/OpenSim will crash with the error `**    on entry to DLASCL parameter number 4 had an illegal value` unless Simbody/Opensim are compiled against versions 3.6.0+ of LAPACK on Centos/RHEL 6 and 7.  I originally guessed (in the issue) that version 3.5.0 of LAPACK would work  but after doing some testing it turns out that only LAPACK 3.6.0 and newer solves the issue. Anyhow  this is just a quick fix to the compilation instructions to indicate this.  Cheers- 
simbody/simbody,524,2016-09-21T21:11:07Z,2016-09-22T22:51:10Z,True,2016-09-22T22:51:10Z,31732fcd5e5e95c896c6ae1d946493feb814fa50,2,6,8ac2bcd497dc7ccf208c79f0b4d98064870659fe 0789446237bd2f78dd29880bd6273188d3ff0637 540b1405e6c81e6ff2336a3940c184b35192f486 598fd7f79d91aa7839202d2a0e86e77bbb6d8489 77affb3225bf399b127f59137f8330e1270b0d25 ff9e813bf5c7a96a92c406447647fedd2784b8e3,,Only define clock_gettime for macOS 10 12,This PR fixes #523: OSX previously did not provide `clock_gettime()`  but macOS 10.12 now does provide this function. This PR causes Simbody's version of `clock_gettime()` to only appear if using an older version of OSX. ### Background on OSX SDKs  etc.  There are two versions to consider here: the MacOSX SDK version used when compiling the source code  and the version of the OS on a user's computer (called the DEPLOYMENT_TARGET). Both the SDK and the OS version use the same numbering scheme (e.g.  10.10  10.11  10.12). A single SDK can be used to deploy to multiple different versions. For example  one can build Simbody with the 10.12 SDK and deploy those binaries to OSX 10.10  10.11 (as well as 10.12).   When a developer builds Simbody with CMake  they can specify: 1. **CMAKE_OSX_SYSROOT**: the SDK to use. 2. **CMAKE_OSX_DEPLOYMENT_TARGET**: the minimum version of OSX that users must have to use the resulting Simbody binaries.  The 10.12 SDK declares and defines `clock_gettime()`  and (as one would expect) 10.12 operating system provides `clock_gettime()` in a dynamic library (libSystemB.dylib maybe?).  With respect to this PR  this results in 3 scenarios: 1. **SDK version < 10.12 and DEPLOYMENT_TARGET < 10.12**: This is the old scenario. Simbody must provide `clock_gettime()`. 2. **SDK version >= 10.12 and DEPLOYMENT_TARGET >= 10.12**: This is the scenario that will be common for most users/developers pretty soon (in say a year?). And it is simple: Simbody should not declare or define `clock_gettime()`. 3. **SDK version >= 10.12 and DEPLOYMENT_TARGET < 10.12**: This is the nasty scenario  and it's the one I was in yesterday. Basically  the SDK declares `clock_gettime()`  but it may not be on the user's system. This occurs when developers update their Xcode to Xcode 8. Updating to Xcode 8 removes the previous SDKs (e.g.  MacOSX10.11.sdk) and only leaves MacOSX10.12.sdk on the developer's machine. However  a developer with Xcode 8 on their machine is likely still interested in providing Simbody to users with OSX 10.11  etc. It is true that developers like me can go find MacOSX10.11.sdk online and download it again  but this is undesirable and we shouldn't force developers with Xcode 8 to fetch older SDKs.  (The scenario SDK version < 10.12 and DEPLOYMENT_TARGET >= 10.12 doesn't make sense. SDKs cannot target future versions of OSX) ### Changes in this PR  This PR introduces two macros that control how Simbody builds: 1. (DECLARE) **SimTK_IS_APPLE_AND_MUST_DECLARE_CLOCK_GETTIME**: This is true if the SDK version is older than 10.12  as such SDKs do not declare clock_gettime(). The 10.12 SDK declares `clock_gettime()`  so we don't need to declare it again. In fact  we can't declare it again because  `clockid_t` is different in Simbody's implementation as compared to Apple's implementation: Simbody uses `typedef long clockid_t`  while Apple uses an enum. 2. (DEFINE) **SimTK_IS_APPLE_AND_MUST_DEFINE_CLOCK_GETTIME**: This is true if the DEPLOYMENT_TARGET is older than 10.12: if we want to allow users with OSX 10.10 or 10.11 to use Simbody  we must define `clock_gettime()`.  I use `*_DECLARE_*` to decide if we should declare `clock_gettime()` in Timing.h and I use `*_DEFINE_*` to decide if we should define clock_gettime (and related functions) in Timing.cpp. ### Testing  I tested scenarios (2) and (3) above locally. On a computer with OSX 10.11  I upgraded to Xcode 8 and used the MacOSX10.12.sdk  and was able to run the tests successfully. Then I upgraded my computer to macOS 10.12 and was again able to run the tests successfully. Travis tests scenario (1)  since travis is using an older OSX with an older Xcode. 
simbody/simbody,526,2016-09-30T06:54:09Z,2016-09-30T21:01:09Z,True,2016-09-30T21:01:09Z,6ceee1fa737eed29d3ff8077fb6adaea8ce752e6,3,4,22ebf441578382297395eaf91624ca8dd368bf9e bc1b53b3e9cc9e8a88812505b4a4acb4267fe578 e1bcfe2ecae08979932179dd364d35998f48deff 49b280769903c5d2ddd84bc73ece39fc0295c5d6,,Port macOS clock_gettime fix to 3 5 branch,This PR ports the fix from #524 to the 3.5 branch.   OpenSim 3.3 depends on Simbody 3.5.3  and is not compatible with Simbody 3.6. Since we expect OpenSim users to use Xcode 8 before OpenSim 4.0 will be released  it would be helpful to create a 3.5.4 bug fix release for OpenSim users who want to use OpenSim 3.3 with Xcode 8 (and thus the MacOSX10.12.sdk). 
simbody/simbody,528,2016-09-30T21:46:45Z,2016-10-01T18:48:43Z,True,2016-10-01T18:48:43Z,73d463d3b75170bc064b7e44b134dbff9e1683d0,2,1,5d9fd088412fbe842ea48e0ebab755a89c459998,,Update version to 3 5 4 Prepare CHANGELOG ,This PR changes the version number that is mentioned in a few files to 3.5.4. The root CMakeLists.txt already lists the version as 3.5.4. I also updated to changelog to no longer say "in development" for 3.5.4. I also put today's date as the release date for 3.5.4.  As soon as this PR is merged: - Locally  I will tag the resulting merge commit as `Simbody-3.5.4`. I will use an [annotated tag](https://git-scm.com/book/en/v2/Git-Basics-Tagging#Annotated-Tags)  using the release notes as the annotation. - I will push that tag up to this repo. No PR necesasry. - I will check the GitHub "Releases" page to make sure the release notes show up properly from the annotation. If the notes do not show up properly  I will clean them up. - I will make a new PR to change the version number in CMakeLists.txt to 3.5.5.  I will also: - Update OpenSim's build-from-source instructions [here](http://simtk-confluence.stanford.edu:8080/display/OpenSim/Building+OpenSim+from+Source). 
simbody/simbody,527,2016-09-30T06:55:18Z,2016-10-02T00:41:03Z,True,2016-10-02T00:41:03Z,cca631a2d1cb7fdf3880bdeb6290fd24c0281be2,1,1,ee9b58c3552379db96356aaeda94f47fb16f2d86,,Mention macOS clock_gettime fix in CHANGELOG master branch ,This PR mentions the fix from #524 in the CHANGELOG  for the master branch (3.6 development). 
simbody/simbody,529,2016-10-01T22:35:31Z,2016-10-02T22:13:49Z,True,2016-10-02T22:13:49Z,744340ae252624c4b0c7a52e76c74a2926767f76,1,2,ba75f50dcce6c27f37c7fb3def5f2c7ce6b3608b 2ea40804d0002d2b547a7689d161f1eba93146bc,,Bump up version number in CMakeLists txt for simbody 3 5 branch ,This PR bumps the version number on the `simbody-3.5` branch in CMakeLists.txt to 3.5.5.  Even with this PR  the previous version's number (3.5.4) still appears in README.md in a tag name (`Simbody-3.5.4`). This shouldn't be bumped up yet. People may use the README rendered on GitHub for `simbody-3.5` as instructions to build the `3.5` branch  and a `Simbody-3.5.5` tag deos not yet exist. 
simbody/simbody,530,2016-10-02T04:53:05Z,2016-10-02T22:49:00Z,True,2016-10-02T22:49:00Z,267e3a8918b43a59e3890184382fc59535e79a21,1,1,a37deef08af530b57601251900fadee0d0be6cfd,,simbody pc in include dir to match cmake config,The cmake config file defines `Simbody_INCLUDE_DIR` as [PACKAGE_SIMBODY_INCLUDE_INSTALL_DIR](https://github.com/simbody/simbody/blob/master/cmake/SimbodyConfig.cmake.in#L38-L39)  which is set to [${CMAKE_INSTALL_INCLUDEDIR}/simbody](https://github.com/simbody/simbody/blob/master/CMakeLists.txt#L578)  but the pkg-config file sets it to just the include folder. 
simbody/simbody,532,2016-10-08T00:59:00Z,2016-10-08T18:23:07Z,True,2016-10-08T18:23:07Z,bd2c53463aaf9993e53d100fc0ba91ba02d330a2,1,1,1a5814a9644d1654da6219552570e13d8fe81222,, readme libsimbody doc simbody doc,This PR fixes #531: the name of the `simbody-doc` Ubuntu package was out of date. 
simbody/simbody,536,2016-11-05T01:32:11Z,2016-11-05T19:19:13Z,True,2016-11-05T19:19:13Z,ea7d94640b084d9feaa55e140c76e696f242a06a,1,1,95c18f0cd05e1c9c46a3a2ceab4d848c77116257,,Typo fix,
simbody/simbody,539,2016-11-30T23:15:58Z,2016-12-01T04:23:59Z,True,2016-12-01T04:23:59Z,2c4e064a25805491547dbbea1e292927b030af2b,1,1,9b41c3a670cb000bd9cc6c5b142d8706046a1c05,,Minor doxygen improvements,
simbody/simbody,493,2016-05-11T02:45:08Z,2016-12-04T00:56:44Z,True,2016-12-04T00:56:44Z,97cac8ce774ec170b1fa9336a2674cf945dcf376,3,8,8e37e172f9daddef307a431da814f773e33ef70e a0f66f866a8377a387fa9b5d5a252e93a78571d9 54dedd8e9cef11c161fb40a805c082099518e50a 3151c2757bb8652383ec2bd6d7d98eab162d2623 55de637c1f5723b6894efd7904829b90474fcef2 a8c29e6f2d89010e0561184692ab21897fbc5ff3 9e73e84e92ee7705e9fe8bf276424938ab4042f6 b7a1fe84daf4887444583e26791dbbdd2df99507,,Remove global variables in IpOpt interface issue 175,Removes the global variables in IpLapackSolverInterface.cpp. Makes `ipiv` a member variable of `IpLapackSolverInterface`. IpOpt can now be used in multiple concurrent threads. I have tested this with OpenSim inverse kinematics and with the Simbody test suit without encountering any problem. 
simbody/simbody,541,2016-12-14T08:11:38Z,2016-12-14T16:56:22Z,True,2016-12-14T16:56:22Z,d655cc1df188bbc704d850bac02e80c5efebae85,1,1,5c62b46567074ec367f8b05fde0ba586fea0af8b,,Removed unused variable in ContactTest cpp,Unused variable detected with GCC4.9.2        ContactTest.cpp:306:10: warning: unused variable 'suppressProjection' [-Wunused-variable]       bool suppressProjection = false;            ^
simbody/simbody,542,2016-12-20T21:35:45Z,2016-12-24T22:23:26Z,True,2016-12-24T22:23:26Z,3fecfc774f4959a5293f5ab62c2c8315120c9519,1,2,a4564a7cf2fd5c3e86db8b72dad01de1e8f39e93 3420439b04e00ca01a91bcab8f636ff9e671a250,,Added Conda install instructions Fixes issue 535 ,
simbody/simbody,540,2016-12-09T17:02:37Z,2017-01-12T17:57:39Z,True,2017-01-12T17:57:39Z,e1d8ecdfcdf56e13257084df61a01fa3cdf4e856,6,6,509e2e3ae80b4e8fe5d631e712424c247cc9656b d2e211778379aac5084b854248df9542d3942a4e a419ff457f4eddbf8338fd5157bf2f472cc4a653 0daec78ef1e55b7f34cc6fe2c84a44aa96bcfb0b 46cfba3b9f38732988a38520d5fbcab007557de2 cfe32fadb1ff698faf39bb28ca3db19ff1be8ea2,,CMAES treat init_stepsize as Vector ,#520     Change init_stepsize so that it can be assigned as a Vector valued property.
simbody/simbody,548,2017-02-20T07:17:46Z,2017-02-20T16:50:23Z,True,2017-02-20T16:50:23Z,9e761bbb372e5da90ae478d2a5d3a4952ad94b27,1,1,ffbe366582a00f08fc020cb1f60e707aceac526b,,Avoid exception in Visualizer Impl Impl ,This exception  which occurred when destructing a model whose  simbody-visualizer was already shutdown  was causing OpenSim's MATLAB and  Python bindings to crash.    I imagine that if we are destructing the Visualizer  it is fine if there is difficulty sending the shutdown signal to the simbody-visualizer GUI.
simbody/simbody,551,2017-02-25T12:37:44Z,2017-03-03T00:34:01Z,True,2017-03-03T00:34:00Z,31333bb323945e4b08be5cb6151d43832895c7b3,9,14,f3fde410c627bd96117a034dea9230d1b545f4ab 4d4a402a708c4ddde83c7bae8d427e9a9d4b37b3 bbde5ca1ee6266ec76034fdc1014404974b4e374 c20ff7508ebcadb0d2374317bc138791894a0762 f3582377c45fd141849a852817d53e7f48cff02c 0bbf1efb0ff62ed65a71b8ac2f7cdba6d42a0099 f3d1ba96d73fee1b8b674f164780b3f153be29e3 5dd4fcbf3f3efe21d4aecd342e2b367e36beb127 9d8e689eaffbc21c68595482c31c75357c256a8b 5d6bc2625675b586c17389e0e6bb8fb3fb9ea76b 94f256dd5c8cca62237af58b810b4e793edb1f41 faf6321d153476ce8ba03c70444a22d9467975a4 5a71fd918bca2a109e4ece6fc9f951fe47793078 edeae475b1c128fa8a8166826323c9170be7e52d,,Add coverage status of simbody with gcov and codecov io,This PR adds the coverage status for simbody    It tells us that 50% of Lapack is covered with existing tests.    The current result can be seen here:  https://codecov.io/gh/Gjacquenot/simbody/commits    How it works:  It uses gcov to create coverage data  and continuous integration with Travis sends this data to codecov service. codecov parses the result and proposes a HTML view of the coverage.    I had to change the build directory: it is now in the source directory. Otherwise codecov fail to parse coverage result    Once this PR accepted  one should create a codecov account and update the README.md for the coverage badge (if adresses I have written are incorrect).
simbody/simbody,552,2017-03-13T05:46:26Z,2017-03-14T00:37:55Z,True,2017-03-14T00:37:55Z,9f2123212dadcedcd680a8d8b3832d4fe40e1f8b,7,4,f3c2552b11e9d66e8e36e96f0769767e38d4a6ea 0392b50e9c3f16ba7f1d5ee0c143e39aa49900b5 a62350f59b1d94e2402897cd0a9af02e1884f2d1 2344155450e780f8f6185fa16e4d3fe32db9c8ed,,Remove need for users to include_directories Simbody_INCLUDE_DIR ,This PR makes CMake export the directories that should be included by client projects. Therefore  client projects need only `target_link_libraries(<target> SimTKsimbody)` and their library/executable will have Simbody's include directory.    This will be helpful for OpenSim users  who might not expect the need to handle both OpenSim's and Simbody's include directories.
simbody/simbody,553,2017-03-24T02:59:44Z,2017-03-24T05:35:44Z,True,2017-03-24T05:35:44Z,40e5a2068e897e877429b8d10a7b6c79953fe2ba,1,1,4003ec7eabef65c7255a91f7a5581794ea1749d1,,need pthread to be asynchronous on windows for pthread_cancel,
simbody/simbody,554,2017-03-24T05:59:39Z,2017-03-26T23:26:38Z,True,2017-03-26T23:26:38Z,dc17e9fd598164b1d67e51d154267f9a9e13643c,2,4,c04af964cb1987456a530a61bfcb574c63914b37 4003ec7eabef65c7255a91f7a5581794ea1749d1 40e5a2068e897e877429b8d10a7b6c79953fe2ba 1efcf8ac78aed8ca1c8178adad905a7eb9b8dd1a,,Upon shutting down the visualizer GUI stop listening for GUI events,This PR solves an issue that occurs when using OpenSim bindings in MATLAB with the Simbody Visualizer: MATLAB uses 100% CPU even after the OpenSim model (and thus the `SimTK::Visualizer`) is destructed. This was because the visualizer spawns a thread to listen to GUI events and this thread is not cancelled after destructing the visualizer. This PR causes shutting down the visualizer to cancel the event listening thread.    Due to an issue with the POSIX Threads for Windows library  we had to surround `READ` with some additional pthreads code; see [here](https://www.sourceware.org/pthreads-win32/manual/pthread_cancel.html):    > POSIX specifies that a number of system calls (basically  all system calls that may block  such as read(2)   write(2)   wait(2)   etc.) and library functions that may call these system calls (e.g. fprintf(3) ) are cancellation points. Pthreads-win32 is not integrated enough with the C library to implement this  and thus none of the C library functions is a cancellation point.    > A workaround for these calls is to temporarily switch to asynchronous cancellation (assuming full asynchronous cancellation support is installed). So  checking for cancellation during a read system call  for instance  can be achieved as follows:    >   ```c++  pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS  &oldCancelType);  read(fd  buffer  length);  pthread_setcanceltype(oldCancelType  NULL);  ```    @carmichaelong and I worked on this together. However  neither of us are very familiar with pthreads; if there is a better solution  please let us know. We considered having the GUI send a signal telling the thread to `pthread_exit()`  but that seemed roundabout (the simulator telling the visualizer to tell the simulator's listener to exit).    We have tested this locally on Windows and macOS  and have verified that multiple examples still work as expected.
simbody/simbody,557,2017-03-30T02:57:14Z,2017-03-30T16:23:21Z,True,2017-03-30T16:23:20Z,9e5749187d9fdcbd55d0a7f01c7b98ada7f1fcb0,3,13,1fed6872021af4cd88205d76611211530e787628 02833e01a61a628ee2a9b66055c6de504ad914f3 c130b89bc11310319c4a14fb5202ad8dc76dc315 beff9e4005cd75971fb0bff578801f473abdb41d d40d66b5dedb94927c66187d82a1fc14d60b3103 e4c77b3a147b02a73242793c420c0560f95a2876 f315760c9c7065ff85e9e83dc7c1a054188d2fb6 53b6a7b1c8988172b56ccd4c2f90648ff9386298 04d101f4af4441e89581f4b47a59f532ecea968c 37814f07206ab3435e2344bf1e0b66768f771eb8 cb2e3d35ab49be64c23f9e19172086ba4a9a8cc6 646b37cc9131fa107ce4710b7f647e32d5655e04 4a81cf2c260d7d907509874dd538f8a2628c365c,, travis Upload simbody binaries to sourceforge ,To speed up travis builds for OpenSim  we previously uploaded Simbody binaries to  [Bintray](https://bintray.com/) after successful builds on the master branch.  However  we have not been able to upload new binaries to Bintray because  Bintray only lets us update a given release about 100 times.  This means that  OpenSim's Travis builds are relying on a very old Simbody build.    In order to maintain this type of cache  we must move to a different server. In  this PR  we now upload binaries to sourceforge  here:  http://myosin.sourceforge.net/simbody_latest_builds/. (Note: This location is  deliberately somewhat obscure so that users don't really stumble upon it; it's  really for development purposes.)    I wanted to avoid storing a plaintext password for ssh'ing into the sourceforge  server. This results in a fairly convoluted script/procedure. I have tried to  document what I've done so that I have a shot at reproducing the steps in the  future.    I verified that these changes work; you can see that some of the binaries at  https://sourceforge.net/projects/myosin/?source=navbar .    
simbody/simbody,201,2014-07-23T01:18:59Z,2014-07-23T16:29:58Z,True,2014-07-23T16:29:58Z,6ae58976913a89bd83f95a6f00e1c96af10716aa,1,1,923cdedd918c6368c3ade13c69e4a5d97965cd3c,,Document SIMBODY_VISUALIZER_NAME,See #5. 
simbody/simbody,120,2014-02-15T21:12:35Z,2014-02-15T22:07:37Z,True,2014-02-15T22:07:37Z,00674511863274547d785851d90e0f95f5d933b3,1,1,4f2ac50c1d4be466b679f158d892d7b384bb2b3f,,Always add SIMBODY_VIS _INSTALL_DIR to search path ,I ran into a scenario where I had set SimTK_INSTALL_DIR  but there wasn't any simbody there.  Previously  SIMBODY_VISUALIZER_INSTALL_DIR was only added to the search path if the env vars weren't set. But what if they are set but just set incorrectly? The SIMBODY_VISUALIZER_INSTALL_DIR should always be added to the search path. 
simbody/simbody,559,2017-04-04T07:18:43Z,2017-04-04T15:23:57Z,True,2017-04-04T15:23:57Z,247f0cdb2916317115e50186c2f3ee0a177e02b3,7,4,0d1d3211b7501c20b9d7d6af11bda65355784444 67b1d1a0aa7fb520fddaa586a4f4b1635d5e471d c9aa213763bd2cb0f4a789e283c439fde58cf37c b8e824423f03c458477ac79a42150bce84bd0eab,,Visualizer relative search path,This PR fixes #558: the path from the SimTKsimbody library to the simbody-visualizer is added as a search path in VisualizerProtocol. To facilitate this  I added the function `Pathname::getFunctionLibraryDirectory()`. I also added a small test  and updated the documentation.    I tested this locally on both macOS and Ubuntu 14.04. I was able to rename the install directory and successfully get ChainExample to spawn the visualizer; this behavior was not possible before this PR. I also tested this PR with OpenSim on macOS and was able to verify that OpenSim's MATLAB bindings are able to find simbody-visualizer even if the original simbody install directory no longer exists.    Unfortunately  I realized that this PR may not be sufficient for OpenSim's Python bindings to find simbody-visualizer. This is more of an OpenSim issue though (it depends on how we expect the Python bindings to find the SimTK libraries; do we copy them into the Python package or edit DYLD_LIBRARY_PATH/RPATH?).
simbody/simbody,560,2017-04-09T04:18:58Z,2017-04-09T04:55:30Z,True,2017-04-09T04:55:30Z,332fd91cc6c17d4fbc1a2b1d41757f814174c8b6,1,1,d293b61a32a61139f22855739ff2244d1cc23c60,,Fixed typo,
simbody/simbody,533,2016-10-15T22:57:30Z,2017-06-02T04:29:47Z,True,2017-06-02T04:29:47Z,6c8aa53a65fcd2d9efee59f4965cd1c4ba00e2d2,1,2,4702e303d42c138452db5f18bafc161d94bc5c5e e047eea8a1f5074829eb18afa9b526a25cfd1231,,Suppress clang warning about nullptr dereference in NTraits h,Addressing #525. 
simbody/simbody,565,2017-06-19T01:12:55Z,2017-06-19T13:25:16Z,True,2017-06-19T13:25:16Z,6e3abc507f599e616b37fa0fb5e3dc287c356876,2,4,db620c57f8728085603ec85c614ef3bcf8a212d7 a320beafd0fcb2042692498e78b5c71364fdcfc3 f9100571e9e77cf526428af98937b214a4237ab5 2e6e0f3cc04a722e8a3cd515b6b0c7cd530aedde,,Test that RowVector can be created with 0 elements ,~The hope is that this PR will eventually contain a fix for a bug wherein RowVector cannot be created with 0 elements (I'll open a corresponding Issue in a few moments).~    EDIT: This PR now contains a fix to the RowVector bug.
simbody/simbody,570,2017-08-15T01:21:24Z,2017-08-15T15:02:32Z,True,2017-08-15T15:02:32Z,fd5c03115038a7398ed5ac04169f801a2aa737f2,1,1,27c448985105d775e52730e0fc004a4a36cda1c5,,Do not store Force in State cache ,Fixes #567.    This PR replaces the use of `Force*`s in the state cache with `ForceIndex`  as suggested by @sherm1 . I tested that these changes work fine with OpenSim  and that performance is not affected.    This PR will allow me to make a fix to `OpenSim::StatesTrajectory`  and may help @mitkof6 with some issues he had in OpenSim.
simbody/simbody,571,2017-08-16T06:24:48Z,2017-08-28T16:04:37Z,True,2017-08-28T16:04:37Z,3a032cb77731c42eb1db3b0ba30150bb2d639258,1,1,6e45a2e3d8c0f67a977a4c1fecf23a33bb48a5b9,,Update ExampleLongPendulum cpp,
simbody/simbody,568,2017-07-22T09:23:04Z,2017-08-28T16:46:48Z,True,2017-08-28T16:46:48Z,d81faaeea0a7d6cc5d46510dd2c0122231d42d43,6,6,f42364e207aa75f92f5905daec1023fd4b796b93 bdee550202b2b2b938062b76a7ab416dbbf5584e d0bd60966c8ceaf468ed28803217bbdd51d63baa a19b9619cf175292880a1d48396458e11a153f51 c4bb36601c1209de355d146cedcb902ded4d067e 0b751b295e6e1c26dce2bdb5f8ece334e08c56bd,, static Allow only static compilation of simbody/simbody,This PR adds the possibility to compile simbody in a all static way    We use it with         cmake -DBUILD_DYNAMIC_LIBRARIES:BOOL=OFF -DBUILD_STATIC_LIBRARIES:BOOL=ON ....    A message error is thrown in case these two options are set to `FALSE`...    Reason of this PR:    When needing only static version  we can avoid dynamic compilation (save 50% compilation time). Also  dynamic compilation requires to have blas/lapack to be compiled with -fPIC in case of use of static version.  Disabling dynamic compilation allows to use static versions of blas/lapack coming from Linux distro  that do not use -fPIC for static libraries on 64 bit platform.    1) This PR does not change anything to the previous configuration and compilation steps for simbody    2) With static compilation  all tests do not succeed  because of tolerance problem    -  81 - GazeboReactionForceWithAppliedForceRigidStatic (Failed)  -  95 - GazeboReactionForceWithAppliedForceCompliantStatic (Failed)  - 104 - TestReverseMobilizersStatic (Failed)    One can see a log of these errors [here](https://travis-ci.org/Gjacquenot/simbody/jobs/256158634)    I have discussed this with @chrisdembia   who told me that this problem was known and already reported [here](https://github.com/simbody/simbody/issues/522).    3) Finally  I have fixed a broken mingw table in README.md.
simbody/simbody,573,2017-08-30T04:42:23Z,2017-08-30T04:42:55Z,False,none,5106cc65517ed9b78ab0812da6bda9892c905bc2,12,32,024b56252bbcdb53ba80a7e810d36efbdd65c56e b3cf8ddce4195fa6790c19bf57623572363b351f b537d712e8722367c815a7ed5e9c0a81b8950173 78cb5801564622d549e97e5dab2ded81c5d811fd 16a5fe66c273521b8fbf34b09fa874641362dea7 2a13a65af739e33ac22086666c88dfbecb513009 998a260f31941b31abb4ea55d2f635ccdd8d9039 994476018621fff42e82ec3897bcec78fbe2c815 a5f5f25212a1a6fed9b19b3c6dcc71cd54632331 5f2d9f10ea04277c52c3f783653e1c44dad931ed 47227eeb8f4fd7f826f5eb321232b5ea7d05892e cbb35591e779b2622a12c15ac20afb88baf7463a 0ba392812a4823038b2457a3cd28e357a123e635 d725c48d400870be1dc7e0d363f41a6b8c1c8dd2 531d420b8799dda1e35ec548d7a825c04c33b865 ccb648e3fc6ed1dbc0b75d018a70cf3f1c013e8c 5622967f1d5ac21ea17538711379dee0a30a6e34 a2d2eb3c09f4074f7da24606d85725128e775d17 d7445de6d29ceb45f7f3efc433afc3b09ee639f0 4d260ad3e8b9a2c299aaeb668cfee54ec4a2f489 33afc1698243eaf17ca12c961fbdeddb10bd919c fe1469f87ac464d6307ed9701cec5c2e4c46fb55 8ea3294a386988f73d23a6273ff009f9afd8a16d c567d2efee185f4239e3886ce95d3ba95ab75942 ab6852f41982a938ca8b1e9ec06dae8f6e8064ed 236d95d115816d03f01a17ffabb392431d7e73bc 1ae389c3b22114010b44e33336d4f8f0fa614e4f 56fb5bf5bf823d3be93a57c85e8b8bc0c16d3ff0 d0c86efa6bdc92a930993784235485f1bb675ce9 1629337342ab6c0da74742aede2218abd744acbc 3c6e67c01cca30789b1301c8132fd698f018e04c ad602b0db1aadb2676774122f901dc916259536d,,Ci testing,
simbody/simbody,576,2017-08-31T18:05:52Z,2017-08-31T18:47:59Z,True,2017-08-31T18:47:59Z,47171ec191767633bed60455dc0d5f7d6d902dff,1,1,e64fe7695f70921328e1f76004f3bb34a28331d3,, contrib Add Antoine s contribution to CONTRIBUTING md,This PR mentions @antoinefalisse's contribution in CONTRIBUTING.md. We can update the description with subsequent PRs.    I also had to widen the "GitHub Id" column.
simbody/simbody,575,2017-08-30T06:08:13Z,2017-08-31T16:59:31Z,True,2017-08-31T16:59:31Z,6f8a4ee3bbd2deb307bc9f97e96b024e45e4464a,6,9,8f4d7bad5e9d8017de8ac9d8e58d174660a19b63 d72e84f135f01395964452bd2670d390a05bea2b 5da70e669b8734c9da050b3ddbad9d94771c2b1e 6b58f320ac886a929d1e88888521b920491d181e e7b2f2637c121751628842eae8f2a7f2c1d925fb 2c984a63e1b6bb10bde38fafd99cd94d94a41a61 995a3ad2c9e11675b0059e812721cccf6c26bb70 f9fecf7fd16dfb8d6de0ead073160ee07bca6f8f 2b4510dac86fe8b36fd264f26eabfe18f09fe06d,,repalce std memcpy by std copy,We are trying to bring automatic differentiation to Simbody using ADOL-C. We have observed that std::memcpy does not work with adoubles  since this will copy the location in the tape and results in a shallow copy rather than a deep copy. Instead of using std::memcpy  we have seen that we could use std::copy which works with adoubles. We read that std::copy would delegate to std::memcpy when it is appropriate. We therefore would like to change the calls to std::memcpy by std::copy. Note that building the libraries in Debug mode (not with the other modes) gives a warning related to the use of std::copy.    Issue #574   @sherm1 @chrisdembia 
simbody/simbody,579,2017-09-17T07:58:19Z,2017-09-18T16:24:21Z,True,2017-09-18T16:24:21Z,e3f194583c158882d9a4fde1de64488634ef0584,1,1,09c9562f6ff013b01240288cc9224c2aa1e0695d,,Avoid clang warning related to defined in macros ,This PR avoids the following warning from Clang 3.9:    ```  error: macro expansion producing 'defined' has undefined behavior  [-Werror -Wexpansion-to-defined]  ```    This warning is causing the CI builds for #578 to fail.    I tested that Simbody passes all tests on macOS 10.12  using the macOS 10.12 SDK  for deployment targets 10.12 and 10.11.
simbody/simbody,555,2017-03-27T07:16:54Z,2017-09-25T18:33:33Z,True,2017-09-25T18:33:33Z,931a8c241a2693a10a26119e2a9f00fd3cfb1ac5,1,3,61707f9c79e63ebbbe8150ac45972d6ba5c69aee 9de24b233d946a3bde49ec5f59843553d29ea3b7 ec609c1290f4f2c6aa0c80b282d8528916573746,, travis RelWithDebInfo Release,I would like for the Simbody binaries built by travis to eventually be used with the OpenSim binaries that are distributed to users. Initially  I had thought it might make sense to distribute RelWithDebInfo binaries to users  but since @aseth1 recently reported that Release binaries were substantially faster than RelWithDebInfo binaries on Windows  I think it makes sense to release *Release* binaries.    Therefore  I would like to switch Travis' build types from RelWithDebInfo to Release. This also helps make us consistent between Travis and AppVeyor (which is already using Release).
simbody/simbody,583,2017-09-30T05:32:54Z,2017-09-30T17:59:55Z,True,2017-09-30T17:59:55Z,062bd6b38432cc90a73dd80ef58d746c9044e5f0,1,2,eae1808c9a5c5c8bba289192861407b78dd3dd06 6c55b5406d3039856fd09b09016b99e0c3f0d256,,Avoid Winstantiation after specialization from AppleClang9,This PR fixes #581 by following @sherm1's suggestion to suppress the warning.
simbody/simbody,585,2017-10-01T06:34:18Z,2017-10-01T20:38:45Z,True,2017-10-01T20:38:45Z,c9aab73cd4463c106f46136449fd0f17a45a4e9e,2,1,2a622713634a1d255ce13813349a243563526dea,,Fix CMake so that examples depend on simbody visualizer ,This PR fixes CMakeLists files so that examples depend on simbody-visualizer. This used to be the behavior  but I think it was broken when examples were moved to the root of the repository. I did this by defining GUI_NAME in the "parent" scope.    I verified locally that this fix works.
simbody/simbody,580,2017-09-20T01:33:11Z,2017-11-13T18:44:08Z,True,2017-11-13T18:44:07Z,89fe55062311b45f1821b28149a5075b92f89ada,183,2,788d82e3a58f9bf3b3d3be3fbced1a5eea868ea5 55451f8d0fcf6fbd9d3b2ccd3211662e13b22343,,Change Ipopt namespace to SimTKIpopt,This PR fixes #510 by changing the `Ipopt` namespace to `SimTKIpopt`. This allows me to use Simbody with a different Ipopt in my direct collocation software.    An alternative solution is to create an option for users to "bring their own Ipopt" for use by Simbody. Changing the namespace is a quicker fix and prevents "branching" where Simbody is packaged differently on different platforms  etc. Also  Simbody's Optimizer classes provide dense Jacobian and Hessian matrices and Simbody's Ipopt uses a dense linear solver. I'm not sure that the sparse solvers that Ipopt typically uses would perform as well with dense matrices.    I'm not sure what the license implications are of my changes to Ipopt. If preferred  I could create a patch file and have CMake apply a patch to these files  rather than modifying them directly. Not sure if that helps (FYI this license file in the repo may be helpful for thinking about this: https://github.com/simbody/simbody/blob/master/SimTKmath/Optimizers/src/IpOpt/LICENSE.txt).  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/580) <!-- Reviewable:end --> 
simbody/simbody,592,2017-11-29T05:10:27Z,2017-12-01T02:10:16Z,True,2017-12-01T02:10:16Z,421e8516be14ad67a7663138d24cebd2b95894ce,2,3,33d8e0fbb78fd9e285c8495277856a8d74891b21 ebf2aa54385318cd7c9e460398fc9e329a8150cd 7046f85d9a0d5227ca4964b96e333c8f651a1e55,,Fix MultibodyGraphMaker bug when handling massless bodies,MultibodyGraphMaker takes bodies and joints and finds a spanning tree. It works breadth-first by adding all the base bodies (level 1  bodies with joints to Ground)  then all the bodies with joints to base bodies (level 2)  etc. until it reaches a level where it can't find any body. If there are still bodies left one of them needs to be connected to Ground by a free joint  then we can resume.    A massless body modifies this algorithm because we can't end a branch with one. So if we encounter a massless body at level n  rather than wait for level n+1's turn  we continue on lengthening the branch top n+1  n+2  etc. until we hit a massful body. Then we go back to the rest of the level n bodies and move up to n+1.    This PR fixes a bug where the algorithm did not properly keep track of the fact that  while working on level n  it may also have added some bodies at n+1 or higher due to massless bodies. So then when moving on to n+1 it would decide there were no bodies remaining to be added. That meant it would go try to make a new base body by adding a free joint.    The proposed fix is to keep track of all the joints that were added so we can check when at level n+1 if an already-mobilized body was actually added during this same tree sweep and if so count that as a success and keep going.    Resolves issue #537 reported by @aseth1.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/592) <!-- Reviewable:end --> 
simbody/simbody,594,2017-12-01T23:38:11Z,2017-12-02T20:56:28Z,True,2017-12-02T20:56:28Z,1fb07d6b0725f595a03065cb3343af485018a439,1,1,2febdb7756fe57b6fe092a4ddba01f10236964db,,Add TestMultibodyGraphMaker ,This PR adds a test case  described by @sherm1 in #592  that checks behavior for the following:    - serial chain  - massless bodies (intermediate or terminal)  - simple loop (four-bar linkage).    <!-- Reviewable:start -->  ---  This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/594)  <!-- Reviewable:end -->  
simbody/simbody,588,2017-10-19T04:23:58Z,2017-12-06T03:08:23Z,True,2017-12-06T03:08:23Z,0068aa460e353ca53e98225d663907d97cb0bd4f,8,23,e1ca69cfe07719c91d205c7037ab739707d266af 991265c2c9e3a8706bf43e703bc87269fb3f1878 f60587f22a97a24d01b07ea0418737cb2e933b1e 248eb7de0198e353bba1e149b810971f6067acb1 7c3546aab04279a5aae6e47a3cb847fb9f538e88 627511e38557f5c1e0d676f2a2896d8450eec8d5 c091834e35347241775a1a75699435cb18d75776 a1c05691ff4c4ed179823acf625af8395283dd78 496530edc8715074f4c41593c2096608bcd8d955 7d2275dc5b630cbc0b444ada533e9f7d854ab226 a2f33740a940be65be49f2dd0fb6f9364416c7e3 ddf8256458e91fb985ec67334f32f664fdc6ab0a a493e99811103ead6685680e0d438c4943a5f20f 9bc2fdc2ab41dd4f3eb1c9fc2df26aaaa0fa2477 cfbb42640babc6a90e7aafa2c4010d47eedfda36 7253364c566bd5caa164da24a9e6dbe611067cfa 1564700c130e189aace30104b9b1f0d65d65a103 df1c4e4bdd241e267d5bacf0ba2712e145e8835a 70bcd5801d57c4ec3299af996c296fafe26ddf73 bb29c91efd7927e24528e96e283f1e2b56c47d20 d5a72c48974c2ea00599b4af9a8bc529efa40789 29852ca63d64c4c3099b8a808a0b7dccae5a5a1d d2c3b0e421ce5f7ce230c94144f1c0e6c4169bb4,,PR CMake,In this PR  we modified the CMake files needed to build SimTKcommon with adolc    @chrisdembia     Note: @chrisdembia  there is still one of your TODO in adolcTarget/CMakeLists. Perhaps you were still intending to do something. We can look into that when reviewing the PR.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/588) <!-- Reviewable:end --> 
simbody/simbody,491,2016-05-08T07:54:51Z,2017-12-08T08:21:02Z,False,none,56548ef111232bf439057fd50a45f3ac074f26cb,10,15,a6d63df121552538ea2788208bf89020cbe2ae1d e23d29d6b04a65702bd17968b0f95c55fbc2bc72 2a42004c6fa23122c49dae61763c617629a53d29 e859407a86fb38fd21c77b64507db189fce7962a ce260eeea89a3174185f06b2d19e356b71c1d115 3d3565703ef61faf9f6fc37c15f5e30d4ae42d85 519a89d0c6423acb4df608785e3fff5411ad81a7 ea24d4978f57ab8648dd7ef6ef2e5444c425fd24 5efde6292c4b1224b38901fea6f898a80f871df1 4087b6247068de2ac201d7a3b11b9ea7132cdb2e 2c2234d2c67ac99bfdb63ea3ddbf2856582861a7 48f488e8b509c90b067f9a9d31acb89979e188f8 a734920402d0bd68015f7a03426db9de348fd17c 47a13ffe5715452297ef586d1b9e07334a948d03 5d82321c2cd589a39bcb546fa849cf5f6ffc7b63,,Get rid of some compiler warnings,As stated #13 I'm making some warnings removal.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/491) <!-- Reviewable:end --> 
simbody/simbody,489,2016-05-05T21:51:27Z,2017-12-08T08:25:51Z,False,none,b7fe8ac5d19527dfda4d59856b77909b99866723,7,4,c48af6114a5da361ab0ab597f09439b196d9ff9b a4287287e47ac04fc22f078e54623e0b5c4bf2af 4f5a0fc85b1ecdeb2d13b0a8f3ea73c29e7b55d3 b301b2ad1ffe0cc8be4fc85fc0260a7b2bda29bc,,Add initializer list constructors,Adding basic C++11 braced-init-lists to math objects. Refer to #13 .  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/489) <!-- Reviewable:end --> 
simbody/simbody,597,2017-12-13T17:30:49Z,2017-12-15T15:55:47Z,True,2017-12-15T15:55:47Z,59e5b9ee313e5c7add1a503126cd2aec122a01a8,21,6,e1ca69cfe07719c91d205c7037ab739707d266af 991265c2c9e3a8706bf43e703bc87269fb3f1878 e85c357e99c6067339e5f8dea3a776aa3a414941 7719250686f276d5bdced1586524acfdeb8be9e2 2fb72fa34c6c7365d3d69036ae18afaf47695c2f c2b20b9db9ca44c154e9524d79c0f452076ec227,,Remove support for long double,This PR aims to remove support for long double ( #596 ). I have removed pieces of code where long doubles were used and adjusted comments where appropriate. I am not sure that long doubles had to be removed everywhere though. For instance  in `conjugate.h`  I removed definitions of operators involving long doubles but this may not be the right approach. I did not touch the definitions of the `SimTK_NICETYPENAME_LITERAL` involving long doubles in `common.h` (I did not touch `TestNiceTypeName.cpp` either). Please let me know if this is the intended approach or if I should proceed differently.    Reviewers: @sherm1 and @chrisdembia  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/597) <!-- Reviewable:end --> 
simbody/simbody,598,2017-12-15T00:26:18Z,2017-12-15T19:30:58Z,True,2017-12-15T19:30:58Z,81fc6c5d8c85e868063d128ed21822001927bf37,1,5,b71f6a07ab31419bc8cde5e41a9dc06186480aa2 3c972388c38f02ae61660aa9fa9191ed68592795 402f55cc1ccef9bff912da7d40b53530f84a9f15 21c987284cdd60c77ecfb6d579f283dbb0036ae3 2ce4e436120b14915a939809cbaead8b38d282d6,, travis Add test for ADOL C libraries,This PR adds a build to Travis-CI for which `BUILD_ADOLC_LIBRARIES` is `TRUE`. Ideally  we would reduce the build time by not compiling the non-ADOLC libraries in this build.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/598) <!-- Reviewable:end --> 
simbody/simbody,599,2017-12-16T22:29:53Z,2017-12-16T23:49:58Z,True,2017-12-16T23:49:58Z,ff4868f210a0bb1a94ec78d718b89187a51b441a,1,1,de86aca168ac5b7992ca4dcf7629bf59eb537023,,SimbodyConfig cmake handles BUILD_DYNAMIC_LIBRARIES off,This PR fixes a bug that can occur when searching for Simbody dynamic libraries that may not be available with the use of option `BUILD_DYNAMIC_LIBRARIES=off`    This bug was reported by @chrisdembia in #589  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/599) <!-- Reviewable:end --> 
simbody/simbody,586,2017-10-02T00:27:26Z,2017-12-17T21:12:04Z,True,2017-12-17T21:12:04Z,9cd33a575d9aeb6a16f769364bd9e48d904f0444,10,6,3d83174ad2122627d70400a2b1a29ca1c9903c7c 3aec875282ad0c86d17f647039a94cc9b7cacaf1 767010977846b28682f1860e240d6192cb3894da e4f21cf4018ccf00d5ba21e161b5bc884e4c4e01 82894d43690b60586121113f130c4d847559ad45 6ccb3199ff693dc9ade310720b3d2cebef9ff898,,Replace AtomicInteger,This PR removes the AtomicInteger class with `std::atomic<int>`.    This is the first of multiple PRs for replacing pthreads with c++11 threading support.    The target branch for this PR is `feature_replace_pthreads`  a feature branch I made to gather all the PRs I'll be making.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/586) <!-- Reviewable:end --> 
simbody/simbody,601,2017-12-29T18:36:11Z,2017-12-29T18:56:59Z,False,none,9ab5d51c5c3dff78dbb8f1d97e19f85519972350,24,36,a05c0c8a95024c291db4bd7bc3814841ba49e731 7579b65b5e2ae0a9485d2386fbb6c062539e75d2 46e6b249a4beb256356d868f9439ae9b34e37dd6 2cedab379b8dc4e22dd42ca24d25c8e3671a79b9 6c33e283166a5f9743759c89484768cf318ed3c4 4b329f1b8ca1d2c491fa9e8313018e931f559fe8 86d4243f8665b7b606011f6ca88c502f801e97bb 38be72e55d5258efeb1d8d738bc700b39dd0cc16 302d43c09240c0db4bd7af1e0bf15de0f6b2652d a50aca407cc0c8fadd4fbf27c7781a7bcb2a87ab eb3451524d6ab1ef29178c3bc22225f202440685 cfb68c86a6b21246e3751b7d9659a5fccf559be0 05dad3d0947920ec4b098821de30d135fa957695 bfeb97c6270ab1e7143dbed336cef1dc24e1414f fd5d35d693a555c43d2e67ebdfeca3a0b9439d35 6c7a06b26ee4e9d0a1acd98693af4185f6b9c61a c29ba434e78b466dbd898c6d7ac579d3b17110b9 4129737a977ee2dfba9dda881dd94453c038dcb3 ba66cbf95ba0d9c6a99c7ab57b02715ce2c30f47 2a89c5c1d1522556bd551e1ddd57b018f5ad75c7 ddae01fc332e808ec66a2ed9dbd2c841fee930fa 6ec69dbe49c67e325e54c51f116e02aa9e193511 a2a94422e66afb768e9d20b5c9f4380a4625d2b4 4a194db71c284d06637f0c890bac701247071d81 32e0054b1ce0d1fda774513325d49ccca637622c 095498b49531aac7fd4ec6b4a96390f1bc4b9071 db1842cd227a3be8dcaa040457592d08474b9731 8cbe2a1567332412f54fac9b7b5e74999a4208a9 368dd07b838d7537131106152a3999d6654eec75 4106d9c994e576d19edb1731018b62fcb66c1fb8 6ee985e9818f2dfda6521b50b3558d1b0e38293e a55583ae4bc35b1b84de93380683da41b1c391c1 44fe8cbd4d4b111306b7b8b34b07350b57a54747 18beda5f16f7b98a9fe87de68b76220de7cc7363 5e20972e5531bcd174f9453bd1acdf63e5827b3a f87d33ef4fcff2d7f2983206ef12441fe134f3bc,, WIP Replace pthreads,This is a WIP PR for replacing pthreads; see #584.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/601) <!-- Reviewable:end --> 
simbody/simbody,587,2017-10-02T06:46:08Z,2017-12-30T00:28:38Z,True,2017-12-30T00:28:38Z,37719af74295a50886f9954c8f052810430d89a7,16,9,4a194db71c284d06637f0c890bac701247071d81 32e0054b1ce0d1fda774513325d49ccca637622c 095498b49531aac7fd4ec6b4a96390f1bc4b9071 db1842cd227a3be8dcaa040457592d08474b9731 8cbe2a1567332412f54fac9b7b5e74999a4208a9 368dd07b838d7537131106152a3999d6654eec75 2471492af79127711d5c4628d706bfcada91d661 98a182f2b2c8b60bb53b93cd5167cdb47708eafe 917adf72b6474fea2d90829684ba0aa80d720254,,Replace ThreadLocal with c 11 thread_local,This PR replaces `SimTK::ThreadLocal` with C++11's `thread_local`.     Unfortunately  the Travis CI test fails on OSX because only Apple Clang 8 and up support this keyword (https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports/29929949#29929949).    That means that users will either need OSX Sierra (10.12) or need to use normal clang (not Apple Clang)  perhaps via `brew install llvm`.    Related: #423  #422  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/587) <!-- Reviewable:end --> 
simbody/simbody,602,2017-12-29T18:57:31Z,2018-01-07T21:00:34Z,True,2018-01-07T21:00:34Z,d002a5ea7b0d7a058a9ebb7e1aa6c220d48d8b6e,22,48,a05c0c8a95024c291db4bd7bc3814841ba49e731 7579b65b5e2ae0a9485d2386fbb6c062539e75d2 46e6b249a4beb256356d868f9439ae9b34e37dd6 2cedab379b8dc4e22dd42ca24d25c8e3671a79b9 6c33e283166a5f9743759c89484768cf318ed3c4 4b329f1b8ca1d2c491fa9e8313018e931f559fe8 86d4243f8665b7b606011f6ca88c502f801e97bb 38be72e55d5258efeb1d8d738bc700b39dd0cc16 302d43c09240c0db4bd7af1e0bf15de0f6b2652d a50aca407cc0c8fadd4fbf27c7781a7bcb2a87ab eb3451524d6ab1ef29178c3bc22225f202440685 cfb68c86a6b21246e3751b7d9659a5fccf559be0 05dad3d0947920ec4b098821de30d135fa957695 bfeb97c6270ab1e7143dbed336cef1dc24e1414f fd5d35d693a555c43d2e67ebdfeca3a0b9439d35 6c7a06b26ee4e9d0a1acd98693af4185f6b9c61a c29ba434e78b466dbd898c6d7ac579d3b17110b9 4129737a977ee2dfba9dda881dd94453c038dcb3 ba66cbf95ba0d9c6a99c7ab57b02715ce2c30f47 2a89c5c1d1522556bd551e1ddd57b018f5ad75c7 ddae01fc332e808ec66a2ed9dbd2c841fee930fa 6ec69dbe49c67e325e54c51f116e02aa9e193511 a2a94422e66afb768e9d20b5c9f4380a4625d2b4 4106d9c994e576d19edb1731018b62fcb66c1fb8 6ee985e9818f2dfda6521b50b3558d1b0e38293e a55583ae4bc35b1b84de93380683da41b1c391c1 44fe8cbd4d4b111306b7b8b34b07350b57a54747 18beda5f16f7b98a9fe87de68b76220de7cc7363 5e20972e5531bcd174f9453bd1acdf63e5827b3a f87d33ef4fcff2d7f2983206ef12441fe134f3bc de5d815c3dd604bf7180e2c99771bf030b4db2ac 0b4ea669dca82e2893e5d055056dc3e83ed4989e 20db45ebcb87eb9cbaba77955f4bfe11084977ce 7f820b57a62661f2d2dba2e155b265d8733f3be1 d9773c0fcc747ac0e5361bea1da6db2ad4fcb03c 4a835bb68e5fced9f67afb7c0e4ec63a1008c043 15967d5e6acab0224aa778b512df5719eb45b989 db90ebbc65cc348d941a0bf222eec9a33dc1e1d5 4131e4994261346e6dad726800d8cf34db2f2f02 bbfd13710482b220345f9146f0901503f24d2b79 3b3a81e745c4f165a7e231a31a82536699378845 2548e80961849ef148af6a9d09f11698d032a44c 478c6113d70dcda0cd36fe70aa5ff566a25113c8 3a2523794f1391eba12bbddf14461123edfcdf9c 4465d917f5c8e3ebe1ddcfd9cb524ea3561513ea 6f092161ae2facbc60bee7d103e6186e0e5ea575 7e3075afbe14c0d52b1c85a94f77aa64861f7c7f e6ba3c225c00f1d3a2a2da64d34bb1d6e56d3956,,Replace pthreads,See #584  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/602) <!-- Reviewable:end --> 
simbody/simbody,595,2017-12-06T20:05:00Z,2018-01-07T21:05:37Z,True,2018-01-07T21:05:37Z,5437270736a2a751d5b7c2555582b49ca478113e,4,2,1c86c3d7374769801bc76c6b3d47c419f2cfb4bb 3865909b0ae465118dc50ea5edcde48750be6098,,Move doxygen files to doc ,This PR moves the doxygen input files from the root of the repository to the `doc/` folder. This has the benefit of cleaning up the root directory. I'm making this PR in advance of creating a new Doxygen page for ADOLC-related information.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/595) <!-- Reviewable:end --> 
simbody/simbody,605,2018-01-07T22:21:49Z,2018-01-08T02:44:09Z,True,2018-01-08T02:44:09Z,a899db7be06ff3ae70c4b60a8922e62b5b6a8a63,43,67,a05c0c8a95024c291db4bd7bc3814841ba49e731 7579b65b5e2ae0a9485d2386fbb6c062539e75d2 46e6b249a4beb256356d868f9439ae9b34e37dd6 2cedab379b8dc4e22dd42ca24d25c8e3671a79b9 6c33e283166a5f9743759c89484768cf318ed3c4 4b329f1b8ca1d2c491fa9e8313018e931f559fe8 86d4243f8665b7b606011f6ca88c502f801e97bb 38be72e55d5258efeb1d8d738bc700b39dd0cc16 302d43c09240c0db4bd7af1e0bf15de0f6b2652d a50aca407cc0c8fadd4fbf27c7781a7bcb2a87ab eb3451524d6ab1ef29178c3bc22225f202440685 cfb68c86a6b21246e3751b7d9659a5fccf559be0 05dad3d0947920ec4b098821de30d135fa957695 bfeb97c6270ab1e7143dbed336cef1dc24e1414f fd5d35d693a555c43d2e67ebdfeca3a0b9439d35 6c7a06b26ee4e9d0a1acd98693af4185f6b9c61a c29ba434e78b466dbd898c6d7ac579d3b17110b9 4129737a977ee2dfba9dda881dd94453c038dcb3 ba66cbf95ba0d9c6a99c7ab57b02715ce2c30f47 2a89c5c1d1522556bd551e1ddd57b018f5ad75c7 ddae01fc332e808ec66a2ed9dbd2c841fee930fa 6ec69dbe49c67e325e54c51f116e02aa9e193511 a2a94422e66afb768e9d20b5c9f4380a4625d2b4 3d83174ad2122627d70400a2b1a29ca1c9903c7c 3aec875282ad0c86d17f647039a94cc9b7cacaf1 767010977846b28682f1860e240d6192cb3894da 4a194db71c284d06637f0c890bac701247071d81 32e0054b1ce0d1fda774513325d49ccca637622c 095498b49531aac7fd4ec6b4a96390f1bc4b9071 e4f21cf4018ccf00d5ba21e161b5bc884e4c4e01 db1842cd227a3be8dcaa040457592d08474b9731 8cbe2a1567332412f54fac9b7b5e74999a4208a9 368dd07b838d7537131106152a3999d6654eec75 4106d9c994e576d19edb1731018b62fcb66c1fb8 6ee985e9818f2dfda6521b50b3558d1b0e38293e a55583ae4bc35b1b84de93380683da41b1c391c1 44fe8cbd4d4b111306b7b8b34b07350b57a54747 82894d43690b60586121113f130c4d847559ad45 6ccb3199ff693dc9ade310720b3d2cebef9ff898 9cd33a575d9aeb6a16f769364bd9e48d904f0444 2471492af79127711d5c4628d706bfcada91d661 98a182f2b2c8b60bb53b93cd5167cdb47708eafe 82181264578c6feac40877bbb6631e1af0bfe2ad 917adf72b6474fea2d90829684ba0aa80d720254 18beda5f16f7b98a9fe87de68b76220de7cc7363 5e20972e5531bcd174f9453bd1acdf63e5827b3a f87d33ef4fcff2d7f2983206ef12441fe134f3bc 37719af74295a50886f9954c8f052810430d89a7 de5d815c3dd604bf7180e2c99771bf030b4db2ac 0b4ea669dca82e2893e5d055056dc3e83ed4989e 20db45ebcb87eb9cbaba77955f4bfe11084977ce 7f820b57a62661f2d2dba2e155b265d8733f3be1 d9773c0fcc747ac0e5361bea1da6db2ad4fcb03c 4a835bb68e5fced9f67afb7c0e4ec63a1008c043 15967d5e6acab0224aa778b512df5719eb45b989 db90ebbc65cc348d941a0bf222eec9a33dc1e1d5 4131e4994261346e6dad726800d8cf34db2f2f02 bbfd13710482b220345f9146f0901503f24d2b79 3b3a81e745c4f165a7e231a31a82536699378845 2548e80961849ef148af6a9d09f11698d032a44c 478c6113d70dcda0cd36fe70aa5ff566a25113c8 3a2523794f1391eba12bbddf14461123edfcdf9c 4465d917f5c8e3ebe1ddcfd9cb524ea3561513ea 6f092161ae2facbc60bee7d103e6186e0e5ea575 7e3075afbe14c0d52b1c85a94f77aa64861f7c7f e6ba3c225c00f1d3a2a2da64d34bb1d6e56d3956 d002a5ea7b0d7a058a9ebb7e1aa6c220d48d8b6e,,Merge feature branch feature_replace_pthreads into master,Now that #602 is merged  the "replace_pthreads" feature is now complete. This PR simply merges `feature_replace_pthreads` into the master branch.    Fixes #584.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/605) <!-- Reviewable:end --> 
simbody/simbody,608,2018-01-08T04:38:20Z,2018-01-08T17:27:23Z,True,2018-01-08T17:27:22Z,8dd957f5837612cb067bc37a8c60e65bee85b50d,6,2,ab8437e784614ae8b97762aab76316adbf30bde6 dcb293b03709e7c579348f39318f09563e3230a2,,Deprecates some badly named methods in MobilizedBody Translation,The Translation mobilizer had some methods whose names were confusingly similar to methods in the MobilizedBody base class  causing unnecessary confusion. This PR changes those names and deprecates the bad ones.    I also had to re-enable the deprecation warning C4996 in Visual Studio. That had been disabled globally meaning the DEPRECATION_14 macro was non-functional. I switched to locally disabling the warning in the one .cpp file that seemed to be instantiating the troublesome code. I *think* that avoids the problem altogether but I'm not 100% sure.    Fixes #604. Fixes #607.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/608) <!-- Reviewable:end --> 
simbody/simbody,609,2018-01-08T07:45:38Z,2018-01-08T17:46:40Z,True,2018-01-08T17:46:40Z,4f8f2989b080a0e469ce027342fd7f9d0f3d83ea,1,1,30751c34e8efca9fdbc8b45991e5ed457c42fb29,,Fix git links in README,http://msysgit.github.io/ now redirects to http://gitforwindows.org/   https://code.google.com/p/tortoisegit/wiki/Download redirects to https://tortoisegit.org/   and GitHub for Windows has been replaced by GitHub Desktop .  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/609) <!-- Reviewable:end --> 
simbody/simbody,611,2018-01-09T07:40:17Z,2018-01-14T01:15:30Z,True,2018-01-14T01:15:30Z,731aa8687abe2feb2d91c2b5999781874f5e57e0,1,1,23064e19df384e2098ce27f0739ad70d304e0310,,Include GLUT header directory,This PR attempts to address #511 by explicitly including the GLUT header directory.    I tested locally in an Ubuntu VM in which I installed GLUT via Anaconda  not via apt-get. All tests except TestCoustomConstraints passed  and I was able to run examples that depended on the visualizer.    I tried testing via conda-forge/staged-recipes (https://github.com/conda-forge/staged-recipes/pull/4770)  but could not proceed because we require a more recent GCC than what is readily available (https://circleci.com/gh/conda-forge/staged-recipes/22676?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link).  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/611) <!-- Reviewable:end --> 
simbody/simbody,600,2017-12-19T23:08:45Z,2018-01-15T01:13:26Z,True,2018-01-15T01:13:26Z,959cead5da6de88c1a0ed1b21ba1a7cfc0e59f3a,5,8,3b8454c06392cac1f51a8874ce2ff169eb8664cb ed5ed56e33530cf9ae5496366a594c7048a42ad1 cb3a43cdb8c91c59f56d25f6c7cf3196fcb4e2f5 8d2bfb5005eab4d7082cce66362306f05ca98d7e 5ea2ecb8c70cca07b72274e7e628292be7224f82 e0fb9e6cf1529321cda3e1c4ae5be28a8452d15f 56813b7c217686a18828a3676b75e1eaedbd89ac e98b2852ce1b018a707b96552ded92ec5fef3b5c,,ADOLC Common,+@sherm1  +@chrisdembia. This PR contains the changes in `common.h` that will enable setting`Real `as `adouble` when building Simbody with ADOLC. However  for now  `Real `is still set to `double ` so that we can build Simbody with ADOLC in CI and have tests. There are a couple of additional minor changes in `common.h`. This PR also contains some changes in the CMake files that were needed to copy the ADOLC dll that is needed in tests relying on ADOLC drivers. `simbody_cmake_macros` has been directly copied from one of @chrisdembia's projects.  Finally  this PR contains a simple test case that does some trivial use of `adouble `  ie it computes the derivative of a simple function. Please let me know if you would like to see other tests in this PR.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/600) <!-- Reviewable:end --> 
simbody/simbody,603,2018-01-03T12:51:58Z,2018-01-22T03:13:29Z,True,2018-01-22T03:13:29Z,02badae959661fc525d63a24f548eb523c40e67e,4,9,39758171b52f7719133c3bca43e14e564724d7f7 77977abbea1dab92981540b911c89e0742fff1d7 84f15773301ce7e66320072a858b781cd574ce64 1fc089ece453921eba1ed0be7b55483224af79d6 28f174b561b1e23ca7f63255e2ac4cf9519ea24a 46ca93af35519dcd629ff63a2681717230394c2c 1dfd2f531129318906234cedd2c152869b00a021 bd2c05ac0565189ee230ec454bc2b800c3f36083 c7919cd1a31f55952f9f23dccdd140dde7902cad,,ADOLC Ntraits,+@Sherm1  +@chrisdembia. This PR contains the changes in `NTraits.h` necessary to build Simbody with ADOLC. Since a new exception was introduced and used in `NTraits.h`  I also included `Exception.h` and `ExceptionMacros.h` in the PR. This PR also contains various tests in `TestADOLCCommon.cpp` verifying that `NTraits<adouble>` works properly. I might need some guidance to design additional tests to make sure all is fine. Note that this PR is based on another PR (ADOLC common #600 ) that is still in review. Therefore  changes in other files should disappear when that former PR is merged.    I have attempted to include all previous comments. In particular:  - I have followed the suggestions of @Sherm1 regarding `isNumericallyEqual()`.  - I have tried to adjust the comments to take ADOL-C cases into account. I do not know whether we want to specifically mention each additional case or just mention that more cases exist when using ADOL-C. I have chosen the second approach.  - I wanted to include free function templates to reduce text as suggested by @chrisdembia but it did not work out at first attempt. I had errors when `T=SimTK::Vector` (or `RowVector`  `Matrix`). This mostly occurred in tests but also for example in Assembler (line 568 with `abs`). I also had errors related to ambiguous calls (eg `TestBicubicSurface` line 585 with `min`) . I had defined the templates for example as follows: `template <typename T> T abs(const T& v) { return NTraits<T>::abs(v); }`. I decided not to include the free function templates for now but this is open to discussion.    Here are a few additional remarks:  - When testing `isNumericallyEqual(complex<float> adouble)` and `isNumericallyEqual(conjugate<float> adouble)`  I had to specify a tolerance to get it working. Tolerances smaller than 1e-7 resulted in failure. I am not sure whether this is expected.  - To avoid warnings related to ADOL-C  I included the same few lines in `ExceptionMacros.h` (where `adolc/adolc.h` is included) as in `common.h` (where `adolc/adouble.h` is included). This seems like code duplication but I do not know how else to do.  - There are still lines longer than 80 characters. I did it on purpose in cases like `Widest` . Please let me know if I should change that.    Questions:  - For unit tests  do you want them all in different cpps or I can just add them in `TestADOLCCommon.cpp` as it is for now?  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/603) <!-- Reviewable:end --> 
simbody/simbody,578,2017-09-17T06:35:31Z,2018-01-27T20:21:52Z,True,2018-01-27T20:21:52Z,51d423ebd2d8f5ca5a4c086131f43032592338f8,1,4,203443717ee4d07ea82deeb6af4b8315f9ad24cb 50a7881ed852a0388144e536e71d8289e3d21779 7d52765727f9c0bf79ab2b024154f33020691d38 105592a2bb0bdce282e9ee27baacd81a08dcd04e,, appveyor Disable publishing to AppVeyor s NuGet feed from pull requests,AppVeyor lets us upload Simbody binaries to AppVeyor's servers  using our NuGet "feed" provided by AppVeyor. As-is  strangers can open PRs on Simbody to push arbitrary things to our NuGet feed. This PR prevents that.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/578) <!-- Reviewable:end --> 
simbody/simbody,612,2018-01-13T23:46:58Z,2018-01-29T04:15:41Z,True,2018-01-29T04:15:41Z,55858d4bd261842afe9f34db6210e33e136e4b55,8,5,1fe418521d9a3657c73adb90c750100ada855577 af66eb501656ecaf2ed92ae6ef38c34f440d465b 63839a3f6b901bb679d33b6360ed713a49cc5a85 93c118fe3be1351591506fb625178654972e3476 b976e336e75164b021f0da7e323863429e9cd481,,Update README and documentation for 3 6 ,This PR updates the README and user guide  etc. for the 3.6 release. The only changes I made to the docx and pdf files were updating the version number from 3.5 to 3.6 and changing the date to January  2018; both changes are on the title page.    +@sherm1  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/612) <!-- Reviewable:end --> 
simbody/simbody,615,2018-01-27T05:02:07Z,2018-01-29T04:17:36Z,True,2018-01-29T04:17:36Z,801cd0e79a7c53bbc93f8aa52836c4f49f2b719f,1,1,4a98902ddb4355f9ceee1fd35ce20404ccf00f88,, travis Comment out osx_image line,In the Travis YML file  we no longer need to provide `osx_image: xcode8` for `thread_local` support  because Travis CI updated the default OSX image to contain Xcode 8.3.    The real impetus for this change  though  is that moving to Travis CI's new default image fixes an issue for opensim-core  and it would be good to use the same compiler for both simbody and opensim-core.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/615) <!-- Reviewable:end --> 
simbody/simbody,613,2018-01-15T00:18:32Z,2018-01-31T07:13:51Z,True,2018-01-31T07:13:51Z,04fea5b60665d7d17a4078891aebba9a98a462af,3,19,d0b8db04302260f9ecab4fad55b61b30590cb4ff b53cccd6f6ab76110b0ed5b1a9490f9bcc61ffdc f75e9e1d43025d910900bad3b324c069571f2b1e b0837ec8a94981f070202fb63664d8e15e030b6a a8137bc7e496cfeb1c6f4950c3940f636bde1589 e8d2351c19191de011309092bf42c1197249c91e 416385792d7c97bbd0b1154373e9ba1324c54b51 037a50fde91b6e2f8cc4f8b9ec2b5aa1a0479f2c f128f66bc9f25640bc88a8c60e471bac6653ced2 8a0d6c1a76aa694aeda4f36049f4375936e87ece 71f2eb97af71372db4edb9f51ddf79cd47dcb9ab 8cc80bf6427571d47ca9011005611624ad61eac7 08fc90d4bf0d674e8a94acec01c5b4723d024ef8 279fb5b963e53dba20ae21114394c5e71acf6a16 aff59b063728e99e9603949435add9212c1aeabd bc5bcd2074b66a718d7d5c97fff332a413730c67 40137f63411357b75df1b9627c5641d11e1dbaa7 5f4040912a98aac32343e6fc4ab18fb03d098dc5 b751ef59fc05a2dbb72def24d497a232e80faf19,,ADOLC negator,+@sherm1  +@chrisdembia. This PR contains the changes in `negator.h` necessary to build Simbody with ADOLC. This PR also contains various tests in `TestADOLCCommon.cpp` verifying that `negator<adouble>` works properly. Note that this PR is based other PRs (ADOLC Ntraits #603 and ADOLC common #600) that are still in review. Changes in other files should thus disappear when those PRs are merged. Please let me know whether I should wait for the other PRs to be merged before going forward.    One remark: as already discussed with @chrisdembia    ```  negator(const adouble& t) {              v = -N((typename NTraits<N>::Precision)NTraits<adouble>::value(t));          }  ```  might be problematic but I could not get rid of the `value()` without getting errors. I have tried different options:    - Using the following statement gives me an error (cannot convert from 'const adouble' to 'double')  `negator(const adouble& t) {v = -N((typename NTraits<N>::Precision)t);}`    - Using the following statement gives me an error (cannot convert from 'const adouble' to 'SimTK::conjugate)  `negator(const adouble& t) {v = -N(t);}`    - Using the following statement gives me a warning (conversion from 'double' to 'const std::complex::_Ty)  `negator(const adouble& t) {v = -N(NTraits<adouble>::value(t));}`    - Using the following statement is error and warning free  `negator(const adouble& t) {v = -N((typename NTraits<N>::Precision)NTraits<adouble>::value(t));}`    Here was the conclusion of @chrisdembia:    > Perhaps we can go with the last option until we run into issues with it. I like it because it is safe  as value() will give an exception if taping.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/613) <!-- Reviewable:end --> 
simbody/simbody,616,2018-01-31T06:15:30Z,2018-02-02T01:21:38Z,True,2018-02-02T01:21:38Z,8872a13144e1389105ee3f99d3a099cd387538b4,1,3,046f16105b9ae3cccc891b8b040785459abdfba7 9ce25c3188809429da0f05f5674a45e9f157ddda 6944195026ff78345e362e377c554a198b911c62,, appveyor Upgrade from Visual Studio 2015 to 2017 ,This PR updates the AppVeyor file to build Simbody with Visual Studio 2017.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/616) <!-- Reviewable:end --> 
simbody/simbody,617,2018-02-02T23:01:53Z,2018-02-03T18:45:38Z,True,2018-02-03T18:45:38Z,a6b66f9143f7c2f6c71fd7a6f9476a207b62cae6,1,1,8dfc88a3aebe39b28dab6a5278f5cf4412acf53e,,Remove old TODO about std thread,This PR removes an outdated TODO.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/617) <!-- Reviewable:end --> 
simbody/simbody,614,2018-01-21T23:57:39Z,2018-02-15T01:02:44Z,True,2018-02-15T01:02:44Z,102fb5503216cafbe9dd5e739c72b1018c52e3b7,3,7,12267ec457e12ee097ba13bf0582fc7f883f6ff3 92b9bee126df80761632b734b445ff56b10b247d d4d8ca6c2c57fcee46fab0a9b4d2c42eae8387fd 90f78f4cde79ccb60e1b1d660c05459e43322ac5 858b4e2f1f62070785631ef1fd84b2b832686fb3 c8a89a39d7c3fb1a15e010cf6ac120b304335be9 fae5d1b247aaedcffd916e080d86d49253934dbd,,ADOLC Mat Vec,@sherm1  @chrisdembia  this PR contains the changes in `Mat.h `and `Vec.h` necessary to build Simbody with ADOL-C. This PR also contains various tests in `TestADOLCCommon.cpp` verifying that it works properly. EDIT: parent branches have been merged. This PR is thus the next one in the ADOL-C queue.    One question about the tests  should the following operations be supported:    - `a/v` where a is an `adouble `and v a `Vec`  - `a-v` where a is an `adouble `and v a `Vec`  - `a-m` where a is an `adouble `and m a `Mat`    <!-- Reviewable:start -->  ---  This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/614)  <!-- Reviewable:end -->  
simbody/simbody,610,2018-01-08T23:18:29Z,2018-02-21T19:36:25Z,True,2018-02-21T19:36:25Z,21d523866d22ba514ec398e3f6961e3d803f908d,9,9,972a3c2aa3591de1f474126552989df741c927c8 e38bb4e7fdbbe6d8a660675252cfa33a883eea0a 23c001c9596fc5b4bd5c834a095b24ec1f95b610 7ef166688d38ce3b9e882f4a171a128acf88e4a2 a0a5227cd390ef9bf7516f47158ec959a1c2540e 8f3c377bce939f2d25c17a405bb2f7deb2998079 54622ded769d60c7d69f745b9a08a7c6c122a872 df360ccb13a16e3031bf07e1404b9977aa9ae515 05914bfb4b6a585d71f07cc37cb92b7bee032745,,Update debian metadata to version 3 6,Some updates:     * libsimbody3.5 package changes to libsimbody3.6 (ABI changes requires new library names).   * -dbg packages are now autogenerated   * Usual changelog update to new version    Nothing big.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/610) <!-- Reviewable:end --> 
simbody/simbody,621,2018-02-21T19:40:46Z,2018-02-21T21:23:55Z,True,2018-02-21T21:23:55Z,9d6850422cc8eee858f998a3e2b802bb22a2a062,2,1,6942a15e4b4ed79fa0b413e653fa30837b274655,,Update release date of Simbody 3 6 ,This is a very small PR that simply updates the release date of 3.6 in the CHANGELOG.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/621) <!-- Reviewable:end --> 
simbody/simbody,622,2018-02-21T21:40:07Z,2018-02-21T23:58:25Z,True,2018-02-21T23:58:25Z,18e5b068f1635d5cc62d1ea32c2caf49c201f24d,2,1,bf9806c8b1f93043cccf2c45a8eb1c5cbc5178c2,,Update master branch version to 3 7 ,This PR updates the version of the master branch from 3.6 to 3.7.    Related: #606.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/622) <!-- Reviewable:end --> 
simbody/simbody,569,2017-07-25T01:40:53Z,2017-07-25T14:32:48Z,True,2017-07-25T14:32:48Z,24098a917be0c7ff45cd63830ab9a36bf5ff52da,1,1,8656ec3c13895db8eb08fbce300cea755482c9ae,,Fix typos in user facing messages,
simbody/simbody,624,2018-02-22T06:49:12Z,2018-02-22T15:53:34Z,True,2018-02-22T15:53:34Z,76a795d2bcf944fa5e6c8ba4a204cedad4e414a5,1,1,8ca9a76bd19522a118fe79e08c65db3f66b908ba,documentation, doxygen Fix brief description for HuntCrossleyContact,From https://simbody.github.io/simbody-3.6-doxygen/api/classSimTK_1_1HuntCrossleyContact.html:    ![](https://user-images.githubusercontent.com/4203505/36524051-4f50a72c-1759-11e8-9eba-576a78589ac2.png)    ![](https://user-images.githubusercontent.com/4203505/36524052-52139eba-1759-11e8-9c2f-00479c6cc2d3.png)  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/624) <!-- Reviewable:end --> 
simbody/simbody,625,2018-02-22T18:28:23Z,2018-02-22T18:56:17Z,False,none,bf3ce69a8f39904abec3ed5211d0fc5855183e4c,1,1,5ab97ee497ed6b1072f3620b5b9ab7c8b159dda3,documentation, doxygen Revert brief description of HuntCrossleyContact,Return full citation to brief description per original author's intention.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/625) <!-- Reviewable:end --> 
simbody/simbody,618,2018-02-04T22:28:51Z,2018-03-13T21:54:22Z,True,2018-03-13T21:54:22Z,df8395a354063905cb26847195d12935ff246fb8,2,14,4d2a16ee6f34ffac8bd523b3ed30ab4c16620adf c830a5f27418fa427a58c05d612305f651e30e35 f9132a0b291a5c7716f54208771a49d57834f32e 0d76f7670a3bac3300803f9dd49ec68708c6ae4e 84db8e25d8da875ae0bdffa65e918c5a3e924b3e f69916b21ec2130bee71eb8c32466d9923633042 aa47bed7eba67b596de913aa6dc4a8bc268e2fcf dab8d4b917bb8e1e5737da89b76bdd6796981cdf fbad060f021f4302c012406909949d800b5aeb8a 1c26954884bf931bb75e5798d7df60ef11a8dcac 270a982e23b3c418341862a54ac949659c1a7137 a327cfb069effc2ca5439aa968f8556fcf610b60 a7ce703dc2b53706ac5d10ea4dd4d177cd32f2b1 6488bb6835b9ad1e02f96fc2496f390fa628ef71,,ADOLC scalar,@sherm1 @chrisdembia  this PR contains the changes in `scalar.h` necessary to build Simbody with ADOL-C as well as unit tests in `TestADOLCCommon.cpp`. This PR is based on PR #614  currently in review.    A couple of remarks:    - `signBit()` and` sign()` use `value()` and therefore cannot be used when taping. We started discussing that [here](https://reviewable.io/reviews/simbody/simbody/590#-Ky2T6z1rmro3puMiCb9) but it was not clear to me which approach was best in the end so I opted for that one.    - the two `clampInPlace()` functions involving `negator<adouble>` also use `value()`. For some unclear reasons  the tests did not pass on Windows when not using `value()` although they passed on Mac (with clang).    - I used templates for `stepUp()`  `stepDown`  etc. to avoid code duplication. In the original code  there were only implementations for `double `and `float `so perhaps we want to delete the template specializations for the other cases? EDIT: due to the function templates  I had to bring minor changes in `function.h` and `testScalar.cpp`.    <!-- Reviewable:start -->  ---  This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/618)  <!-- Reviewable:end -->  
simbody/simbody,620,2018-02-16T15:30:11Z,2018-03-25T01:06:57Z,True,2018-03-25T01:06:56Z,57107f9045504ea57f86e878f2420ee09693edfa,3,17,4d2a16ee6f34ffac8bd523b3ed30ab4c16620adf c830a5f27418fa427a58c05d612305f651e30e35 f9132a0b291a5c7716f54208771a49d57834f32e 0d76f7670a3bac3300803f9dd49ec68708c6ae4e 84db8e25d8da875ae0bdffa65e918c5a3e924b3e f69916b21ec2130bee71eb8c32466d9923633042 aa47bed7eba67b596de913aa6dc4a8bc268e2fcf dab8d4b917bb8e1e5737da89b76bdd6796981cdf fbad060f021f4302c012406909949d800b5aeb8a 1c26954884bf931bb75e5798d7df60ef11a8dcac 270a982e23b3c418341862a54ac949659c1a7137 a327cfb069effc2ca5439aa968f8556fcf610b60 a7ce703dc2b53706ac5d10ea4dd4d177cd32f2b1 b433af8f6370558cbf502ae6f885cf063096d60f a2560fc95d10b3a2327a4d4671092cc784ba06dc 91909b4f2b963738e11cec7e37a248ac555400bb c2fbfc29b6766cd466773f56eddf0ed96ae68bbc,,ADOLC SmallMatrix Random PolygonalMesh,@sherm1 @chrisdembia : This PR contains minor changes in `SmallMatrix.cpp`  `Random.cpp`  and `PolygonalMesh.cpp` necessary to build Simbody with ADOLC. The changes mainly consisted in replacing `std::` by `Ntraits<Real>::` so that statements are valid with `adouble` too. I don't know if tests are necessary for this PR but  if so  please let me know what you would like to see tested. This PR is based on #618 still in review. Thanks in advance.    <!-- Reviewable:start -->  ---  This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/620)  <!-- Reviewable:end -->  
simbody/simbody,627,2018-03-05T21:41:57Z,2018-03-25T18:19:25Z,True,2018-03-25T18:19:25Z,bacea71c38b2fdd459ebef55fb2017cbd10418f9,3,16,4d2a16ee6f34ffac8bd523b3ed30ab4c16620adf c830a5f27418fa427a58c05d612305f651e30e35 f9132a0b291a5c7716f54208771a49d57834f32e 0d76f7670a3bac3300803f9dd49ec68708c6ae4e 84db8e25d8da875ae0bdffa65e918c5a3e924b3e f69916b21ec2130bee71eb8c32466d9923633042 aa47bed7eba67b596de913aa6dc4a8bc268e2fcf dab8d4b917bb8e1e5737da89b76bdd6796981cdf fbad060f021f4302c012406909949d800b5aeb8a 1c26954884bf931bb75e5798d7df60ef11a8dcac 270a982e23b3c418341862a54ac949659c1a7137 a327cfb069effc2ca5439aa968f8556fcf610b60 a7ce703dc2b53706ac5d10ea4dd4d177cd32f2b1 91ade4abd2557960214a27d927df5fb77f856ef0 3de274c16d9f794d3f1abe8939ebb39add8e2681 dd11d0697ee7e15da78a5159930dfa0b9d167a95,,ADOLC Row SymMat,@sherm1  @chrisdembia  this PR contains the changes in `Row.h` and `SymMat.h` necessary to build Simbody with ADOL-C. This PR also contains various tests in `TestADOLCCommon.cpp` verifying that it works properly. This PR is very similar to #614 already merged. Once merged  all headers of SimTKcommon/SmallMatrix will be working with ADOL-C. Another PR (#626) is currently pending but does not need to be merged before this one is merged.    One remark  the following operations are not supported:    - a/r where a is an `adouble `and r a `Row`  - a-r where a is an `adouble `and r a `Row`  - a/sm where a is an `adouble `and sm a `SymMat`  - a-sm where a is an `adouble `and  sm a `SymMat`    but this is I think expected based on the discussion we already had for `Vec `and `Mat`.    <!-- Reviewable:start -->  ---  This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/627)  <!-- Reviewable:end -->  
simbody/simbody,629,2018-03-29T19:16:57Z,2018-04-04T23:28:18Z,True,2018-04-04T23:28:18Z,d9b4804334414538e74d81d17e974b8c45ae2cd7,1,1,48c1dfecf395076bd86202053591131500f09871,, travis Set CMAKE_OSX_DEPLOYMENT_TARGET to 10 10,In preparing for an OpenSim workshop  we discovered that the `simbody-visualizer` crashes on versions of macOS that are older than the version used to compile `simbody-visualizer` (that is  distributing binaries to other machines). We can fix this by setting `CMAKE_OSX_DEPLOYMENT_TARGET` to the minimum macOS version we want to support. This PR sets `CMAKE_OSX_DEPLOYMENT_TARGET` so that distributions of OpenSim will support macOS 10.10 and later.    Related: https://github.com/opensim-org/opensim-core/issues/1835    <!-- Reviewable:start -->  ---  This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/629)  <!-- Reviewable:end -->  
simbody/simbody,630,2018-04-05T18:45:42Z,2018-04-05T21:46:34Z,True,2018-04-05T21:46:34Z,379270c8d68ca26d963b2da1669d06f33001dff1,44,45,4d2a16ee6f34ffac8bd523b3ed30ab4c16620adf c830a5f27418fa427a58c05d612305f651e30e35 f9132a0b291a5c7716f54208771a49d57834f32e 0d76f7670a3bac3300803f9dd49ec68708c6ae4e 84db8e25d8da875ae0bdffa65e918c5a3e924b3e f69916b21ec2130bee71eb8c32466d9923633042 aa47bed7eba67b596de913aa6dc4a8bc268e2fcf dab8d4b917bb8e1e5737da89b76bdd6796981cdf fbad060f021f4302c012406909949d800b5aeb8a 1c26954884bf931bb75e5798d7df60ef11a8dcac 270a982e23b3c418341862a54ac949659c1a7137 a327cfb069effc2ca5439aa968f8556fcf610b60 a7ce703dc2b53706ac5d10ea4dd4d177cd32f2b1 b433af8f6370558cbf502ae6f885cf063096d60f a2560fc95d10b3a2327a4d4671092cc784ba06dc 97971f0a4cfc6de44d67d1e1e250a2d3757b5a03 5dfee55bf43ce3a5b649423b82fdffd4dfb141e8 55da33d6018fb3383c6638dcdf00c6f6149e8abf 9ca9636ae0ecdfdaf205f92943e474f99b7019e5 eb004b84fc2c5d09961217a764681769cebafd9d 91909b4f2b963738e11cec7e37a248ac555400bb b983f4342d2c582c1f185c668478417af2d0ccc0 c2fbfc29b6766cd466773f56eddf0ed96ae68bbc 87d6b6d51966d09d6d21fc95dd9fd7c9dd8a2f5a 6ce15874f993b2bd094315a6401dc1e86606237e 95f7195c48134a20425b76679edaf4c3a2047375 57107f9045504ea57f86e878f2420ee09693edfa 91f7832fa50bc006a91f4699769d9f7d7886e95d bacea71c38b2fdd459ebef55fb2017cbd10418f9 5b1251c4d91de73ad1549351bf320e1a38dae54f 04fea514f36aabcadaacd52c60d86062d366c2fb 103828deaa94abac608fc5fbb7e032a64817170e 1f31e89bc06192ac5153905601545b4bcdfaada5 328357fae2370a628a7c98d8b719c0978d574641 03a1e6cb9ed4d47eded9f93df14641a859d40175 d2b9bede5199afec9daebd9af2ee488a10d8ab7e a48932dfc90d168d5b3ce0616f59b9fb98f7d4a5 5236d380443c0b7d295f87a63e2245f3c2370779 266372b3a3af8bcaa68c6f654529053c7db22983 c56637bc82df27cf284791057796fe177ff29162 dfb31e66041520f962148eb6cd5f9effb511f2ba 0608dd58cbd9136880a851ae3466c88c306d0821 fc52ff47f990b08e12154352606a6e111919b05e 42fa2083629ce549fdfd4fd86c025c65d242b9e6 27eb26b9ab2227456bad9afb5630350f0ce911cc,,Adolc compile common,@chrisdembia  this is a first PR on the new branch `feature_adolc_common`. I made all changes in SimTKcommon that I had made on my local branch (except regarding polynomials). I also adjusted the tests so that they compile and pass. However  I have not yet added cases in the tests to directly test adouble cases. I have excluded the `PolynomialTest `directly from CMake since it contains almost entirely expressions with complex numbers. Also  I have not tried to deal with the adhoc test `BigMatrixTest` yet. I have not added comments  nor limited changes to lines of 80 characters since this branch will only be used as "support" when merging changes in feature_adolc.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/630) <!-- Reviewable:end --> 
simbody/simbody,631,2018-04-11T06:37:13Z,2018-04-12T06:40:09Z,True,2018-04-12T06:40:09Z,01bc9e4a2184a0c8cfd1f518091eae40fbe0e182,6,11,8a4e5c34eddf06f0609c1742e9bf3a869af15450 1b9809425d3c6b02fd62c3db8878d356e5424eac f727dd76fabe0708a128c3f623ee3d5f153b0812 9c2f2a6fa26e54675071210ae7b97c6c8fbbf53e 3618aff0fb7721285bbbd99f33e44f046dd29cf6 c6469ba1e09f26c2540ddc8aa3c7c0e9e8f2d639 b21c2ef1ddc398539e1bc97f25ac416c4520158d a8a188b860bb1de85fff435b9931a7fc1ba73d62 cba473df7cdab3fac06b76d0d839a9267aab4308 69fdc2b3ad38499e5478892f63182d70e3569136 01bc9e4a2184a0c8cfd1f518091eae40fbe0e182,,Adolc compile common,This PR contains changes in SimTKcommon tests so that that all tests now pass with `Real `as `adouble`. Additionally the main CMakeLists has been adjusted so that only SimTKcommon and its tests are built. This is necessary to ensure that Travis does not complain.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/631) <!-- Reviewable:end --> 
simbody/simbody,632,2018-04-24T04:27:00Z,2018-04-24T05:36:59Z,True,2018-04-24T05:36:59Z,6b4902300850a2215f2ccdaf191edb97ee79a50b,1,1,3a505e6f15e785df4e686b8a84b291dc89a2844f,, appveyor Build visualizer on AppVeyor,Previously  we did not build Simbody with the Visualizer on AppVeyor (the visualizer was built on Travis). This PR causes AppVeyor to build the Visualizer  which we can then use in OpenSim.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/632) <!-- Reviewable:end --> 
simbody/simbody,633,2018-05-04T20:15:33Z,2018-05-05T00:12:07Z,True,2018-05-05T00:12:07Z,187d22c690359677912f03c0490049f878d36c72,1,2,06d58c5c7454ac33a6e7886ac0edb8680233d014 363020c996921ab90279abe69ba84eeff16cc3ee,,Fix crash from VisualizerProtocol throwing an exception ,Previously  if the simbody-visualizer GUI was closed before  `VisualizerProtocol::stopListeningIfNecessary()` was called  the  simulator would crash because writing to the visualizer pipe caused an  exception to be thrown in `~VisualizerProtocol()`.    This PR traps that exception to prevent the simulator from crashing when the GUI is closed prematurely.    It would be great for this PR to get a quick review  as it is needed for a workshop at Dynamic Walking in a few weeks.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/633) <!-- Reviewable:end --> 
simbody/simbody,635,2018-05-07T18:41:30Z,2018-05-08T07:39:54Z,True,2018-05-08T07:39:54Z,665a70f405f2ec2f5405452773ac9cd568f50c0d,4,1,e7fd7530f4cc73c581f444122768d0f4e79e01b8,,Bring changes from master branch to simbody 3 6 branch ,This PR bringes changes from the `master` branch to the `simbody-3.6` branch  in preparation for the 3.6.1 release (#634).  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/635) <!-- Reviewable:end --> 
simbody/simbody,642,2018-09-04T22:11:19Z,2018-09-06T14:30:42Z,True,2018-09-06T14:30:42Z,25f5b1311aee37cd96ca96956013537cf2a9369f,1,1,5d48fcacf214a54ad8cbe105db16dae54a81ce00,,Make sure CPodeFree does not call cpFreeVectors unless initialization occurred ,This was the smallest change I could see to address #641. Although the flag (`cp_MallocDone`) is not specifically set to `true` right when the vectors are allocated  I think this still follows the intention/flow of the code.    @chrisdembia @sherm1  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/642) <!-- Reviewable:end --> 
simbody/simbody,645,2018-10-10T23:58:26Z,2018-10-11T01:46:41Z,True,2018-10-11T01:46:41Z,93943c6ca94d55ff92e9762e95143fb6444698d2,1,1,7e43ab0fa4f808f11bf9385867002b359cf8dd36,,simbody pc in add std c 11 to flags,We now require c++11  so we should add that to the pkg-config flags.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/645) <!-- Reviewable:end --> 
simbody/simbody,647,2018-10-23T12:26:42Z,2018-10-23T15:25:50Z,True,2018-10-23T15:25:50Z,371b820d3df7f6f38017cd55536ab5d08beb5919,1,1,65d1c14814500e80bbf00c7ffb5d47b802e3ab40,,Fixing small typo in ExampleKneeJoint cpp,Since 'w.r.t' actually means 'with respect to'  there is no need for a second repetition of 'to'.    Small improvement  but I noticed it and thought of correcting it. Hope this helps :)  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/647) <!-- Reviewable:end --> 
simbody/simbody,649,2018-11-06T09:39:25Z,2018-11-06T16:03:41Z,True,2018-11-06T16:03:41Z,b5cf9e17af5b4b70a22e8f53f5021220280b3afd,1,1,a75525c356bf912a993bffd1d61e8edf61917a34,,Initialized local variables,Use of uninitialized variables would cause exceptions when built as Debug in VS2017 15.8.8    Issue #648  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/649) <!-- Reviewable:end --> 
simbody/simbody,656,2018-11-16T18:28:37Z,2018-11-16T21:08:37Z,True,2018-11-16T21:08:37Z,43c2645c634bc93488deab52da231708b4654a9f,2,1,50cb68005dcc0a8ed47a7550c8f453cc562ed0ad,,Fix GCC 8 warning about incomplete type ,This PR fixes a warning generated by GCC-8.    ```  In file included from /Users/chris/repos/simbody/6/simbody/SimTKcommon/./include/SimTKcommon/basics.h:43                    from /Users/chris/repos/simbody/6/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/EventHandler.h:27                    from /Users/chris/repos/simbody/6/simbody/SimTKcommon/Simulation/src/EventHandler.cpp:24:  /Users/chris/repos/simbody/6/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/Measure.h: In constructor 'SimTK::Measure_<T>::Plus::Plus(SimTK::Subsystem&  const SimTK::Measure_<T>&  const SimTK::Measure_<T>&)':  /Users/chris/repos/simbody/6/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/Measure.h:603:34: warning: invalid use of incomplete type 'const class SimTK::Subsystem'              (   this->getSubsystem().isSameSubsystem(left.getSubsystem())  ```  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/656) <!-- Reviewable:end --> 
simbody/simbody,657,2018-11-16T18:29:48Z,2018-11-16T21:08:21Z,True,2018-11-16T21:08:21Z,45654969ef2cf34555bf388472b78bec08ede84f,2,1,50cb68005dcc0a8ed47a7550c8f453cc562ed0ad,,Fix GCC 8 warning about incomplete type for simbody 3 6 branch ,This PR fixes a warning generated by GCC-8 (for simbody-3.6).    ```  In file included from /Users/chris/repos/simbody/6/simbody/SimTKcommon/./include/SimTKcommon/basics.h:43                    from /Users/chris/repos/simbody/6/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/EventHandler.h:27                    from /Users/chris/repos/simbody/6/simbody/SimTKcommon/Simulation/src/EventHandler.cpp:24:  /Users/chris/repos/simbody/6/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/Measure.h: In constructor 'SimTK::Measure_<T>::Plus::Plus(SimTK::Subsystem&  const SimTK::Measure_<T>&  const SimTK::Measure_<T>&)':  /Users/chris/repos/simbody/6/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/Measure.h:603:34: warning: invalid use of incomplete type 'const class SimTK::Subsystem'              (   this->getSubsystem().isSameSubsystem(left.getSubsystem())  ```  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/657) <!-- Reviewable:end --> 
simbody/simbody,663,2018-12-28T22:22:01Z,2018-12-29T00:34:59Z,True,2018-12-29T00:34:59Z,2a2cca70b96c6d635b227e1dc2fff138c40e37c8,1,1,59270a285ffe99a9b1421ad853cdb17f5cea4941,,Fix Issue 662 Remove Unnecessary CMake Policies,This PR addresses issue #662.  It removes the explicit setting of CMake policies CMP0003 and CMP0005.    <!-- Reviewable:start -->  ---  This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/663)  <!-- Reviewable:end -->  
simbody/simbody,661,2018-12-06T21:24:30Z,2019-01-02T22:57:21Z,False,none,acb861f21f9e6d895f600e3697bbf5b8caff4f23,5,2,9b903ab6eee82fc8735ab071f06f22786f73883e ed62111acb8ba4e85146c280f1fe5d172180849f,,Fix issue 639 integration step size precision,This PR addresses the root cause of issue #639.  It throws an exception when the integration step size becomes too small to correctly calculate time.    A new function  `checkStepSizePrecision()`  checks the rounding error in the expression `t + factor*h`.  It ensures that the size of `factor*h` relative to `t` is not below the `Real` type's precision.  If it is  the `StepSizeTooSmall` exception is thrown which prints some suggestions on how to avoid this error.     ### Runge-Kutta Type Integrators  A check on `t + h` is recommended for all variable-step-size integrators [[ref]](http://www.ams.org/journals/mcom/1974-28-125/S0025-5718-1974-0329308-8/S0025-5718-1974-0329308-8.pdf)  so it is added to `adjustStepSize()`.    However  for RK type methods  a stricter check is needed because they evaluate the derivative `f` within a step.  For example  RK-Merson evaluates `f(t + h/3)` and `f(t + h/2)`.  Since these two values should be distinct  a check on `t + h/6` is needed.  That's why the factor used in the check depends on the RK method used  i.e.  `RungeKutta3`  `RungeKuttaMerson`  or `RungeKuttaFeldberg`(This is a typo in Simbody.  The correct name is Fehlberg [[ref]](https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta%E2%80%93Fehlberg_method)).    ### Suggestions for User  1. Trying a tighter accuracy was proposed in issue #639.  On the other hand  very tight accuracies can also cause this issue  so trying looser accuracies is also suggested.  2. Setting a max step size can prevent the loose accuracy problem  while setting a min step size would prevent the tight accuracy problem.  3. Another integrator may be better suited to the problem or to loose accuracies.  So  trying another integrator is also suggested.    ### Example  If we run `ExampleKneeJoint` with accuracy 0.5  we get:  #### Before this PR:  ```  EXCEPTION THROWN: SimTK Exception thrown at AbstractIntegratorRep.cpp:428:    Integrator step failed at time 2.7475657411302921 apparently because:  SimTK Exception thrown at AbstractIntegratorRep.cpp:551:    Error detected by Simbody method AbstractIntegrator::takeOneStep(): Unable to advance   time past 2.74757.    (Required condition 't1 > t0' was not met.)  ```  #### After this PR:  ```  EXCEPTION THROWN: SimTK Exception thrown at AbstractIntegratorRep.cpp:428:    Integrator step failed at time 2.7475657411071852 apparently because:  SimTK Exception thrown at AbstractIntegratorRep.cpp:507:    At time=2.7475657411071852 the integrator failed to take a step with step size   6.2135304281274001e-15 which was already at or below the minimum allowed size   7.3503873432493461e-15.  Sometimes  this is caused by requesting very loose   (e.g.  > 0.1) or very tight (e.g.  < 1e-15) accuracies.  If so  you can try a tighter   or looser accuracy  respectively.  Alternatively  you can try setting a max/min   step size  or using another integrator.  ```  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/661) <!-- Reviewable:end --> 
simbody/simbody,670,2019-07-05T01:29:22Z,2019-07-07T01:25:50Z,True,2019-07-07T01:25:50Z,94814f3c19e613f82a91ab58abd5471ed63aad96,1,1,38ab311c0bdd8d088b3c5d249cb36076f362fc95,,Fix custom acceleration only constraint to call calcAccelerationErrors ,Per issue #669  a custom acceleration-only constraint invoked the wrong virtual method. Should call calcAccelerationErrors() rather than calcVelocityDotErrors().    Fixes #669.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/670) <!-- Reviewable:end --> 
simbody/simbody,667,2019-04-19T09:44:54Z,2019-07-05T21:44:23Z,True,2019-07-05T21:44:23Z,83357949260f87fc097568cda20561ca4ac61191,8,55,19ab7315e87586f8ca2ccbf7596b43164fe2d16d d18249a127111fe7588694b700fe846a1351dc28 64a8141a514a8cc3dab447f0ced7848633c19bc3 b9a983c4e4d9f4f2993e6b8e5eeb4a820a481e8a f2fe988d6f1c3a20ca602ee448fd7c2bdfe9c5d2 6aa30bb2b90e3248aed974af425554bfc0743bde 15cd47fa2acda3500de693f92c49c84a22679fe8 721d5c13238b9a66c8bd7b86f0758b2917b69291 e2d059bc5aaf6406c3204f49cad20bd4de35d7d2 9f33f46a5aa6701771c05504f76cfecb36046d54 04a6d5ef8fe0841bfa81c7bb506380de02d51a07 8e8642129a2b65755f8976190e4bc3d1c6c04df1 de069d012797aa48ae887bf1bfe6c0b9cd569e04 9ec82526b8e3899d60958534200436c88b3793ea 3683781ad86b53b0fbfb6b5812c04941f37ae268 9c0d653b15d77a7d47ee85e047bbb26b8d9e65bb fe201f68e2f092d0bc10e129dcd4ec77fd9dbbdd 515c3547153569f22aa20d726d8651d00d3fdaf9 5f4f7d77c65d57545d5e60a394185c80fa879b21 54b15ab8e9261aa33a07348593745ab5db8162c4 e7f36de492188219d9381fbf729b9249eef6c837 0eb39d696de325a7c71bb0b1f7efe100d3aebbcd 933304806bac1a0474c38725441d3e7403a4c9be 648b5b4448b24d7bfa169ce833ac8eb1fbdb9e71 fceffae51c20cc47a2c61189b3951dd81ccd42da 99322d381a0279f59ae0858c309ff2154b2e1bda 576356343fa9d45baf9bfa00fd2b834347241d4a a23bcdf84b4ebd8408774e22b951c582a4ada093 08e6ef311edd381e233777840feaf12172f10d00 3bcf2ce4c2288a1b854e14af85f9bda515218aad e9973d1636c50e43ff5af0f040a794ecb5188160 fbe2026022dd4de076137f1b70ae7aefe7c67ae3 76deb76c28f3b311e66bd8c2a4b63aa7cbcf1b23 26351f81c146a0d913d8d010afc3b6c748e1577e c64fc705be7d4ceb2f846643131fd52f0baa3813 14f50d9b27588633bf8ba9095080376438988575 007589c70ee32ac74f28cbbfb5bfead2fff4dd13 a7fae234da848692393b505e61c05523ec9bc6e1 ddf82e42c5798bfdcee48b27d9a8cad5bfba1013 15ae5d1aeb86bcfd3e59d5d0d933a975d944ff27 894fd47ea732decd3dcd8884f1d299bc0f072a9a e153a01a90691115dbe811a10d7c573b2f1fe9b6 537db2cbec7136bb7853e9e7022e9feb00f8337a c786c0c3cc70e0f49cff9bbc2ce23da759429729 84b38dc9463161d2a1284a0ca53f70576c031d82 32a880eaf21446422628dbb30f758d376c8f7929 367fd969b634c4f4357092bb0abdfd0b9be9e608 73c5f025fd38bdaef03a01a203c3e785504b6e75 e6030a6ce99055ee47f48fc8c1bb74f4c7b3c87c 873f9b91ee8388f4dafff13db71c729142ae7d2b 481273a96392feb3e94e39a90b772518fc4aedc4 cfcd326b2ec056a55ed1b25860f086ebc186bff4 25fba65f52c55b9301805f31aff6c9044452335b 59902e76630cf05c12efd51833f76354d28e5602 d9c4f67ec0d32d3dd651ee7c2304f19daa8a3e8c,,Smooth contact model,@sherm1 and @chrisdembia     This PR contains the files implementing the smooth contact model mentioned in #666.    The model is based on the original implementation of the Hunt-Crossley contact model available in Simbody. Yet the proposed implementation differs from the original implementation as it does not rely on a `GeneralContactSubsystem`. Instead  it assumes contact between a sphere and a plane that can have an offset and a slope with respect to the ground. Originally  our motivation for not relying on a `GeneralContactSubsystem` was to be able to use algorithmic differentiation in our optimal control problems (which is working fine although we are no longer using ADOL-C as we discussed earlier but are using CasADi instead). Since our applications rely on simple contacts between spheres and plane (e.g.  interaction feet-ground during walking)  we did not need to use a `GeneralContactSubsystem` and could use a simplified contact model. This also has the advantage that we only need to realize to velocity (instead of dynamics) in our applications  which is computationally beneficial.    The proposed smooth contact model assumes the same properties for both contacting materials and relies on hyperbolic tangent functions for smoothing the _if statements_ of the original model. For example  the following if statement:  ```  y = 0  if x < d  y = a  if x >= d  ```  can be approximated by:  ```  f = 0.5 + 0.5*tanh(b(x-d))  y = a*f  ```  where `b `is a parameter determining the smoothness of the transition. We use `tanh `functions in the expression of the Hertz force (transition between zero force and existing force when there is indentation) and in the expression of the Hunt-Crossley force (transition between zeros force and existing force depending on the indentation velocity). We have assigned constant values to the parameters determining the `tanh `transition smoothness in both cases. Another feature of our proposed contact model is that is assumes positive force at all time. In practice  there is thus a force even if there is no contact. The equations we use in the model are described in `HuntCrossleyForce_smooth.h`.    Our proposed implementation lives in three files:    - HuntCrossleyForce_smooth.h    - HuntCrossleyForceImpl_smooth.h    - HuntCrossleyForce_smooth.cpp    We also worked out a test (very similar to the original test):    - TestHuntCrossleyForce_smooth.cpp    We welcome any feedback about whether you would be keen in integrating such model in Simbody and about how to improve the model. We can also provide you with more information about how the model behaves. As is now  there is no comparison with the original model. We can work on that but we first wanted to know whether you would consider having such model in Simbody.     @chrisdembia  I was thinking to use this model in Moco this summer; please shoot if you think it should have other features or is not designed in the right way.    Ps: perhaps we could consider another name for the model as well.    Thanks in advance   @GilSerrancoli and Antoine  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/667) <!-- Reviewable:end --> 
simbody/simbody,655,2018-11-15T06:28:07Z,2019-08-08T15:26:43Z,True,2019-08-08T15:26:42Z,8c68f84cbee47400b6f41435637ec70d5fbc3442,1,1,c25baac9072efb37a0cf0a017a03ba9d11f558fc,,Add INSTALL_DOCS variable,If the package has DOCS=off option  it is easiest when CMakeLists.txt supports this option too.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/655) <!-- Reviewable:end --> 
simbody/simbody,672,2019-08-08T04:43:49Z,2019-08-09T00:51:14Z,True,2019-08-09T00:51:14Z,12805f8b4b4b676fafea31828667de4b1cac28eb,1,1,54f04cfef5f184c72df479c8c8eddd6d5eaf1f5b,,Add the FreeBSD ifdef to Pathname getThisExecutablePath ,  <!-- Reviewable:start --> This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/672) <!-- Reviewable:end --> 
simbody/simbody,673,2019-09-23T23:05:08Z,2019-09-23T23:07:16Z,False,none,f8df7d8b39b67fad1263b1938ac6ef7c0249c0ea,1,1,91aaa1f2542df99542e58067078f04f6eed26aca,, travis Update from Trusty to Xenial 16 04 ,This PR attempts to update the Travis-CI script to use Ubuntu 16.04 instead of Ubuntu 14.04.     This is necessary for OpenSim's migration from 14.04 to 16.04.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/673) <!-- Reviewable:end --> 
simbody/simbody,676,2019-10-27T18:58:00Z,2019-10-28T20:29:58Z,True,2019-10-28T20:29:58Z,95dc0675914829f8db94cc297543d5fa340fc8df,6,4,13c85d1a1805c645da777032a975012e766c5571 adec96cdad42cfb1ab671641522c4b0d10584246 ec89433a0095e0846a17b955b72384546076f338 a8cf4815221ca540e5aec2e3fa9987c534f2a319,,Fix visualizer scaling on macOS Catalina,This PR fixes #674  by converting simbody-visualizer into an "app bundle". Now  the visualizer is installed as `simbody-visualizer.app/Contents/MacOS`  which allows us to set the setting `NSHighResolutionCapable` to false.    I also added a stub function to help us  in the future  to better support high-resolution displays.    I tested only on Mac. Might someone volunteer to test on Windows and Linux?    @mitkof6   would you be willing to test on Linux?  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/676) <!-- Reviewable:end --> 
simbody/simbody,680,2019-12-07T02:00:17Z,2019-12-08T20:33:53Z,True,2019-12-08T20:33:53Z,29916662cd67cf0e1ccd1dc053aa746d2c70b3fe,10,11,e7fd7530f4cc73c581f444122768d0f4e79e01b8 665a70f405f2ec2f5405452773ac9cd568f50c0d 10aaa736296f4d62a1215e6ecfe779e713396bbe 45654969ef2cf34555bf388472b78bec08ede84f ea51091803ec54bd26aaf27513d1f18d2ce21c11 0c3e27f1e0288ab5ddb7d76a772cdb2346aae4d4 9ca5a2c1b98fd6f83a2861a4d06108be16ad8b43 18360db0c87fc67a31ba5719c3c969ad36152bd5 bd10b6444410fcb85c9f32495c33671091ecf4d2 aab85aa04a96f76cee7829bfb2470f305df5c55f ec3ee559aaca6c3434a91b214bf9569139a4c747,,Prep release 3 7,This PR makes the necessary changes for releasing Simbody 3.7. See #679 for background.    Once this is merged  I'll create the `simbody-3.7` branch and tag and continue working on the tasks listed in #679.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/680) <!-- Reviewable:end --> 
simbody/simbody,681,2019-12-08T22:34:56Z,2019-12-09T00:25:31Z,True,2019-12-09T00:25:31Z,e19a9f3542eff6260eb80f3d48f9e0757d908d11,3,4,29146eac6996dcb9fe733ab94c4a427fd618d50a 53a90fb96d90140029d6507f42835b839fb16b98 67a4d94d3fb2ea0bf595d40da56d32726b07b915 3317972bbc83b145a6f93e9c61893a8fb8166007,,Update master to 3 8 ,This PR updates the master branch to version 3.8.    I also updated the CONTRIBUTING.md file (syntax error and mentioning Gil Serrancoli).    Fixes #679 .  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/681) <!-- Reviewable:end --> 
simbody/simbody,689,2020-05-15T12:24:23Z,2020-05-20T07:35:58Z,False,none,e051a5da0efef7487c061d1053f11f25ca47e7a0,1,1,54f5eccde148aca5b2e2771408ff0fab7228807b,,Fixed bounds warning gcc 8 3 0 ,- Compiler warns: ‘strncpy’ specified bound depends on the length of the source argument  - This commit is a proposed refactoring of the function to simplify it  rather than a    like-for-like fix to the implementation    gcc warns about this method when building OpenSim with a superbuild. When I looked into it  I thought that the `szCat` implementation is a bit complicated for what it's doing  so this also throws a refactor in (revert it if you disagree).  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/689) <!-- Reviewable:end --> 
simbody/simbody,690,2020-05-20T07:54:26Z,2020-05-28T15:48:44Z,True,2020-05-28T15:48:44Z,360b2e54fc1c7ac3fb07d513899f5b4eca23bb7d,7,3,201945d4c5c2af25ba062c84f954a8a320549dc0 d4193fdb05998001f88822bcd933f1ae46b7eefd 834c8a1122dbadad2f9fd06c396a22cbb88205ab,,Updated vendored c maes code from upstream,- Upstream commit 0bd2e9e8ec69e9dcedc2b78716a5db5c2edf4e13  - Should remove compiler warning:      "‘strncpy’ specified bound depends on the length of the source argument"    This PR aims to update the vendored c-maes code in the repo to the latest upstream version.    The significance of this work is that the current (older) c-maes code currently produces these kinds of warnings when compiled in later (>v8) gcc version:    ```  simbody/SimTKmath/Optimizers/src/c-cmaes/cmaes.c: In function ‘szCat’:  simbody/SimTKmath/Optimizers/src/c-cmaes/cmaes.c:3118:3: warning: ‘strncpy’ specified bound depends on the length of the source argument [-Wstringop-overflow=]     strncpy ((char *)szBuf  sz1  (unsigned)intMin( (int)strlen(sz1)  698));     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ```    Previous discussions about this fix are in [a previous PR](https://github.com/simbody/simbody/pull/689). Ultimately  the resolution was to [upstream a patch to c-maes](https://github.com/CMA-ES/c-cmaes/pull/25)  which was merged in [this](https://github.com/CMA-ES/c-cmaes/commit/0bd2e9e8ec69e9dcedc2b78716a5db5c2edf4e13) upstream commit. This PR essentially tracks the work necessary to put the updated source files into Simbody  which should eliminate the warning.    <!-- Reviewable:start -->  ---  This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/690)  <!-- Reviewable:end -->  
simbody/simbody,692,2020-06-03T19:47:36Z,2020-06-03T21:18:13Z,True,2020-06-03T21:18:13Z,4c77708f03c87b4d978cd7a731de086bf731ec19,1,1,8c1d5e6a81650d4a5cd0c2df813444ed9f210812,,Added idea to gitignore, .idea dir is used by CLion to hold temporary user data  like which files are open.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/692) <!-- Reviewable:end --> 
simbody/simbody,693,2020-06-03T19:54:51Z,2020-06-03T22:19:46Z,True,2020-06-03T22:19:46Z,5cf513d98ed3da0e0991ad9c7a21f684d19afd6c,1,1,63fc6aa520c5a4ca347d858f55f95f64062b41d1,,Added logic to specify what exactly is missing,Added logic to tell the user exactly what they are missing when trying to build the visualizer.  Fixed warning on linux by setting GL Preference to Legacy.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/693) <!-- Reviewable:end --> 
simbody/simbody,695,2020-06-04T13:49:00Z,2020-06-12T18:26:20Z,True,2020-06-12T18:26:20Z,d8e4642d3155bfba472ac7968e269d64f62edf19,1,1,168556b1f9c47bea6c93a6862f7be7c718da69c9,,Removed unused include from CablePath cpp,  <!-- Reviewable:start --> This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/695) <!-- Reviewable:end --> 
simbody/simbody,698,2020-06-11T20:28:04Z,2020-06-12T18:42:07Z,True,2020-06-12T18:42:07Z,8314e2f5d615dfb19e467babd8954aa747e887fb,3,6,57b638825d031878d0913fa16878fed872459d7b 3d97e5dbb29183772c7df9643699391b54eb3697 48ebbedbb551c963b3a473e80278cbe2b49d2b10 c4441da06b86fc09225901fc70bbe12ad639eaac 8fb79ea4151bb7d2c97116cbdc2c26ca796db10b f0ba68dcc3a13537d0ffd9469173073207750276,,Continuous integration using GitHub Actions ,This PR introduces continuous integration for all 3 platforms using GitHub Actions.    <!-- Reviewable:start -->  This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/698)  <!-- Reviewable:end -->  
simbody/simbody,697,2020-06-09T10:05:54Z,2020-06-12T21:14:50Z,True,2020-06-12T21:14:50Z,d0bd085a7a1405dd920a5aa47279df59d09919fb,1,1,e44d31cea88609e920d2433aa804eb2028263964,,Updated README md example to use a uniform background,- Makes example contained in README.md match the screenshot below the example    Screenshot before (Debian Buster):    ![Screenshot from 2020-06-09 10-45-27](https://user-images.githubusercontent.com/4730570/84134766-fdbef300-aa40-11ea-971d-402cec88b496.png)    After:    ![Screenshot from 2020-06-09 11-04-14](https://user-images.githubusercontent.com/4730570/84134821-10d1c300-aa41-11ea-8f7a-9acfec54c331.png)  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/697) <!-- Reviewable:end --> 
simbody/simbody,546,2017-01-06T16:40:57Z,2020-06-15T01:48:12Z,False,none,131e2ce51cf0d6aa8b36d6c3991b8d1e5d4b1e4c,1,3,f9f479ccb714f63aad586e4014b89bebb705b9de 33dfd054fb6eee55a1d0a17d76fc80b90a6fb562 bd629e280bffd9d7e32fb25b4c8b240cf24e3a5d,,polynomial root finder update,This is a method which  once you get started  quickly gives a very good approximation to a root of polynomial (and other) equations.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/546) <!-- Reviewable:end --> 
simbody/simbody,534,2016-10-21T03:03:42Z,2020-06-15T01:49:57Z,False,none,fb7762da3f05ef66af3aeaa77d54d7d671346e3a,11,23,f9721af8cb7854a73475bcd9849af4115f842e50 3baacd811856fe41d76af85ac80e649fc622e65b 085eaf8bbb3c263db3b081352cef5c3e68ac00cd 5053ee6ffbbe180aa0faaab49fd41b9bfabd5976 da1e583c76ac27eefa960ece08006d6c35376fca 9d62134b587ea55bff225f882fe89230e19666ba b99c1caa67ecee9740c5af0c3c5b7d83ed15e56b f4333c37848b93f269c9616ff57b6c07244145a6 5d439e12b706b73261f7a4ebca1f88a61c6ec6b6 92564a6b16c342f8367ff80e24efb0411bfedb11 d92af63a590b35489f7e28416a056b57357fcc69 2eff2425bff2d0fc4af6d8e77a9b41a7a6ce25aa 5a881e7017b57fe7409a0d385988bc341fa32152 8e761e9d7faedcd19d559e226e9261d57f1365c2 d856faa178f205adccaafe9ca808152c6c627b12 c4cb9cbdb7d62dd83f15eb138cfac6eabefa56fa d3fe7c1a7a65bd8ad73da5fd477954d2168bf58e 29665189434f70f387d3a1aff0a691db0fccf851 e25d6836be37c2d689ed618449fb04fee8e39c9e 5f061fe25681324e1709479e86a672eadb2e6902 1b976a40279b981aebe2ebd9d3ef262ea50f6c2f 8345a32b60f5814f8a925ff27ee23d8c1f94e909 d986b39762fc99603c4311c92cd2680b72c5a0bd,,Multiply by the square root of the mass matrix inverse ,Multiply by the square root of the mass matrix inverse.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/534) <!-- Reviewable:end --> 
simbody/simbody,691,2020-05-29T21:31:24Z,2020-06-15T16:24:16Z,True,2020-06-15T16:24:16Z,320bbe9f39f5d24bc06ff30bc882caedee2d0654,2,3,93d64697722d10e1a74d816d75deedcfa80a95b8 8dde244b24e9d66f4c8f2862b140b90cf5e1fe44 205d2203b34ab82596130826fa0d98c58e874e61,,simple retry loop for ReadDataFromPipe,@sherm1   for issue #688  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/691) <!-- Reviewable:end --> 
simbody/simbody,704,2020-09-10T14:13:21Z,2020-10-08T18:21:07Z,True,2020-10-08T18:21:07Z,dda623d3e099b38ef9e551a6b647cb5e8dfbbb25,3,3,94780ef792c6fbda37dc5e8fdfdbc15c13de9475 8d87104dab7482b464d23b6775a3c093c00d13d1 32cb6f0bbe0430544aedd134f1d7cba024376984,,Fix TLS issues in ParallelExecutor,Current implementation of `ParallelExecutor` is allowed to switch between singlethreaded and multithreaded operation based on the size of the problem. This causes issues in `Parallel2DExecutor`. `Parallel2DExecutor` splits its calculation into multiple substeps which call `ParallelExecutor::execute()`. However  the associated task and its TLS is initialized only once at the beginning of the calculation. If `ParallelExecutor` decides to switch from ST to MT (or vice versa) mode in the middle `Parallel2DExecutor`'s calculation  the associated task may try to access invalid TLS.    First patch in the PR removes the problem-size-based logic and uses only the specified maximum number of threads to decide whether to run in ST or MT mode. This seems to have unmasked a potential race condition in `CalcForcesNonParallelTask`. This task does not use TLS and therefore is not thread-safe. `GeneralForcesSubsystem` does not limit the maximum number of threads to 1 when `CalcForcesNonParallelTask` is used  which leads to data races. This was not an issue before because `ParallelExecutor` ran in ST mode for `times` value of 1. With the size-based logic removed  we need to set the number of threads to 1 manually for thread-unsafe tasks.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/704) <!-- Reviewable:end --> 
simbody/simbody,708,2020-12-05T01:40:22Z,2020-12-05T01:47:52Z,True,2020-12-05T01:47:52Z,8cad2aa70b6c30410302c9d096ad3df1d2f73750,1,1,03bca779f07fcbcb2ec15309eac5f42a4e9d1ec6,,Update continuous_integration yml,use new syntax for add-path  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/708) <!-- Reviewable:end --> 
simbody/simbody,707,2020-12-05T00:37:55Z,2020-12-05T17:58:43Z,True,2020-12-05T17:58:42Z,9daf0d26ea22551a5d10114bffd9b02fa51c53bc,4,6,c3e65eef20edc33eab48ccd42ea85dea4b1a48df 7d7f408602e9c531c109970468500cf2c95a30ca db22fd509d77207eda0ed0e170f103232462ff2e 03bca779f07fcbcb2ec15309eac5f42a4e9d1ec6 727ef376a3510dcd60c5c3881f0e1563a1b55264 8cad2aa70b6c30410302c9d096ad3df1d2f73750,build,Fix compilation error and some warning in Visual Studio 16 8 2 ,Visual Studio 2019 16.8.2 introduced a compilation error  fixed here. Might be a legitimate complaint.  There were also two new warnings which look spurious but are also fixed here.    Resolves #706.    cc @jasonmeverett @aymanhab  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/707) <!-- Reviewable:end --> 
simbody/simbody,714,2021-03-17T08:46:07Z,2021-03-17T15:31:53Z,True,2021-03-17T15:31:53Z,a8f49c84e98ccf3b7e6f05db55a29520e5f9c176,1,1,d273b1e7b96adbf81065aefd9c0165959c8310c2,,Hardened SimTK Spline_ against thread races,This is something that I noticed when quickly scanning through **potential** causes of [this](https://github.com/opensim-org/opensim-core/issues/2958) OpenSim issue. It does not necessarily fix that particular issue (I haven't had the time to fully investigate that)  but I figured it would be a good idea to PR this in case it's not known to upstream.     I may have misunderstood the assumptions of this class  or the usage semantics of simbody as a whole (e.g. if there's a higher-level convention in place that explains when/where thread safety is reasonable) - not a problem if you think this is an unnecessarily pedantic PR.      ---    (commit notes):    - Because a spline does not mutate its data  SimTK::Spline_    internally uses a shareable reference-counted SplineImpl to    hold its data. This makes copying a Spline_ cheap (just increment    the counter  rather than copying the data)    - However  the reference count was a standard (non-atomic) int. This    opens up the possibility of a race when multiple threads concurrently    copy a Spline_ object. Example: if two threads concurrently increment    the reference counter then the result could be +1 or +2  depending on    timing - this could result in a double-destruction event when each    thread is calling Spline's destructor    - Typical C++ developers are likely to expect that copy-construction is    threadsafe  so the not-threadsafe behavior or SimTK::Spline_ may be    surprising to downstream users. Worse  thread-safety may be expected    from an object that indirectly composes a SimTK::Spline_ in its    (potentially  large) hierarchy. e.g. a user tries to copy-construct    large model objects that contain SimTK::Spline_s from multiple threads    - This patch lifts the (intrusive) reference counter in SplineImpl into    a shared_ptr in Spline_. The semantics of a shared_ptr (cheap aliased    copies  reference counting  single destruction) closely match the original    semantics  but shared_ptr is designed to be threadsafe    - see: https://en.cppreference.com/w/cpp/memory/shared_ptr    - Excerpt:        > All member functions (including copy constructor and copy assignment)      > can be called by multiple threads on different instances of shared_ptr      > without additional synchronization even if these instances are copies      > and share ownership of the same object.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/714) <!-- Reviewable:end --> 
simbody/simbody,726,2021-12-16T11:44:58Z,2021-12-16T23:09:20Z,True,2021-12-16T23:09:19Z,d22699f4d1f64c58c9f9b7c03fb8f203c6538dcc,1,1,d57c84bcfd62b59d6cc54548359e902ab1a67964,,Fix build on FreeBSD,Simbody is currently unbuildable on FreeBSD because of missing CPU count detection code. This adds the necessary sysctl call to get the number of CPUs.  <!-- Reviewable:start --> --- This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/simbody/simbody/726) <!-- Reviewable:end --> 
