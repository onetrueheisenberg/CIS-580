Project,PNumber,CreatedAt,ClosedAt,isMerged,MergedAt,MergedCommit,nFiles,nCommits,Commits,Labels,Title,Body
UAVCAN/libcanard,1,2015-08-16T14:12:50Z,2015-08-17T08:59:40Z,True,2015-08-17T08:59:40Z,d190ae10887c87a6dab7c49d066939e26a42e554,6,8,cd8abf456488faa12016cc5aaed200b719b721cc c806566f55d0eeb05c9db5b0a4d5c7c02737692d 4666a0b9406e25f722b4be1c46689c2dbac5b186 e76eae6751fbf34a8f1e12c58632a104f10fa514 a0531fef63f6d842cf0d94dddc3638d7c3f6fd4f 94cac71e838018672e8e1931b858fbd1a0af1fbf 11c419b9acba5aec155cf1e639a2d40c27c28975 b1d73df29598cb3df43425377a395c1e4cafc1db,,Implement block memory allocator,First real code for libcanard :)  I implemented the memory block allocator  or at least how I think it should behave. This is my first try at doing that kind of things so let me know if anything is wrong. 
UAVCAN/libcanard,5,2015-12-28T20:03:12Z,2015-12-28T20:10:12Z,True,2015-12-28T20:10:12Z,d55e9d5fe6134b9431bb932e1c1cd9c8dfcd1535,2,2,070e39a7c5c10a1754d59c1b19ce522b76653f94 d47aaddaab0eef1ebab7c558ab507744554ea98b,,Convert design documentation,I converted the design document from Google drive to markdown. I feel it is more appropriate to have it in version control as well. 
UAVCAN/libcanard,10,2016-01-19T16:44:32Z,2016-01-19T17:03:20Z,True,2016-01-19T17:03:20Z,04aa78f0c54e7cf4715bb40097410a9dafe92a0e,1,1,f766217fbd69c8b9566704f8e0fb59c4dde43677,,Fix clang build Switch to container based build infrastructure,This PR is a work in progress. I will merge it myself when the Travis build passes. 
UAVCAN/libcanard,9,2016-01-16T16:59:44Z,2016-01-19T20:51:18Z,True,2016-01-19T20:51:18Z,71f2581e3832b869a6209fbe31957c3b4a56542a,1,1,afa6001c7105845f8a17819b545f74ed78ccbef2,,Corrected mistakes in the design document,
UAVCAN/libcanard,3,2015-12-21T18:08:15Z,2016-02-08T22:18:39Z,True,2016-02-08T22:18:38Z,87a32e5caae239848c98e6c4531ce8feea595b67,6,58,2098c60a7556296976440457b5d6d62e6489d368 90e98c0bcbc5b0ba1f246b1a4cae7d04d9226f03 ed7a1d75902f9f9d06f7d8bd7005261e9d0c8316 0a2c0ac5cd65bb4532825d80e0a5148c12f8d637 6091d174e67e59a39ddd99024f514cf389c6b956 afcd1102265c01a86151ff741f9809ee87d113df e1b5169fc41b21588972d0ae7fe446462bdca360 076e0eaa0339c53566762f2b2f043a930b029645 c6ee1dfb01b83fb64450cbc5f6fc29ea48da1561 8470b143d0effd110df469691c9689ae94066a69 4b9ca64684bf08ce4236ca2a5012fcaca053e0b9 c57df3dc00e63548220833e877976a9047332720 e3452442f31f290ce12b0ea5926162194be3b5ee 0844f5b147bfaf23180b4adad5a099e53e029fde 14898d9d45ab41fd5bb0f8ddef9f82413cc20e49 e288578c4bfd4520008d7f560b9411861afc219c 8951b98b32ed12fb096aadf9d093b897548b6766 eec4efffd2ec3e7321a18b8be48d0b49e979c43d d708b34b7a4f3b864898eddc9d443f1f4d753385 db6a367e101f5222e10810679cc03c42afbf2b01 4ceadfaf949e54afa2b5135d214013869ea6193b 645d5c8348471f8dbe5e24bd7a6bd1968ca58977 6e7012b9979696243d4eca2a397d3addf78cd9fa 4d5aad2c66e35658482210f8236493e9291679f9 7cd5eb092694abc6a0539932770180335d82f205 6265e9b8733914120b830e6d5a5a5c5ffb846163 4dda3d27555d6a14eb7cfb2493d021551847e3de 7dba83fbfc66a0f00f25b9433da003c4ebd49610 08a164a40abe1c5f62bb4774d215f9f8a617d5bb bdc3bc388387a07b0fbae6b7b67a972e0ac4afad a45b7f62dcafe59115f06edc44d27c2951171ce4 ffb77d908ba30c1d81eb93ff100f271a72bcb636 b796124118f7b4fa0e43be995205926ca49c3ad1 a1f84d00e959d68e337fe452f4c03091d613c82a d5843b1d19d532d33597becbd7e44cc7aa3c165e 48e5398c61ba522394da63f3ec39810067155cca 4deee93a03655d372d74486d737adf6a7d1e1724 f53b2d26540160046cd2d2877653df79a5af8d01 b1e55e6e883c5481938a7f6fbf2aaba2cd78d78d 056e9a5176ed8eb5f1c1b06673dfe5f831fbd821 87fe8ea7509ba19e11614dd5d88d531407ac6cc2 cf324b97b1fd3bbc8e8bf639896f959d5428be91 211e8148394662dc3e7eada71c3021f5b11523de 7a4f3205b45e7856f674511e2d436554c76b6a8d a4b7172bd67a9c85b15d488f0a95407a8f18fb0f aef7d51aec4dbf781bea2d32484b1d9c1e40172c 605960c0e4d9272a5be6b89081892900324f5386 5e0fa6fe80d757a5eae377ac1232ee7ca9d1e86f 6aab3b66fc8780c4fbd29727b5e983625553aa80 89514fcd39f1cf344a164e925a2475896f0905a3 167b54a8a588c63eb788fd294671230b0daa137b 9c595b48e8c9ec31cbdef328056edc4686dfd712 fae086eed9e8a6543c0c13f80ee7ecffcd11ce39 aa112be54f834a4cf48097be51a9a76c1aa614f8 bc8c5833b1401a5898e52d31bd91d3e7e43c2866 519a259764751e7810e43dbe21086fba602c5479 28755c2bf71347f9d5f52eef21aabee7d5c65d0a 8a7a6d1cea4adfc5e30a45a2e8e3bfc1d1343b4d,,Implement Libcanard Library,Included is my current working version of libcanard. canardReadRxTransferPayload is the only missing function right now. Recent updates to the design document have also not been implemented (ftp://pkir.net/libcanard.diff). canard_test.c  based on simple_sensor_node is what I've been using to test the library. It sends 3 data types on the can interface. There's also a function  random_drop(x)  called on the bottom of the send thread that will randomly drop a frame. Set that to the probability you want frames dropped  0 if you dont want anything dropped. Right now canard_test just prints out the data received from the library.  To do: implement crc checking ignore incomplete transfers (probably has to do with the above)  ask any questions! 
UAVCAN/libcanard,16,2016-03-15T06:18:08Z,2016-03-15T19:59:59Z,True,2016-03-15T19:59:59Z,4ee53e1881f2381c2a153e36d967528789bfa03c,1,2,b409b0eb4978b8eeddfe6b3f640af0e0a3bc2589 4a440ef01cae4637fc46a012acb713d98a286e57,,Destination node ID checking,
UAVCAN/libcanard,17,2016-05-12T17:57:51Z,2016-05-12T18:58:56Z,True,2016-05-12T18:58:56Z,ba523d0bc4baa0aede6833cbbaa4b61c95cee4ed,4,1,27b3c8788f8b7200eab76a13cac4d0fc46a30d92,,Use fewer headers and change i to uint16_t,
UAVCAN/libcanard,18,2016-05-13T09:17:24Z,2016-05-13T09:17:31Z,True,2016-05-13T09:17:31Z,d9ab40f194f156d4890ba720ac3db6d8f72f8c50,1,1,ed69d59ddf840f68a52f1222b85eca60c05707b8,,Properly releasing the transfer payload,
UAVCAN/libcanard,19,2016-05-16T17:54:09Z,2016-05-16T21:34:39Z,True,2016-05-16T21:34:39Z,5029639e82f444645342841fc6cdc167a95ba8c7,1,2,219d4e3d047a21d02749b48aa90888db24142c1c 5be7c3ca69295ce1e1fc5b5c545b1006b1d72119,,Multi frame CRC should be little endian,
UAVCAN/libcanard,20,2016-05-16T18:38:20Z,2016-05-16T21:34:56Z,True,2016-05-16T21:34:56Z,c35385d4d8cfa937f105446f0ca6da8820319671,1,1,dc0db1474f23246a430a538079d9384f9533715b,,Bytes of signature should be little endian,
UAVCAN/libcanard,21,2016-05-19T12:11:17Z,2016-05-19T14:53:10Z,True,2016-05-19T14:53:10Z,0753f7123227fe8c4b4076a2d26334552fdb45e7,1,1,26d16693e51410c7b4a0272d77b2bbdd3fcbdd53,,Wrap macro in parentheses,
UAVCAN/libcanard,22,2016-05-24T15:49:25Z,2016-05-24T22:09:01Z,True,2016-05-24T22:09:01Z,d7e1bb970eb8c61b6e6a3d76d89d295bf18b469e,1,1,d64bd9666a16b4bc32b80c454f30d043d194902a,,Test uavcan protocol GetNodeInfo request,
UAVCAN/libcanard,23,2016-06-01T10:08:07Z,2016-06-01T11:34:27Z,True,2016-06-01T11:34:27Z,e3efc50fb97760fc5f81bee32a627f7b4de6e2a6,3,1,953d34ce9cc16adcb73f4025f9b53cf235b1ac56,,8 bit data type ID for services,
UAVCAN/libcanard,24,2016-06-15T17:36:34Z,2016-06-15T17:45:32Z,True,2016-06-15T17:45:32Z,9f376553e79436ab5ccee8c98346804740942f77,1,1,987ad9ddd35464ed2e03b67702968bd0db4311cd,,Fix bugs in canardReadRxTransferPayload,
UAVCAN/libcanard,25,2016-06-17T13:42:12Z,2016-06-22T07:50:23Z,True,2016-06-22T07:50:23Z,a7a6d4c6b105976cccac36e05c42abee566b70c4,11,13,c44af8aae7115819e0bf14ff503c2baf6a93253d c5399175f7cc63bbe29836933337ec840bff190d a194120d86d6fda005f955d842d43341ce786db6 dc3761854437bdec66c225debba64e651d7e060a e50844f37ae64a0efbc74f2f5fd7a339c2d4fedc ec48a351249ab3467f6fb13f173939a2013136e7 bffe888d4a8b3c87f837ebb054da721035c9068a 68940e2ba73a99483f4da2b53de386eebb9480f7 ecaf0e910bfd0008137ccd45c719f5a4bafed595 5c711bbeee460064a56732a8ae8c104dc38bf671 9326fbe072e528b05ff110ff77bee6de8613f613 307d762bef7650dc579e725a365f3e6fcabfb6ba d5c3ad0b116b6a18a398105c9dbc2586c0260186,,Drivers,
UAVCAN/libcanard,11,2016-01-21T16:29:36Z,2016-06-26T20:11:13Z,False,none,b87402ecc0c14048e77d9da12c76cdbb69e75518,2,2,cceb891302bb08fe9c295766c3cdd460c3719937 8d3d7e70cc08bead0d53e71d673b0de88dc45a68,,Build in 32bit mode,By design libcanard only runs on 32 bit platforms. This PR tells the compiler to build in 32 bit mode. 
UAVCAN/libcanard,26,2016-06-26T20:12:13Z,2016-06-27T00:13:17Z,True,2016-06-27T00:13:17Z,ddc864f9e98897f920763a8b75dde1e2dd6cab75,3,9,cceb891302bb08fe9c295766c3cdd460c3719937 8d3d7e70cc08bead0d53e71d673b0de88dc45a68 b4cb7278b8479adad3855b9fbebf60039e88314b dca8a05eb5b742121ec8542f1ab341e2cce33b35 e281450b6886f1d399313370d05d7dbbe72b9972 749cb3583cfa475ec422bcc65efc34d5c15106c5 9601622a492f762e521d6ac8b94d0546958524da 825e9d4f6d8ba6e126e9b6de0b7a4f0047f905cc f7252dee4f4fc1a6405c25e987e675d387e74a71,,32bit build,Replacement for #11  
UAVCAN/libcanard,29,2016-07-04T13:10:07Z,2016-07-04T13:29:18Z,True,2016-07-04T13:29:18Z,a705c3597f2ac2d8f4d666647d7a8b4b2535c12d,1,1,eb6d75bad4c0e99ab958b8103cf145a019b7d21f,,Fix typo,
UAVCAN/libcanard,28,2016-07-03T16:14:22Z,2016-07-04T20:59:21Z,True,2016-07-04T20:59:21Z,b28bf6ac337e55d49037fd9904d4b951760c4690,9,34,56ccaf799d67b63268cf01a6f5c8454485f05c4f 1a291f2abbd7dc65fe702f8607741c47cc891162 a50bdd7b4268e845acdc9e28dad91047abd117ba b643ab933cb67cbd98888d7aa2ce838b262207ce 4e673a8f9cd046eb1c856dd202d1fd6a9f3c2433 0c05074b98d6ed75f1c96a67d63a10455d81d7d7 251f3b38460ed1ef3ecf94800331a1b3d1eef2c9 ac0f1833be56d07972281a6940f3d09eae083cb4 4ca7dd08ecf791f45858f30339596d0d29b6b576 4cad022c365f9b22a2503c04b1d472149461ee76 c9a4c94e52005dd6b41d00ec3b0b96bae46378fd ef0eead86e819612cc6a5feb7c56de2599fc06f4 5c18be42f598aa49bffeb8eb3f779dae99776117 2806c5155d9c724c65689f2593ea2eb0a7b5a1f9 c186db7f303de82cc73ba5470aa2bb5004e9f9d4 995ec1e7b4ff49cc368a58088a9ecb08ad13e90e 61bf589f58b95dd422c3a866b324a916aa2067b9 c544147fe9a7909d264287b5aa59cdd353bfd0a0 79b36d3a056362d0bf3b2645a076902780441340 41be25fc937a24dcaab72e1870ae7b7b4699dd1c 4cef17a53c459dd2c0fc62bf27522738cf0a2069 23505c2905df6129815a86d99235a4aec92dadb9 4d87abf15958dca7bf1e5a34245e06d7f2dceee3 f314cb2f91b2ab2e92f6e196da775b408bfc20fc fea34512fea0bf274fa3c9cf0c79fa92a116c781 0e12d8dae1fef137e2858db70e4e8df33943ecf0 01b78fa51db1226273610028788219ea740c63bc a78b209627f4f3d25da189d0207094e57c432e67 bc4b3cbc74521ff6d7c790f42e765c12faabce49 4904ff138065e3a443e3a2cad6fed7526aca40bf ea67e450156dc6e373c7f17b611f68bc57d88fe0 eca093840d1ce5f200c3ca5aea0a02897e742475 928df1f6d41043c3c2bc08072b07722a22a9c11a 8c9062a0e12d09b6774d3350c7ac77dc5afa91d8,,Release v0 1 design fixes demo application unit tests,This PR adds a simple demo application that is intended as a quick-start user guide. It is based on SocketCAN and demonstrates the main use cases of the library.  Upon closer review the function `canardReadRxTransferPayload()` revealed a design flaw and had to be replaced with functionally identical `canardDecodeScalar()`  also its counterpart `canardEncodeScalar()` was added. These two functions implement the hardest part of message marshaling process  so https://github.com/UAVCAN/libcanard/pull/6 can now be completed relatively easily.  The documentation in the main header has been extended with additional comments and notes; ideally  one should be able to start using the library just by looking at the header file and the demo application.  A bunch of bugs have been fixed. The code is still rather low quality  but I feel like it should be good enough for a v0.1 release. At least the API looks stable now.  The old test application has been removed. It went out of sync with the library  and I decided not to fix in in favor of re-implementing all of its logic in the form of the unit test cases (as it should be). Although the coverage remains lacking at best...  @antoinealb @masierra @paulpatience  P.S. When reviewing the diff  add `?w=1` to the end of the URL to hide whitespace changes. 
UAVCAN/libcanard,30,2016-07-13T12:39:13Z,2016-07-19T16:14:48Z,True,2016-07-19T16:14:48Z,a5f7da8cc0443c530631222259a10c62d4a117c3,10,20,4f71de863ad20d60b2b28e44291735ebd2c9af57 3548b0611f783e5b30cfc361a073084657e520fb a89af3efd763dfda08afbb7a7604a8203ffa3df8 e4a06e9556f3ee3e40bee2cc25973312be371c89 a247cdbbd585b3e7255e2fcb688baf729f406c13 6cd2c08f1e56e2138e2e2fc81802fc0205cb7b56 c654b5b41d130343c1746e36104534c5b56ccec6 784ede84ba7b32e3d7f2d82d9f360615794563bf f1b8516285450993f3a804ef2118f01e7de9192b d9b567239d7bfa288ca8a1e3c5a145fd96464bc6 b88bd4ff72dd3e6add3095d608ccad7f5b589baa 97b654064cf971a7823709826c576fe03986bbb3 65b012e0e910fe79fe46a25725f3b0a45bb1c07a 70cbffc41f6e4ed260d00961071843f8a40fbe72 f552dfa7fdd77e878c83d6a0b06b382aa0e6986c b61889adf57f4faa753271745efabb3ac334d204 150f38f82a920b5d8d5b3fbefd86888fca129c8c 5d6f0ff1ecd8e50fe1d15ba534a3e9fe80b2c61c 93a81a0b15b0408ba18c4544ed43d01b00364841 d3aa31c82856fc5ffe73709f0d778b3ee2479cc4,,Feature at90can128,Fully working example: https://bitbucket.org/rennerm/at90can_canard/ 
UAVCAN/libcanard,31,2016-07-21T07:43:37Z,2016-07-21T19:22:42Z,True,2016-07-21T19:22:42Z,f1aef19bf097839e19e79a0c777fb5ac28b74590,2,1,845e982675626116b67ea729aebb80f45eb1c7df,,Fix tables in documentation,
UAVCAN/libcanard,32,2016-07-21T14:56:44Z,2016-07-21T19:22:55Z,True,2016-07-21T19:22:55Z,e4a1d52be862b03e5872add75890e67bf1d9187c,1,1,47aa29dd4ec00fda96d07991fe65ff47ec8480c0,,NuttX driver update include path,
UAVCAN/libcanard,33,2016-07-27T09:28:04Z,2016-07-27T09:48:06Z,True,2016-07-27T09:48:06Z,b58966126036e4c0694a451ef50ae42b8bced62c,1,1,5df66c98446787ce20c4dace873e0710b321a6c2,,Fix for sending of 0 length messages,In current master version of library if NULL will be provided as payload  message will not be sent even if payload length is 0. Additional check for payload length fixes this bug. 
UAVCAN/libcanard,34,2016-07-28T10:50:39Z,2016-07-28T13:48:34Z,True,2016-07-28T13:48:34Z,a8840be45d98e52a4ca29dd838130207112ac28b,1,2,c208eeb03b9b62156b805f657fcfd17d48c7b43b a815c368a042bc33f4f55efcf03ac97eefc8226d,,Adding functionality to show type infor for custom messages,the path to the custom message.uavcan can be specified with a commandline function standardize handling of command line options 
UAVCAN/libcanard,35,2017-01-22T07:44:41Z,2017-01-22T10:56:33Z,True,2017-01-22T10:56:33Z,23f80800c14f4e9f3f6e55f582bb8ab03be146c5,1,2,0ac1ffb9d9dea520d4e790ab0c76658aa4f61920 b8178329d9d9680a06f93c063c46a4944685d504,,Allocation failure checks,I noticed allocator overflows caused hard fault errors during heavy CAN bus usage  caused by missing null checks after allocation requests.    I also validated that now  the entire call hierarchy for allocateBlock checks for allocation failures to avoid null pointer dereferencing.
UAVCAN/libcanard,36,2017-03-25T13:09:11Z,2017-03-28T16:29:22Z,True,2017-03-28T16:29:22Z,e01c2fcfbabe5312e144fcf13b32fb9c5addf437,8,4,25113e1cfbacae47a31c8452b6b58272c0fe1c2b e6dad86bd4a2c7bd0e7d743caf18c9663253d6e5 4594984482a0ed915cd8a953d1431b768d5804c9 e55a398bce3556e33529147f59fe5c57113500a5,,Extended the library API with a new function canardGetUserReference ,The new function `canardGetUserReference()` will be useful when the library instance requires integration into larger data structures  such as C++ objects. Having a user-specific reference will enable the user code to route the callbacks correctly. Example:    ```c++  static void callbackFromTheLibraryTrampoline(CanardInstance* const ins  Stuff stuff)  {      assert(ins->user_reference != nullptr);      reinterpret_cast<MyClass*>(ins->user_reference)->callbackFromTheLibrary(stuff);  }  ```
UAVCAN/libcanard,37,2017-03-29T16:11:20Z,2017-03-30T15:24:38Z,True,2017-03-30T15:24:38Z,8f0d51795170b34dc167e8fe9d16bb5b6b5f1eef,6,22,38f917d403aee2d6f6dbf67eb1d8ec4374ff0107 a7c107d1012ec0b2908d8ec17d78581894597596 75c2fb958b18baa28e2d9c50f5a7a5fb3af673df 15542b07cabec11eb4934319d1331b7a898f55af d2c88ada6b0671fdba894a2f0fd8a7d8d12d6a85 284a3e80e9ce764aee55cb8082069656c4c7374f 83101fbec9cbe50f546bff325686f4f449026aaa 5ea90a9611748083951b7a4206e397e940bc52c6 036a8a85e732011618e74ddefc9283baf060e467 68a821229cfe0627ecfadeb24630c9c91c200738 1347c40c3db284b23cdf419091787912cfb8986b 17720705a8e7ef38890b5290a6efabf7038f01bb fa11c2c5693e0eb11a190cbf249e279a729a7144 373773497db692b7fd392c9304ce40b776be66ce 37920d2fd506f10e73b533d2a1642ee6ee48d694 1d39c8d41091d79a9ee5e9d9f915bcd330cd139c 0c4e824881aa93185282b6e07ffa791abe688a2c afd4f39c7e5796d8a20353b2cd6b2895aaaa269a b815c2bac753a6abf33b208354f5b9b69f414149 5bf80e5749692f03071999662b797262cbac17bb 96a6c078c53f07f4160c1c0659e15a286e0d29bc 71c9cc59e807e4337109a7ae4b4593dc514380a5,,STM32 driver,Added a simple driver for the STM32 bxCAN macrocell. The driver has been tested on STM32F105. It is very simple yet fully functional:    * Supports CAN1 and CAN2 (but not both simultaneously).  * Takes care to ensure proper frame prioritization and avoid inner priority inversion.  * Supports the hardware acceptance filters.  * Supports proper CAN timing computation.  * Does not depend on any operating system or external library except libc; this means that this driver should work on baremetal  ChibiOS  NuttX  FreeRTOS out of the box.    Design trade-offs:    * Hardware RX FIFO is only 3 frames deep (this is why we have acceptance filters).  * No blocking API calls.    Note that this driver does not use IRQ  critical sections  and software FIFO. This makes it very simple and compact  rendering it suitable for ROM limited applications  such as bootloaders. In fact  I wrote it because I needed to use libcanard in a bootloader.    Closes https://github.com/UAVCAN/libcanard/issues/12.    Nudge @jschall @antoinealb
UAVCAN/libcanard,41,2017-05-12T15:47:48Z,2017-05-12T15:53:18Z,True,2017-05-12T15:53:17Z,2da1c49b50106b2820a4efaa1123ba6d040de357,1,1,5ad65c6a4efda60cda7a8f0512da0f465822bbb8,,Fix new NuttX CAN Bus header location,Hi Pavel   This patch is needed to get libcanard working on NuttX.
UAVCAN/libcanard,6,2015-12-29T12:21:39Z,2018-05-07T08:28:53Z,False,none,0a7ad735aec9f0e0c715eb0608a1bcef3471618d,4,9,b4ea05747a5f7928a42ef95b2a97ee744fa04550 4c605f4c1c81139a29e7e4351a9735816b565e18 1184264e8510d44927a38a7f09528d74f2f5ba73 ec02e8769f918c750ce0ae1ae7c2e5358793017f 22068b59f525fd1de9b69dd8a857cfa33c678916 4e4f944a84cda12fcf892d66a3e8ba41aea884a7 17b03a6d1389f3839c117ca45c0b8199964a3d50 b57b50b1a77e4b9422b23d92f10a901cb53e9202 8d98771430158d518b78c3c50b6cd70cbbe5356d,,WIP Serialize structs,This pull request is a work in progress but I started working on header file generation.  I am not sure about the best way to implement tagged unions. What do @pavel-kirienko think ? 
UAVCAN/libcanard,47,2018-05-07T09:50:23Z,2018-05-07T10:08:53Z,True,2018-05-07T10:08:53Z,2d96dad66585119e70594a50c0f8bc88ace9dcfa,1,5,19df002601910bf9c43447230059f9ec99c83b4f fa8f0a40a4d07f5787d8b71940b07d41c544e8c4 ebdc822338e78cc2f8a4db063859ec50d38a8424 48b74477b3bb38ee3e5c0d61eec7e05fb71638e1 0f5527ec0674ee4ae2ace4947d518c9dadb1694d,enhancement,Abort build if the platform is not supported,Added a new macro `CANARD_STATIC_ASSERT()` which expands into the standard `static_assert()` if the current language is C11 or C++14 or newer. Using this macro to ensure that the struct sizes are correct.    As per the design document  64-bit platforms are not supported: https://github.com/UAVCAN/libcanard/blob/master/DESIGN.md#feature-set
UAVCAN/libcanard,48,2018-05-20T20:24:54Z,2018-05-21T09:31:32Z,True,2018-05-21T09:31:32Z,63b2bba32bac8471840190c15e1a9fb1d4d9ce94,15,10,80386734ea6ce6d44d29fd2861bd7e278ad67e1d a2111383f1b08d0eae55f0de4f4e2a0f87b801b0 5e8a42bed3b62163039105c3793a8fc23f0c0fab cc46b0106c4bd94ad3915fcdd90477823f62415d 786a8d4cc0debbedaeb5789d8b587fce0f4c14e3 274544497318960524b25fb01278c57c39b8f3a0 355188dfa5760c5a27dc9dc7bab70aeb0006bf3e 547cb267bc4c44fd9ca13a5d580f0e22bb949f09 2a35fc4e4bf2748ecc3e8db3b9feeda234770307 162010f1eefdc468547ee5f130cf67310bbbe6d8,enhancement,Code robustness improvements,* Fixed several dozen complaints from clang-tidy (somebody should configure it to run via CI).  * Added a couple more static asserts and fixed an issue with the static assertion macro.  *  Enabled all sensible warnings available in GCC 7 / Clang 5 with `-Werror`.  * Removed GTest  which I came to dislike for clumsiness  in favor of Catch2.  * Prettified the Travis CI script; implemented a Clang 5 and GCC 7 builds.    This changeset does not affect the API or the logic of the library.
UAVCAN/libcanard,49,2018-05-22T08:41:47Z,2018-05-22T10:05:36Z,True,2018-05-22T10:05:36Z,7899ddf80a5981363e1f6e72ef7df2ae9359ac0f,9,6,16781404d9a98f1893c7e6572fc9fa14b38098ed d6d086c597ce0bc69390f58a619fbda8e5c49a08 5287c52d479311918b886b6c3d750f78b4798b15 f8f3a65ccfafe006895b89b8097f699ad0031b2f efaa02d0aa12147d3bb17d9bc50b147278298c0e 931fcd0c7fb4f41317c1ebd007b5996ffa83d1aa,enhancement,Removed all native integral types in favor of stdint in order to improve portability and compliance with high integrity coding standards,This is the PR that I advertised here https://github.com/UAVCAN/libcanard/pull/48
UAVCAN/libcanard,52,2018-05-29T10:46:58Z,2018-05-29T10:47:25Z,True,2018-05-29T10:47:25Z,fa12c07d5219cf348eaf1efe9f35771bf4d0945c,1,1,ce2f90afb5cfb836f86e5c8211fb406957b5450b,,Fixed assert sizeof compatibility issue,Fixed compatibility issue when checking struct size in assert  https://github.com/UAVCAN/libcanard/issues/51
UAVCAN/libcanard,53,2018-06-29T10:24:26Z,2018-10-04T12:31:28Z,True,2018-10-04T12:31:28Z,2af89db6fd60663ef77daef0bb3fde33479ee7b2,9,10,0104f016beec593056d635d468806598c8aa965a 66856787aebe8841c8de04004c8cb94bfe920339 92778394f232feb8990ef26764eac24608de1567 d260757eacf1d01e0cc6f31469efa9ae0cbc1f06 efd6308c89c1f05745eb500455cdb0c447a54b52 1a8e2c87f6058e8263f25af02901e9d167a81404 c50dcebb03d6080aa0ea83ce4ac9162d30de4e1c ada6692093c2d14d0eccbdb1cc3c5ff632acbdf6 a8b3237d22f366b3fb05cd1c8d7e626f2596bbfd afa1fc6ab44549e823092c9e60d75a646855bd32,,Implemented DSDL compiler for the libcanard ,#50 Here is the proposal for the libcanard compatible DSDL compiler
UAVCAN/libcanard,57,2018-10-04T13:06:42Z,2018-10-04T16:02:58Z,True,2018-10-04T16:02:58Z,8340580dfad792ec737b6f19d82feab78e1330e3,4,4,23e09030ead04b061607aa31278e448dc6e4e4a6 da7a4374244812830c95e818b435dd1d75d3162b e0123c0f6f1f356637af0a7434415a128e02c3df 09c228fe1f917f5e0014056c6a960ccb8f90f047,enhancement,Minor doc and code style fixes related to the new DSDL compiler,Logic left intact.
UAVCAN/libcanard,60,2018-10-18T09:00:37Z,2018-10-18T13:17:06Z,True,2018-10-18T13:17:06Z,9fd07c7aca1007e17161a41807bbc28751bbcbe8,2,1,5bd2c32a9baae9bd2dec3a92e1707c97d8b37ee6,,Added constants for length of arrays in header files ,#58 Constants for lengths of arrays are now generated.   To distinguish between constants for dynamic and static arrays  different suffixes are used.  For dynamic arrays  the constants will be suffixed with "_MAX_LENGTH"  while for static arrays "_LENGTH" is used.
UAVCAN/libcanard,63,2018-10-20T07:52:23Z,2018-10-20T12:26:34Z,True,2018-10-20T12:26:34Z,4941419773421db12b9345c9e0fbe112c72a852c,2,1,1355a0ce483c695da5935382ceb9d6bd4c222bec,,Changed from unnamed to named structs in DSDL compiling ,#59. Changed from unnamed to named structs to prevent errors during compiling with c99 and -pedantic.    This PR implements the first proposal by Pavel. Dynamic arrays will now be created as a named struct  with the same name as the array. this inner struct contains two elements - len and data  which holds the length and the data on the dynamic array.  ```c  typedef struct  {      uavcan_protocol_NodeStatus status;      uavcan_protocol_SoftwareVersion software_version;      uavcan_protocol_HardwareVersion hardware_version;      struct      {          uint8_t    len;          uint8_t*   data;      } name;  } uavcan_protocol_GetNodeInfoResponse;  ```  
UAVCAN/libcanard,65,2018-10-20T17:52:31Z,2018-10-20T17:57:16Z,True,2018-10-20T17:57:16Z,61a3e38daeada6b15c99086892127c7ea50644e3,1,1,1d7fe17f90b41a25969c9a4af23a3f7a91ad6a32,,Fixed bug where some parts of the template weren t updated,Fixed the bug reported in #64. I have looked through the generated C code  and it looks good  but please check again as I could have missed something. 
UAVCAN/libcanard,67,2018-11-01T10:43:13Z,2018-11-03T13:45:54Z,True,2018-11-03T13:45:54Z,43de1c4966b8d1e5d57978949d63e697f045b358,1,5,a98d345e87d519c829d40d71d6e60fef6539b893 673cb367c5b40b8653164d7ac3226e9134367c92 e257a5482b81fe958f9164b535db3468793323e0 e1e8bcbada74e4c25619154b9dc7ce6eebcbe183 c4fabe28ddad0e73e9c2290606faa067cf7e6212,,Fix build warnings,Depending on the dsdl definition files  the libcanard compiler can generate code with warnings. This patch remove all warnings for dsdl files found in libuavcan repository (tests  and standard uavcan)/    What it does:   - mark a lot of function parameters as maybe unused  to suppress gcc warning   - use two differents macros for signed and unsigned saturation 
UAVCAN/libcanard,68,2018-11-01T11:10:13Z,2018-11-02T12:41:15Z,True,2018-11-02T12:41:15Z,04a4b5d43d02eb7362c60655b6f54addec05708b,1,1,00f4f6713462ec61cf098f7444b8bd4b91ac55fb,,Fix issue with service constants in dsdl compiler,If two constants in a service message have the same name  the first one is lost (redefined by the second one)  This path prefix the constants with REQUEST or RESPONSE like any other fields.      --  Found with the ReportBackSoldier service of libuavcan test files
UAVCAN/libcanard,72,2018-12-10T18:34:56Z,2018-12-10T22:05:16Z,True,2018-12-10T22:05:16Z,5bdbc8764c8a550fec6fc55fe113fc51001a5c5f,2,1,b35c32a794b4dfe09946af5ac091bc915df33b0a,,Create separate header file for defining the build configuration,The option is given to the user of providing the `canard_build_config.h` header file with custom overrides; this is enabled by defining the `CANARD_ENABLE_CUSTOM_BUILD_CONFIG ` flag.
UAVCAN/libcanard,44,2018-01-23T15:40:04Z,2018-01-23T15:43:07Z,True,2018-01-23T15:43:07Z,902dc933dc2beb2e4bf305cb027cdd9ed4278b6a,1,1,e49bdece231b261a7cf8d50e4998c091a3807e06,,Make data_index a uint16_t to allow sending more than 256 bytes ,none
UAVCAN/libcanard,76,2019-01-05T04:34:32Z,2019-01-05T08:56:25Z,True,2019-01-05T08:56:25Z,dec15b3bb19f6b953705dea3851590cd46f801ee,1,1,067898534469a8511c8e480959eb47cfe9e80a8e,,dsdlc_compiler fixed building of headers with C ,this removes the void* cast when calling encode_internal and  decode_internal for compounts. The void* cast causes a -fpermissive  error when built with C++
UAVCAN/libcanard,77,2019-01-15T00:36:15Z,2019-01-15T14:55:07Z,True,2019-01-15T14:55:07Z,832068380058856f52cefea58028816e3de65f51,2,1,1714dd491379d5e5a1b988c460b8aed485f3cbd6,,dsdl_compiler removed non TAO v0 support,the v0 non-TAO support didn't work correctly any way  it can get false matches which causes incorrect parsing  
UAVCAN/libcanard,79,2019-01-31T19:59:09Z,2019-02-01T01:05:56Z,True,2019-02-01T01:05:55Z,c552466f73d0833c08428edf9293522fb85e83ae,1,1,fc763e4fef122f70c118676ce7bda1c89ac63794,,Added STM32F303 as a tested MCU ,I have personally verified CAN1 to be fully functional on the F303 series.
UAVCAN/libcanard,78,2019-01-18T21:47:41Z,2019-02-02T16:39:32Z,False,none,0c99d38154dc7fbe485e663bfaa549140b54a8d4,1,1,1a945c72d4eb334cf59a12a1b111fbbffc38b34c,,removed permission set from generated headers,this is not needed  and can cause build failures on rebuild
UAVCAN/libcanard,81,2019-02-03T12:39:38Z,2019-02-03T15:17:00Z,True,2019-02-03T15:17:00Z,907f95710a618e0a2e774223c6d6c325723d559c,2,2,016a6efd80f1c1842154141852bc6f6d2cd41568 08286a350f6d2a2a80475f4c24348b9db830675f,,Fix boolean message member code generation,https://github.com/UAVCAN/libcanard/issues/80
UAVCAN/libcanard,82,2019-02-04T06:18:03Z,2019-02-04T06:23:58Z,True,2019-02-04T06:23:58Z,83514d695a871eb49c00196a8d7df37e7d1d974d,2,2,58e676f905f28e6b7da09ce62e023f5bb0305697 30f789532f9ac5c316f8bec3ab07cebc9076916d,,Minor changes in DSDL compiler and STM32 driver s README,- Modifies one of the DSDL compiler templates by adding some explicit casts to silence some compiler warnings.  - Adds the STM32F091 to the list of supported MCUs in the STM32 driver's README.md.
UAVCAN/libcanard,84,2019-02-17T20:37:34Z,2019-02-19T09:08:43Z,True,2019-02-19T09:08:43Z,67b28be349e85e0dcb2e61ca94c3071d08eca19c,6,5,fccd73e6f611d38e2a93a378bebd96c939d12430 1862da04fa48762dcb5da7eb25797b746feff455 cd0056440dd6feb72f8d4028857234ef20e32859 f2b52ab2419d8a31bf33124441b77d59e3107990 bc3112dca00d204d949885d06665fb89ffaaad4b,,Dsdl compiler v1 0,This PR updates the DSDL compiler for Libcanard from v0.1 to v1.0. The work on this PR was started before Scott started updating the DSDL compiler for Libuavcan. However  we both chose similar approaches.     The biggest change introduced here is the (natural) change from using pyuavcan to pydsdl to parse the DSDL. Please note that this PR is blocked by UAVCAN/pydsdl#16.    As I understood from @kjetilkjeka  signatures will not we used in v1.0  and this is therefore removed from the template for the C header/source files.    To verify the behavior  I updated the DSDL for v0.1 to include version numbering  and temporarily changed the port ID ranges for standard messages/services to be able to parse v0.1 DSDL with pydsdl. The result can be seen in the attached file  which shows that the result is identical  beside the removed signatures  and the changes needed to adapt v0.1 DSDL to be able to use pydsdl.  [compare_dsdl_v0.1_v1.0.txt](https://github.com/UAVCAN/libcanard/files/2873383/compare_dsdl_v0.1_v1.0.txt)    
UAVCAN/libcanard,85,2019-02-19T23:16:51Z,2019-02-21T13:49:38Z,True,2019-02-21T13:49:38Z,0b57a7472cc3118686dd1d5d7a0beaf21005e2df,1,1,5fd851096a4d09bc4de1263c9d9b80684c1d365a,,Use pydsdl s directory instead of pyuavcan s,Removes old reference to pyuavcan's directory and instead uses pydsdl's.
UAVCAN/libcanard,87,2019-02-21T14:01:24Z,2019-02-21T16:16:30Z,True,2019-02-21T16:16:30Z,9fedaee863fe8007eda5084d5de9f8cc4fb7e6fb,2,1,6b61f60c8084fc568d60244aed28a2614b6862f1,,Bugfix and add support of parsing unregulated fixed port IDs,Fixed bug where parsing failed if using unions in request/responses. Add option to allow unregulated fixed port IDs to DSDL compiler from CLI.
UAVCAN/libcanard,86,2019-02-21T13:58:09Z,2019-02-21T16:16:46Z,True,2019-02-21T16:16:45Z,16e4f34341f510c0ddde13a8d5a203c7ffb156f2,1,1,16abaffc8918bba83a08ed59098f8cd9617b9fa0,,Fix bug with decoding of compound structs,This PR fixes #83.
UAVCAN/libcanard,89,2019-02-25T18:51:06Z,2019-02-25T19:23:49Z,True,2019-02-25T19:23:49Z,6966622ab08b539d7b44b689bc875401b4d81de3,1,1,03bb805ec2742f120c1f26a0d40a38cd47dc8e7d,,Fixed bug introduced in last commit where an undeclared variable were ,… used in auto generation of code. Will fix #88 
UAVCAN/libcanard,90,2019-02-27T16:48:16Z,2019-02-27T18:05:54Z,False,none,6181e32b09880ced452052e75d10b02b7dda155f,3,2,d8f2ebc64d8f118a20bac57d981af078914bc724 88538bd737ae60c52b62822adbcaf084eef60cb0,,Error handling in RX state machine tests,I added this locally whilst looking more at libcanard  raising in case this is useful to merge back.    Note - this does change the prototype of canardHandleRxFrame giving it a return type - may break builds that warn on ignored return values.
UAVCAN/libcanard,91,2019-03-01T02:53:52Z,2019-03-01T13:00:26Z,True,2019-03-01T13:00:26Z,de52a94c5cdac6a77655738a0ac830c01e8a0367,3,1,e928aef4b1d6f8968147d422c26ca4dc01e54368,,Add error reporting for canardHandleRxFrame,Add error reporting to canardHandleRxFrame and some tests to make sure it works. Address comments from #90 
UAVCAN/libcanard,93,2019-03-10T18:31:22Z,2019-03-10T21:12:45Z,True,2019-03-10T21:12:45Z,1d1e2a3cf01907b9a06f30c1ccbdfd98bae25978,1,1,4e0fcbb1d630f633dd7f17e7567092a47b2e2d44,,Bugfix priority field position in test,Let's merge this into master then include it in #92 as well.    I didn't bother adding tests for priority different from 0 at this point as the header changes is going into the uavcan v1.0 branch pretty soon anyway and that seemed like a just as good point in time to do it.  
UAVCAN/libcanard,92,2019-03-01T13:24:57Z,2019-03-11T20:00:52Z,True,2019-03-11T20:00:52Z,2b536741e101ee48d54980b3ff47310796fb2eee,5,13,16abaffc8918bba83a08ed59098f8cd9617b9fa0 16e4f34341f510c0ddde13a8d5a203c7ffb156f2 03bb805ec2742f120c1f26a0d40a38cd47dc8e7d 6966622ab08b539d7b44b689bc875401b4d81de3 e928aef4b1d6f8968147d422c26ca4dc01e54368 de52a94c5cdac6a77655738a0ac830c01e8a0367 ec99817f39da9e19eb6738d49b42b089bc8fd0f4 75e593b9a1eadf1f2ebf85dc267ba490b0ddd537 ff5dea2eb570a2c9582132a52d3db757b98f226f 8fae553d1d685463387e57f06472024583434ad1 4e0fcbb1d630f633dd7f17e7567092a47b2e2d44 1d1e2a3cf01907b9a06f30c1ccbdfd98bae25978 98b495e4361499932d07770886e5308a0ed11d99,bug@enhancement,Backporting recent changes from master into uavcan v1 0,
UAVCAN/libcanard,94,2019-03-18T16:53:09Z,2019-03-24T18:24:31Z,True,2019-03-24T18:24:31Z,298077d9e3a69bcabd46b861dfbdc18dfae1ce71,6,2,83d75fa795636386358dd7248cf1bde98fcddf3c d14098c8cd359f452534c9a88fc6b4b568116571,,Fix flake errors assuming line length of 120 chars,This is a purely cosmetic set of changes to help flake8 to be quiet.     In some environments flake8 is run through the CI system blocking PRs which have flake errors in them - this may save some others a little pain.    The changes were made assuming a 120 line length which was inferred from the code
UAVCAN/libcanard,96,2019-03-19T20:49:13Z,2019-03-26T20:47:21Z,False,none,8ebf4a0976893ac78cda43b80f1335a003248e7c,13,2,8739d195a239bddc9584998f9543e146efd484f8 1ff398a9186b8f3825790a7b6ec59238544871b1,, WIP Multiple transport protocol CAN FD support,This is perhaps a bit rough around the edges still. But I would love to get some early feedback on this. Especially from @pavel-kirienko  but also @aasmune and @thirtytwobits if they have the opportunity.     My following changes and rationale:   - In order to support multiple transport protocols  differently sized blocks depending on the transport layer was required to avoid being extremely wasteful with memory when using CAN-2.0B.   - Statically setting the transport protocol and block size was deemed inflexible and not very user friendly. Instead this is set on initialization.    - Even though there will be multiple similar functions relating to transport frames  I think an API along the lines of these changes is simple to use correctly after C standards and will work well in practice.    Am I making a mistake by making the transport protocol selection dynamic? If this was a language with generics I would probably use it to implement this. I do feel like the dynamic approach is the least bad in this case.     
UAVCAN/libcanard,100,2019-03-26T14:46:30Z,2019-03-26T19:44:23Z,True,2019-03-26T19:44:23Z,4df2678e5b231f047f7a4a069fe0d5988aa7d1bc,2,3,4770e55e60d10c776edc806374f25a806b466bd1 d15f6c9459d07db85480209bb3a4844e9f836c50 21f8827c3b5072d8b21906624652403ba420c150,bug,Fixed the argument order in isPriorityHigher ,I've received an email notifying me of this bug. We weren't aware of it because we don't have unit tests here. The TX queue was prioritized improperly because of this issue.    This fix should be cherry-picked into uavcan-v1.0 as well.
UAVCAN/libcanard,99,2019-03-26T09:37:09Z,2019-03-28T18:41:00Z,True,2019-03-28T18:41:00Z,43c53854e70e7adc758f6a4131112c71029cf57a,6,3,0d3d002e52cd9462b6090e0da27da90b8af3d3a5 f780ae07dd7334037c195e331a19df0261b2c4ca 55b73451c79a2193b608e19e95926f209ef7f5e9,,Start of updating CAN ID header format to match v1 0,This is a start of updating the ID header to match the new format for v1.0. Note: It could be that I have missed some parts which also must be updated related to the new header format  or that I have made some mistakes. Therefore  I would appreciate that you check my changes thoroughly.     These changes were originally included in #96  but we chose to split it out to a separate PR.
UAVCAN/libcanard,106,2019-03-28T19:37:23Z,2019-03-30T21:47:00Z,True,2019-03-30T21:47:00Z,1bca15e856dd627f1d9e6bc54925dbe9f698a18c,11,3,927478408684f1fbfe04872d73541ecf51a82ee6 2c5c08e96429c5aa11592db18702418b58f2de84 88de1a6fb615e1feea0f1587086773f39356af4f,,Updated API entities to match v1 0,This PR implements the comments from #98. Could still be defines/constants which may not be used.
UAVCAN/libcanard,109,2019-03-31T14:04:29Z,2019-03-31T14:41:39Z,True,2019-03-31T14:41:39Z,3f1733de5717721674b2e2c23355d5e0e85ee773,2,1,22bae3ea73afea1383cf9a746d7e13f4333f06a2,,Fix bug where service IDs were sliced due to overflow,Forgot to change fields for service IDs from uint8 to uint16 in the previous PR. This caused the ID to overflow.
UAVCAN/libcanard,110,2019-03-31T17:19:46Z,2019-03-31T19:03:52Z,True,2019-03-31T19:03:52Z,9a9ac0d31199a9b4b06d1d5f7cb7274efd6b930e,2,1,9dc2cea882e9559fe0482703ce466ddbe47e3320,,Change toggle bit to start at 1 instead of 0,Updated toggle bit to start at 1 instead of 0 as in the previous version. Tested with both single and multi-frame transfers.
UAVCAN/libcanard,112,2019-04-01T15:33:05Z,2019-04-02T07:28:47Z,True,2019-04-02T07:28:47Z,9620dbf46aa3e75a07b0ae77679ddfac6d2da16d,1,1,c17aa4e891da2e0bf63e8ed0d0263b17199c981d,,Add protocol version bit to CAN ID,Set protocol version bit to 1 in CAN IDs.
UAVCAN/libcanard,113,2019-04-02T16:42:45Z,2019-04-02T17:41:07Z,True,2019-04-02T17:41:07Z,0f55bf8f81d1fa8545a8d35cfee2e9670a238551,1,1,17a9bf5b3c41341bc5b50d5df9f4e59010fd1c1d,,Generate constants also for empty files with no fields ,Fix issue #111 
UAVCAN/libcanard,114,2019-04-02T17:51:33Z,2019-04-02T19:36:10Z,True,2019-04-02T19:36:09Z,950b4efd2dd6b8b730c8807a2febdf610b610104,2,2,2555b1b5ec668998191a098ac20e9533d6320a26 0e5a0f10ce724ff3d442a448d04b18d8459dfd0f,,Removed TAO in serialization code ,My attempt of removing TAO support #108 . I think I have done it correctly  but please verify that the decode and encode functionality of autogenerated code is correct.   Example of uavcan/node/Record: [Record.1.0.txt](https://github.com/UAVCAN/libcanard/files/3035273/Record.1.0.txt)    
UAVCAN/libcanard,116,2019-04-08T09:09:45Z,2019-04-08T15:16:50Z,True,2019-04-08T15:16:50Z,da8562676c446b312533caa67a21ea4bb6a26281,1,1,f31d94254e4aaeb750f1aed83e6b1a518e5569ab,,Fix bug regarding TAO tail array optimization when using nested com ,…pound types.    This fixes a bug regarding tail optimized compound types.
UAVCAN/libcanard,119,2019-05-07T00:26:24Z,2019-05-08T20:38:06Z,True,2019-05-08T20:38:06Z,9c4b3f7d3cadf6bb70e1856e1c44a0424416a570,1,3,dd35340f56279349ec88ab8c67174d12ca74d537 00f0426f810f89be9943673dc21365021cdeb196 152d5fb3c07aec6e6f1560e8a4ad4d18c255357c,,Fix DSDL Compiler Dynamic Array Encoding Decoding Issues,In using dynamic arrays in my project  I came across a major issue where the first two elements in an array would be decoded correctly  but any element after that was mangled and useless.    After a few hours of debugging  (and some major help from some friends) we traced it back to the DSDLC-generated decode_internal functions.    Essentially  we found that the loop that decodes each element in the array adds the value returned by the decode_internal function of the internal data structure  which returns the cumulative offset expands way too fast. The offset value is essentially added to itself *and* the incremented value each time  which means that new elements are essentially placed in arbitrary memory locations.    The encode fix hasn't been entirely tested  but looking at the code it follows with the same logical error as the decoding issue  and changing the += to = fixed the issue entirely in decoding.    
UAVCAN/libcanard,122,2019-05-10T09:44:50Z,2019-05-14T20:13:12Z,True,2019-05-14T20:13:12Z,958e0a7b29a438559387127890debba8d2ffdc46,3,1,26f57e932c0fe97dfa422c0a33be6383f48fc22d,,Fix DSDL compiler,This updates the compiler to the newest pydsdl version. See #121
UAVCAN/libcanard,120,2019-05-08T20:31:08Z,2019-05-08T20:38:53Z,True,2019-05-08T20:38:53Z,4244b8c0b303ac02a20fd603844179809bee59b3,1,1,f444b7efc4e9c46ff4b6e818c14bd3334356af70,,dsdlc stability warning,
UAVCAN/libcanard,127,2019-06-05T15:57:59Z,2019-06-06T18:02:48Z,True,2019-06-06T18:02:48Z,d83ee9af8a112e40bdda2a177c37269b5100805e,1,3,d6bddcf11df7020bebdacec3f420d8a9a7ec9af1 9719e20c5f06fc78fa4d0760b900dc83ec4cd0d8 7a5df5e7306b282df984639ebc9c47e3d26a69f0,,Fix multiframe CRC calculation,
UAVCAN/libcanard,130,2019-06-16T14:04:24Z,2019-06-29T15:02:33Z,True,2019-06-29T15:02:33Z,c94b56275c15fb3fe33be2fd25977d2dc0023bab,3,6,832528cf1ee729cb630735a10ee4b430c5df1cc6 e4fba677e39aabb55a7f41c89f09bae576212c03 1b4e36964921fc162e54791282b8ceb84fd4b53d 66e5edd86cb429ba828b9e0bf71483902952ac10 9cb79be08bed2b6dce45ab441f32826c8811b6b5 af9352ab6a1167b2ab21cd9e6154f560373229f1,,Framing v1 0,Update the framing to version 1.0 and add tests to ensure correct framing.
UAVCAN/libcanard,97,2019-03-21T05:22:23Z,2019-09-12T07:34:16Z,False,none,5e18e2d9c86b5bc7057b2de37a2158d6289e1ee0,2,2,3605ddb15d4ef90bc4c62e82b6310b85bcac25fa 99163fc2369e5e5f75f8473f0b950b3418830d3f,,fixed C errors and permissions,This fixes a build error with C++  plus fixes the permissions on generated headers. The permissions matter as otherwise a rebuild fails with permission denied  
UAVCAN/libcanard,137,2019-09-06T09:05:05Z,2019-09-12T07:34:16Z,True,2019-09-12T07:34:16Z,8ee343c4edae0e0e4e1c040852aa3d8430f7bf76,9,1,dd7e92e995658b1c06f73638bf86f6cf5268713f,,Remove the DSDL compiler to avoid confusion,The current DSDL code generator does not quite meet our software quality standards and at the moment we do not have the necessary resources to fix it. Seeing as nobody out there is available to help on this either  I propose to remove the generator from the upstream and reimplement it later from scratch in the `uavcan-v1.0` branch based on Nunavut.    In its current form  its presence is harmful to the project.    Closes #97 #70 #118 #121 #123 #133
UAVCAN/libcanard,115,2019-04-07T09:27:00Z,2019-09-12T07:37:26Z,False,none,b59a25b25a7414c078045b517796adae1d5241b1,1,1,ad25e57a9239a7e21c750bfce9be6f5800156d5d,,Fixing bugs in DSDL compiler,Found a couple of bugs in the template used by the DSDL compiler:  * All elements in static arrays were decoded as primitive types even if they were compound types.  * Signedness of return code was not checked before incrementing offset value for decode_internal of compound types.  * ~~Offset were not incremented for compound types during encoding.~~    **Edit:** Found out I had made a mistake and the last point actually were correct. Reverted those changes now  so only the first two remains.  
UAVCAN/libcanard,134,2019-09-01T17:15:56Z,2020-01-09T19:07:17Z,False,none,3a14aa550c7fd7cff3dff2dee67f04e13e0a4bf9,11,1,4d7ae31e16afea6d21a9e13aaa9348677ff10808,, WIP Implemented support for CAN FD with dynamically sized allocator blocks ,Not all done  please leave initial feedback. Look at todo to see what you can refrain from commenting.    ### Design:  The design is based around adding a notion of protocol to the interface that will only affect the maximum data size of transmitted frames (output from libcanard).     The received frames (input to libcanard) has been changed to accept an array of variable size to allow receiving from all kinds of interfaces in all kinds of modes (to support bootloaders etc  ref prior discussion).    Convinient types (with data size corresponding to CAN 2B and CAN FD) for reception of CAN frames is provided in canard.h. This is not strictly necessary but avoids the hassle of making sure your type is compatible with the `CanardCANframe` type.    ### Constraints:  #### Transmitted frames != received frames  Due to C being quite awfull I'm not allowed to create the following type  ```c  struct CanardTxItem  {      CanardTxItem* next;      CanardCANFrame * frame;  };  ```  This forces me to unroll the fields of `CanardCANFrame` into `CanardTxItem` like the following  ```C  struct CanardTxItem  {      CanardTxItem* next;      uint32_t id;      uint8_t data_len;      uint8_t data[];  };  ```  After reading the C specification on type compatibility i see no way to safely return a `CanardCANFrame*` from this type. Which unfortunately means that the whole `CanardTxItem` must be returned or data must be copied. I don't think this is great  but not terrible either (this being C). We are only returning const pointers of this block so messing up the `next` field should be considered misuse.      ### Todos:     - [ ] Add FD equivalent tests to what exists for 2B   - [ ] Write tests for functionality that is touched and previously did not have tests   - [ ] Update the .md files   - [ ] Try to massage the FD block size down to 80 bytes   - [ ] Attempt to write assert on all properties required to be compatible types for can frame types.    
UAVCAN/libcanard,103,2019-03-26T20:47:04Z,2020-01-09T19:07:28Z,False,none,e98fc0ca742f2435457f75c4d9aedea3d63de31d,12,1,7fbbefcb55ad6c1262f511d37c1355a466b13d33,,CAN FD support take 2,@pavel-kirienko see if this is something more in the lines of what you want
UAVCAN/libcanard,139,2020-01-17T11:34:52Z,2020-01-17T11:49:23Z,True,2020-01-17T11:49:23Z,868ac790291324602c744774b787eb4850d14d0f,48,10,56e9c95b46398ad303bd49cd0e9c7712696966bc 7e78fa7d4fae8d9226bcaf11c03affae4b8c78e9 0487bc24e0cf20ce3caadb9a606d5bc54b13e625 e016bbc512765c1aaae87f0ebfe1c92a18ca4d3e 805c7c9cfd5daf62a17cf9ac368a0e5bfc8fc9e8 2b2ff6e232c2a21ce42613310edf89e6b037d54c 23cd7814ca31a3a149863a85446a8f8db2a9a8ee 58f03ca27cf5c777a2ef44a678a5594c32ce40d9 7e1065d9c9df2aad0f609cf8a181f4e30c1927c9 9880a53bede5c308f63189f79f77fc9bc5003224,enhancement,Tooling up,There are no significant logical changes in this PR. I am merely preparing the somewhat abandoned branch `uavcan-v1` to the updates that will follow. This PR brings the following:    - Static analysis using clang-tidy; no CI integration yet because it requires fixing <sub>*(no  GitHub  this PR does not fix it  teach your robots to read properly)*</sub> #117 first. Closes #125.  - Autoformatting with CI integration (fail the build if the sources are misformatted). Clang-format is somewhat underwhelming here but it's not too bad. Closes #124.  - Remove demo app and drivers. The drivers will be added later in separate repos just like it's done in Libuavcan. The demo  seeing as it's based on SocketCAN  will be re-added in the SocketCAN driver repo. Closes #107 (well  it doesn't really *close* it  but it makes it irrelevant).    The diffs are huge and meaningless.
UAVCAN/libcanard,140,2020-01-17T15:14:49Z,2020-01-17T15:15:17Z,True,2020-01-17T15:15:17Z,38379db46c574278e675f16b574d130fd2d228a8,9,1,2aae88654a76e1ceefec7e0e2d68aafb91091b99,enhancement,SonarQube integration,Close #125 
UAVCAN/libcanard,142,2020-03-03T01:28:27Z,2020-03-08T03:14:34Z,True,2020-03-08T03:14:34Z,a2f3364d927c1dad5701cb2681ae791af97771be,36,100,502e51240e647cde8d9e0856d4d37720c36b3cb7 22400faf39d1ada5aa0c026e6f941d7d9d968ce5 165ef2de80e4f1a16d090da10f44d5b9e708beba 5cf5b1bf90fa221be518fd19fed1b4e85fea6e35 3c7188c1d7995c9cabc972ed721949ce1533500c ab480af5375f9c514d5be98e2700ef19d683a4b4 501955d4c41fe25bd50ce318b08ab80efbb35866 4cfa339e40d2b78c35502e9d45e357b2774f6ebd bcca48493514bc87e4795a2db5db113c5d275e29 0989c310d55c7b4c2a5c4e14f49b96d6c3897785 aa64c18bf53a0d7e5bbd422599f6acd6a02ecf4e 716b5b20468b1db16dcdd3e8d6491e379ab2ff2e 93ad49f706dd9d51acf64cd8fc06fabf93c2014c ff822fd7978f6f5cdee63f214afb5ffdd59428a6 8410701681630b2c49683fbd42a641f47ae5167f 70e5322fbfcb8977e3aa987be7d3671610d7cdb5 5274db50faa7851df645d635324e2efb4a685bce f4d9a44977b7f797c050120fa2934e124778d004 c7ed98382105c2de49dd74c88f226ac4321a871b f75eff2a837d769e981fd8b90f6348ce0a15437d 534f31799db634457592ea09c1bf9596155caec8 91d85899e05ee1c22e1b71931ed886a1bbaa800e 45f8b404633bb16a7b1a85e64e8896ba46ae9a0f a6679b6591ee70d4a0e00a58333b2ca88eac14fa aedd4f81338f9f5171b058b5dc544468c5ef727d a4aac16eee6fdb4185dbea302ef0d836a222bb4f 70e84114cb457efc0280142c14a2382a78412834 65aab43d3866bdec009ead80d427234c0a5ed9ba 5a3d960e0cf34d1bb0b0c4e386284fba8e8eb4c3 25f210a0e94e16191cb25b2f6c7d8bf899f291d4 8b7551fd826538573c6ecf8758bf564c081bbe74 fd3044855aa747b87696599eee299db25ca9aa87 ec884d2150501027eca569cde604580eea49ec04 eaf9537220e0cd3c05ae327420cc8f23dc6fc853 fd4a225f07ecc29244a05c2a112c36927594da7b 9e109f8da2e533241638baf91575252fd053448d a987ced05674336ff36f97aac25893c0631b7a2f f83025c9b2bb6bf7b55d6c2311f331a5fef4d5f2 951902b5baaf936857d17ceec48825a594d5db0a 24ab7ecebd2ff9614dd95eef7b10ab9f39236953 468965fbf7644317288bc72a338cd473db2886f1 a61b50572b54084b6253eaffac756bf8d237d55e 23a47eb17ff73ac87b97597833d0a7c582245fc3 0bc8cf41d710dc5dc685f21a2a3295510d1620d3 249594da9fc519ade85f4274b83661140cf5135a 4ed9f7735f83384bebc0473b04364edcb8d85046 ec68f80fb4078c8d22c34d4fd956ca7bd8e9394f 573da6ee7646277a83b27b59e052bc9c685159f9 80875648a4b97fd6e4f9b01eab076abf08266319 568ac1fc46d97527c78885dd9b3620adf52a8c14 a6d38c662124d9f074727ef940ee47cf0e728368 0e5e959aef71b3de327aeb9c23555ee4671731b2 46529d63a96847db074eb57e0f9af20d09887e4b 36edc2d0e8eca0f9f3d7335d7859e4389b21630e 41d2f80dcb68d846fa76ad29b9358a2e3706c0a4 5e9f7424f96987f57036e4f0ee155f043f99362d 97484cc5fa49b5416912cac1d04b255a3d7f94c1 58a4dfd616d229fcf734076e169b5831c3a70697 64e60ceaf56e724b6d26ad475a20eaecedebc540 efaa25b94604bfe3ca373a8f0687e0f660249c83 894f3a12a772379f2bae62afd2b28c067dc51c96 c579ae231e9e365569642f4229d8fff98cff6833 82844f0717266254c03983a91e2d9d09718820df e9019d086d00e3bfb673f9a807b83754127edb38 5e1bca92d2197cdf85c021aad8de4c9ce6294192 9ca9be2e7a3f5b3ed953b9fc52216effa63ea99c 389cf17d3fd0e60164646f9ba7563ebf2f1a24ba 5c8bdef36d6809b267faac332237884ba00c0f1d 54637ea4f5d5758b0a9006f52e5e605947816724 6aa8de0fda57e34780f1e7c4ea5538981142f7f6 357d4d1ee07f45a8811cf6f0a3280dd553d61123 123ff12e463ab1f943a261effd24adc30c8f2cb9 b9497e7db6b31be99086c122fec9cb36b92c992b 130862ce99c13c858f1922bf7237e8e01e7bc300 57c328ba34f2b95e1ef6cc377bf6ba69b456e7dc 162a5a0e5e9ec7b98a3ac8b92d1fba660032292e 0d665917faf6f0b1bfa90a861dfad68ded5e13a6 e1caf06772035dd3e776f1ae8ea00519797fbda0 966d10eef89b60cb48409865ed2a36c08669c3c1 afc0b2e850f77f10e366cf5119b05c36d7785e01 347d0f80cb8c50b7c7fde079f3a06556eceb8ae5 6b4e9a5920b92d2cc7cb023867ebbbe62ab49ff0 34f8484a968c280fc9f21b6521f43a769bd422e6 9efc9dd79a44bf14d8008f903db321b0b3342152 c9e464ea11b1b22403a419789bb981ba5bbec480 4199f620a9259ff343625a2c56262897242ed79f 1361489e407bb90c1dda6779d53ccf3627a7e7f7 988bba27658ed2d4ee8211cde82e8091b6536679 183013bae210e32b1eff79ad519c6a699ecebf89 1ac67c44aabe181cbd5a810feb153e3e8ae33f35 7b5fcc3f5c8dee81a8b546848a92bdf6386b9117 42664f4eda6dd5dc83097f614ce0ac003acac3c5 d0da584c9502419742b4d5a6aedb45d30c757ff8 691f2cad86b3235c3fb17a7bfc514a28d62f2583 9a2052f16ba5254ebec7752db46ba56112df3d52 b5f1b7781c9a4aeea12f088944b42e881395c6ff 13d0f90ee275a7a97f60697fccb964d4ba63b32c 09b4370a58f4b8b7e2418d0e57f11c0ce4d24497 f80aa3c320aec049c3e0931912143aeac997df8e b16a86b5a638d6ad3f9cbdf60bff194a9985dc9e,,UAVCAN v1 0 done,The library has been somewhat reworked. Don't look at the diff  it is too large -- this change is impossible to do incrementally in a sensible way.    The new implementation offers hard time complexity guarantees as discussed in https://github.com/UAVCAN/libuavcan/issues/185. The new implementation supports both Classic CAN and CAN FD without the need for compile-time configuration selection (https://github.com/UAVCAN/libcanard/pull/103). The new implementation offers a much simplified API that operates on contiguous memory buffers instead of small fixed-size blocks (https://forum.uavcan.org/t/canardrxtransfer-payload-reading/600).    After this PR is merged  I am going to do the branch swap: `master` will be v1.0  and the current master will become `legacy-v0`.    Fixes https://github.com/UAVCAN/libcanard/issues/131  Fixes https://github.com/UAVCAN/libcanard/issues/129 (this case is covered by tests)  Fixes https://github.com/UAVCAN/libcanard/issues/126  Fixes https://github.com/UAVCAN/libcanard/issues/125  Fixes https://github.com/UAVCAN/libcanard/issues/117 (completely new memory management)  Fixes https://github.com/UAVCAN/libcanard/issues/105  Fixes https://github.com/UAVCAN/libcanard/issues/104 (there is no DESIGN.md  the description has been moved into the header file)  Fixes https://github.com/UAVCAN/libcanard/issues/102 (100% test coverage)  Fixes https://github.com/UAVCAN/libcanard/issues/69 (https://forum.uavcan.org/t/platform-specific-components/768)  Closes https://github.com/UAVCAN/libcanard/pull/132  
UAVCAN/libcanard,132,2019-07-01T22:43:57Z,2020-03-08T03:30:00Z,False,none,4e7b56ad5786b5f0f264f9d0f3679678893aace4,3,3,3d41d3667def2e83c83128c7f7bef0a1496deef3 712d84cfc4df0416a9684134640dd33f69ea1de3 4afe092da0169a85bb3cc67033d1c12db1796b01,bug,Modification to TID handling and new tests to cover TID and timeout,We found an issue where sometimes receiving packets would fail following a packet timing out. This commit makes the TID handling more consistent - the rx state TID is no longer incremented when a packet is succesfully decoded/fails - previously it would be incremented to the "next expected" TID.    Tests have been added to cover various TID/timeout scenarios.
UAVCAN/libcanard,146,2020-03-27T13:17:34Z,2020-03-27T23:24:59Z,True,2020-03-27T23:24:59Z,ad7b1a5c9c490e8729978bc2695da0b8963ebdc0,1,2,bfe9f383f2eb4d51ee744d45ab59cfa51ba28a90 dc4997866f50d5629158c59f7476726bcc5e2f38,enhancement,Fix 144,@PetervdPerk-NXP can you please review?
UAVCAN/libcanard,147,2020-03-28T03:09:16Z,2020-03-28T03:21:22Z,True,2020-03-28T03:21:22Z,bec890304a2888bc516416e4ebf252f761558b92,2,2,9bd384820af085c2f1a45781418352b5a5154119 48123a0667d1b11606c9b719056b8e12d40a7d05,,Fix some bugs in readme doc ,```  int8_t canardRxSubscribe(CanardInstance* const       ins                            const CanardTransferKind    transfer_kind                            const CanardPortID          port_id                            const size_t                payload_size_max                            const CanardMicrosecond     transfer_id_timeout_usec                            CanardRxSubscription* const out_subscription)  ```      Maybe we need `transfer_id_timeout_usec` this param for this function.
UAVCAN/libcanard,148,2020-06-05T22:02:49Z,2020-06-10T12:29:48Z,True,2020-06-10T12:29:48Z,03b017ace46ee0a926837fa916559bc02160a673,6,2,e16d89510984c265ce1f9683a6d29399c80212c1 c2fcb4f956f7aaa08d67f2c1bebfab70d291da52,enhancement,DSDL make canardDSDLCopyBits public,
UAVCAN/libcanard,150,2020-08-21T08:50:05Z,2020-08-21T09:36:20Z,True,2020-08-21T09:36:20Z,3eb7dd5aae7c7767a4d10b5eb0b02948d11976e7,1,1,5885841bb5e7651f331da7b3838677d41f456b13,,Improve the docs of canardRxAccept ,The part about dropping the frame does not apply to the case "the frame did not complete a transfer"
UAVCAN/libcanard,151,2020-08-30T05:38:49Z,2020-09-30T16:13:59Z,True,2020-09-30T16:13:59Z,bb5cda1733366085b0ff71934acb15cfe7b86ef9,7,28,e29573af51bcca7716440bc7f28ec97b71f0ace5 3b8c82476ea9688bf67e3b092bfe90bf16ea024c 5ac06e0a3cb7e0fb8606461567ba3aa5f74f96fc f34de87caa2b759c2b24847315b0d3ca3f52e472 f22668b85b3f8cad96ee62e05badc26adf8f612e 211929df8cf3569c7c4358f24e08614568d89e25 bf1c1b59f27b48ee569321de50b306e16cb7827f fa423ec9b39cf8203c777322dd348080caf15152 aa9925e8cce44e95daaba3c4b00504792d14e211 154ff08e2cb1bd76e4127d6483ae42a05d2bd729 a9254f0e62f8964ab25a31a846796c2b6318382b c5f3d91d28d8332ac32cde95e1762647c34526fa fb8ff48f87f58ebb5a05fd83ac5d62ea3c2fad5d 06629a250717bbdc05e7cd9a8b9ce9c6fedea904 6840cca9c16255f785ec948eef52e3b70dee8ec0 98ecb7c84872733987c1454f792e1bbb9720a8af 81f6bca001427cfc492bceda289002d091f91c85 f76ef4c046b941d9f00b5bc3d4cf3a8038f5fe55 c588f89a7a0c39d57b1ed8679e8f5a9209dcdc76 96d08de1d4fcf0ca959acc7fa702b91cca81ed9a caff3b3e14f0b2226b4adefe33f0be4e24920dbc 4dad877e896a3c1b2b8797d86457d92d8fc4ea94 2978f8da2fd0a98bfe186b59aad0942ed07a0d11 597d05e03679e6c8d130b76da0c2bc7db8d87c29 7269c4504bed527492adea6f8facb350a9f155b2 772c2cab8550a9196ce7720ce741455b66f9c2e4 a3f0b36a857972776ad272da9df50e4b914f9d90 18f91839089e96c1a4cfc9708408c1c70c7fe928,,relaxing the language support to C99,### Description of PR  This pull request relaxes the requirement of C-compiler to C99.     ### Changes  There are no changes to the logical portion of the code. All changes are either related to suppressing the compile-time compiler verification or to the documentation. However  some notable changes in this PR are:    - Checking of `__STDC_VERSION__` from `201112L` to `199901L`  - Masking calls to `_Static_assert` when building on C99. This has the implication of that static assertions cannot be used when working with C99.    ### Caveats  I was not able to test the library using the `tests/` directory due to my failure to replicate the build system (my attempt was rife with `clang-tidy` errors - of which fixing may take an amount of time exceeding the total time needed for the PR itself). I am hoping for the CI to test this PR for me.
UAVCAN/libcanard,153,2020-09-30T22:24:26Z,2020-09-30T23:19:27Z,True,2020-09-30T23:19:27Z,253794a710410d47102ce4d5f51a8d9e47bf875a,1,1,f4fa55c6a594a9305fb82d1c486910adcf16c168,,Fix hardcoded initial toggle state requirement,This PR allows ASSERTs to be on while using UAVCANv0
UAVCAN/libcanard,152,2020-09-14T23:52:24Z,2020-10-12T21:49:33Z,True,2020-10-12T21:49:32Z,54a004bd59c2a637c7b39e3ea2feac7142f74489,16,24,c9fc32fe1240d093f46515e9b0c07bf6ab197a0b b5c859da9ac01899ed99986d2efe73682a8db914 29772fe4827abf0bf4ad9556046b1129a221662a 3959615e3da700cdd01d54d3523328d2b853aca3 1bcd2a2a8f63f5ef6d75be8c236e75aed4e160d0 428004cf334f232d76468f5a80b8b774ff111cf9 0d4ee50cc205c5f593f108c076d68495a71ff0e6 c9b1629356e88a906baec09b35690cf75e6af5be fe14582921857a03e4c1c788e54fb4910ee4c2ff e8daea2e1cc05aa1a5c2f59c4ebda0c6075f2cfe a97073e7eb9d8b1dbd3687729f72856aad1b8d61 7240cf8e668976ffbb19b6b34d1ef63d1c59be75 58a6aff5c50519c6d6d4d8bc24668e8f6db7b8e5 ca83b06c8389ca1131eef4247bc0996d25926ccb 9a8aabfbf2903a9bf9fb476081e8757afe899b30 affb14dca65917d63b03517f8412133892d42204 3089e708379c9bfd25afd485e0273fc7076f8b87 48d7563db8b0a6c251a17305fbcb91c59028c836 64a6f4c91419ff0b4fd15af8a7eb6b4d6aebbfba e603be3ef8b2f49c55f9d0be9f2cf81a7c0c26c4 51cc60a843740952eb77cd8e4a0903f940c325c7 c563bfa59b7cb75ddbdea1b64890ae34f4218740 dc1f829e4837066aeb6ca9f4c00e13e5ed6aec91 977e313597476e909777938ddc0c158db0c97875,,Libcanard v1 0,- Update CI to Ubuntu 20.04  GCC 10  Clang 10 (also fix a couple of minor nitpicks from the new clang-tidy)  - Implement https://github.com/UAVCAN/specification/issues/94  - Implement https://github.com/UAVCAN/specification/issues/90  - Fix the NaN handling issues discovered by Scott in https://github.com/UAVCAN/nunavut/pull/115  - Bump the version number to **v1.0**. A long way from the first commit https://github.com/UAVCAN/libcanard/commit/6d7d39eae1d399da9bb4f62e292a5e70cbffd75d pushed in 2015.    This PR will not be merged and may incur changes until https://github.com/UAVCAN/specification/pull/97 is approved.    I debated whether it's worth [renaming "subscription" into "listener" to avoid confusion](https://forum.uavcan.org/t/how-to-use-services-correctly-in-libcanard/927/2?u=pavel.kirienko):    > In Libcanard  there is a bit of an implementation-specific terminology mishap: it uses “subscribe” in the sense of “tell the library that the application wants to receive this kind of transfers”; the mishap is because I couldn’t find a better word to use. Maybe I should have used “listen” instead  like canardRxListen? I wonder if we should change it.    In the end  I decided to not change it  keeping the old verbiage. If there is interest  it's not too late to do it now.    FYI @TSC21 @PetervdPerk-NXP @dagar    **EDIT:** it's worth noting that despite the subject-ID range review  this changeset does not render Libcanard v1.0 wire-incompatible with v0.100  excepting fringe cases of low importance. This is because the compatibility implications have been taken into account by https://github.com/UAVCAN/specification/pull/96.
UAVCAN/libcanard,155,2020-10-24T09:16:53Z,2020-10-24T10:31:28Z,True,2020-10-24T10:31:28Z,f994b7037cac67dba0630dc043440d961f68a2d0,1,1,9fcbf835349c04f28ec2564bf035f3cf8d0b3486,enhancement,Docs clarify usage of canardRxSubscribe,Presumably fixes https://github.com/UAVCAN/libcanard/issues/154
UAVCAN/libcanard,157,2020-11-11T18:15:01Z,2020-11-11T21:23:14Z,True,2020-11-11T21:23:14Z,cde670347425023480a1417fcd603b27c8eb06c1,4,3,f309ec04ad0272ae2da57d00365c86c3c1c17010 e36c74f35d7d52ee37456a9939d7e6ed8429e276 c4874bd54617e601e99e1ad4ddbb615d96c8a3b0,enhancement,Mention Nunavut in the docs and port improvements to canardCopyBits from Nunavut,This is a minor changeset. The code changes do not affect the semantics so the minor version is not bumped.
UAVCAN/libcanard,156,2020-11-08T14:22:25Z,2020-11-26T08:15:35Z,False,none,2222e650464c7ed78e8a1850f706119bcebca24f,1,1,63e5d6420867d4873cb7725b042d93fe3854375f,,Create Android bp,Build libcanard for Android Open Source Project
UAVCAN/libcanard,160,2020-12-29T07:10:54Z,2020-12-29T08:13:04Z,True,2020-12-29T08:13:04Z,55938c51cf7da3096679933302693c9dae7a2b33,1,1,1c91c49d26e37478e70adcf359f38aa3df7067e9,enhancement,Improve README fix 159,Fixes #159
UAVCAN/libcanard,165,2021-05-17T17:18:36Z,2021-05-18T17:45:20Z,False,none,a61b450b55b79e12e8e9967f4a380f5d796cd24f,3,6,df9d7803e4a430ffe44691456b6a88f460d29597 5e29ebc01777689744cbd3594e9a0e2d37cf6707 a4ee38d2b0fc216f73d5c54d4cdb8db2d7265e91 f01a81a440506bbd18229e8df3340241b84dbe4f d3c98b95688affa69904ea26dad6c7e40a772a6e a0a34739b9c7f39d5cb734e8073ef1a67ed3e6a3,,CAN3 Peripheral Support,Some STM32 microcontrollers include 3 CAN peripherals. Previously  Libcanard only supported the use of CAN1 and CAN2. This pull request would add support for CAN3 to Libcanard.    Changes:  _internal_bxcan.h: Include memory location of CAN3 config register  canard_stm32.h: Add build config macro for CAN3  canard_stm32.c: Make filter config generic so it will work for either CAN1 or CAN3  
UAVCAN/libcanard,164,2021-05-13T12:01:18Z,2021-05-18T18:21:29Z,True,2021-05-18T18:21:28Z,38796831f9083c0f0674319543d8d10813429eb5,11,11,3806daedeb49db03cb39b8963a0e1db3733ee995 edfcdddcd4f5b06cccf262a3bcf2956bf41a000f c90b135be5f653726c695054348b2c754ac803a3 d1b123ec98eb1634d73b260a3b9ee229bef13c95 683319d61930e354b81caa846ee242c80f91fa58 0608050bc1db51a119d936b7fd5a016817e02afd f872d8b30f639d419601aede7d173f3295f0d717 feecb4e2c74d57023f330ef1758c96d4db64b0ae 3055021d2dec4bfb8e4d14c8233bfd8e305d8510 54c7b098f14a303bd218d97ff98fb91cd9048f68 71dc9f68483605ee7130069921ff6fee62dddea9,enhancement,Add canardRxAccept2 fix 163,- Fix #163  - Update Clang-Tools to v11:    - More consistent autoformatting (hide whitespace changes to declutter the diff)    - New checks in clang-tidy  - Remove redundant declarations before static functions by improving the build flag handling in the test suite  - CI broke due to external factors; this PR fixes it  - Bump minor version number    Backward compatibility not affected    Context https://forum.uavcan.org/t/libcanard-calling-canardrxaccept-handler-in-o-1-time/1257
UAVCAN/libcanard,167,2021-05-20T09:58:06Z,2021-05-20T13:33:24Z,True,2021-05-20T13:33:24Z,a1efa3a1f19baef54764ef7c4cecb7b68db88f99,3,1,c5ef0d5ec3c9d8758a3ff49cbac4c02addd1635a,,Expose CanardRxSubscription,As discussed in https://forum.uavcan.org/t/libcanard-listing-active-canardrxsubscription/1266
UAVCAN/libcanard,173,2021-07-20T21:48:47Z,2021-07-20T21:51:24Z,False,none,daad86d022bb07e63f82b48a0781447dd838b369,2,2,f053047a16d597c1524148adace361055aaffc4e c1725ac3af5534b85960934998d6928a215c931a,,actions add release build,Do not merge yet.
UAVCAN/libcanard,177,2021-08-11T18:01:12Z,2021-08-11T18:02:04Z,True,2021-08-11T18:02:04Z,c9e482eca1aca508506967af8e764a00abc47812,1,1,2e375e6850cdfcb56523a73762c1f77764aeedae,, UAVCAN v0 Update show_data_type_info py,Use the new pyuavcan_v0 package; drop support for Python 2.
UAVCAN/libcanard,179,2021-08-16T01:48:51Z,2021-08-16T08:49:35Z,False,none,ad91427fb180eaabf8e7c3d2c4356b9383b8f893,1,1,98998a733e17af3972e6507ec54865c8ed638f29,,clang tidy make static code check happy ,removed the WarningsAsErrors flag to fix #178 
UAVCAN/libcanard,174,2021-07-21T03:47:35Z,2021-09-13T22:57:58Z,True,2021-09-13T22:57:58Z,d64f82f5e4d25aecabcc31af5eb36d345b202977,3,3,8694a55eb1052824166c7a23d68523266c63a324 be0504897e8395e5ba726db46864a769224a2ef7 1f42f3876479baa5d577d74ee79c7b1bc3bd1b4e,,WIP Migrate to Github Actions,Sonarcloud still needs to be fixed.
UAVCAN/libcanard,180,2021-09-18T06:58:38Z,2021-09-18T07:00:36Z,False,none,ad0037637a49f1cd87526e54902e4a8b85a6200b,2,2,42cd129aa8bb33edb9e355a0c0911e8e711cbd95 d1c4972e8f276306a0c953398022ed36cbafdd31,,Fix issues with actions,Do not merge yet.
UAVCAN/libcanard,181,2021-09-18T07:04:19Z,2021-09-18T19:32:13Z,True,2021-09-18T19:32:13Z,2d449453fc8c4060f276c6dc585d4e1e5bf4fd52,1,5,8694a55eb1052824166c7a23d68523266c63a324 be0504897e8395e5ba726db46864a769224a2ef7 1f42f3876479baa5d577d74ee79c7b1bc3bd1b4e 0227ef06d68a1efc17d2056afbbc09af75fd7beb 854bfd7e8b01f167e5800e06969ecae0a4b0b929,,Fix sonarcloud issues,none
UAVCAN/libcanard,186,2021-12-02T18:39:20Z,2021-12-04T18:06:22Z,True,2021-12-04T18:06:22Z,62dba01454982cb2462cf897915c17270c294c10,4,3,3ea1f26a8a333e1fe83f8bfedee34fdc0d83d7ef f676200a190175d1d8f90166d632a7f201a2fd40 2dabcb7508c1cd994502ab9179ef635a5b32592d,,crc table,Closes #185 
UAVCAN/libcanard,187,2021-12-04T04:26:24Z,2021-12-04T18:17:18Z,True,2021-12-04T18:17:18Z,e858d793acb2e1074ed363958fa0f16aa7038a72,3,2,d3a75463c21e654d5f05c076dfc9bebcc0bfad21 b1da2c84421fc38d75269489d1c5beee9e633211,,Add docker utility,Courtesy of github.com/mavlink/MAVSDK :) Allows you to run ./tools/run-docker.sh your build toolchain command here.    Closes #143 
UAVCAN/libcanard,171,2021-07-19T23:32:58Z,2021-12-04T18:25:45Z,True,2021-12-04T18:25:45Z,13cb7b1d78ebc4c525504e9a36aac1d6c75d1730,5,3,5b2f612184cea7fdd6d9cd767f75ad52ba5a1884 66633b4afe3df1fd81e8a4cb1bfc9ba6bf16e174 d8917f70b48a46949e3440c8a916dfc0e863d35b,,add acceptance filter configuration helper,Briefly tested all 3 functions on a test project with yakut. Appears to work  and it's super simple.    @pavel-kirienko Does it make more sense from an API perspective to use the CanardInstance itself as an argument for the service generator and pull the local node id from that?    Closes #169 
UAVCAN/libcanard,182,2021-10-13T12:44:55Z,2021-12-04T20:56:17Z,True,2021-12-04T20:56:16Z,cf0a8bc67ddf98dfccf157695533ac5324e021eb,30,47,2091ce722aea905b17cc5f4e545b1134cf2e39b9 82e9474e107a6772ecbf95e4182237e8a0459b54 4474a153195345b72c00023229f8d8af316be72c 659fc5f5e28eb8cf27229e98445a94befa75f5c2 032c5bbd2e10dd3107963f5bee01620e4c2175ca c330358ed32f01dba6464c3a972878782be30331 294d473fcbcca23dc39c5606c821ef07fc851e35 048da8e3f3c6c50e27c8c966e27d7c18e9b1d971 da257b06c3aac74b73e1f03a7d5e122d40afc004 02cdfc6f6b194a16dfbb6118ed1f1f2eea9dce2f c2a9dac6e6a99d0613684b78a75dd86a1a855d41 95bd67d543b956db5d2fa8aa829ec587b2aab83d c50333c72f7a044b8835f5b009c576c8fef169da 63e0da18ccd5b137785950b80613fee36879bf54 1beea6538fc1a14cce1699f27e98b026d672a565 40389d56dc02130858c9325a7513de5c4cd9f3f3 4160d3a9fdbddac7db402b88d3e1ef28047f3bbb 2bd0fcb3327b2348a4740b96b9385fe37e7122ea 1138b2e48f41612b6912e78b1641ee76a952818f f0cc4ba69462a5ea7c8c69db31cddc2a81b25d52 6fe97730067a917a9821f778a62ce4bbbb4d9e7b f58afa976e2af3940eee0f473f383b267f769d35 b2a2be2f545c00353499f98edf4c93bd1c90a828 1e18d43a4d12a5a5cd8a92f48c9570dc2d934bda 9b42e297607b1092237808be8f7752d41b6f7ef0 5472937355d58cb67800f7c3b2efa82ca7e125ec 470feb157e0e074ebec52e4feb4217b94d48f767 e4aa0d9c5343430bd5df520c408f206ea4b34432 02521589a0e5f1956e187a634307dd0c4ae63ad0 857e2d355cbf9d52e5d3495911ee00df9f89a5a6 49bb4e6f3d081ffcec93a77cea462628aba76ce2 489721ba5b295ac34dede18a63036eca92005bae ae6289f6040351f53bc241dbb8943ac1bcafd52e 3b3936e253a123df93dd98cc31c11ad2a6b93fc3 6700ea7e89b8dfe63c6bc5f22afe090df60b20b0 16b9057f94ca8ba1e7a561a050c85f3beeced8d9 1f34bf7bf821b83794f2c8107c48234b62a60684 672e5451222a77b3f2d8b3ff69c9913eeb5f35cc 5bf4c3c1add760a4fa7eb6d9a280dc9a20fa8c00 b86f0b9158f783de19a1c37d75967ae4777c17a6 62dba01454982cb2462cf897915c17270c294c10 e858d793acb2e1074ed363958fa0f16aa7038a72 13cb7b1d78ebc4c525504e9a36aac1d6c75d1730 2e7676e21c23c9c9eca461007272bc2eaa7703ea 517d6d8b5a1685de06e5b8fe2c396a29e061e466 3e13ac230db6b053f7eef9f5448ab799133b3a9c 135a9be55d3df1d9948f2429aaf4fc00de5e712d,,Libcanard v2 0,- Closes #168   - Fixes #175   - Closes #176 -- while the demos that are shown in the README still don't use Nunavut  they are explicit about it.  - Closes #178 by removing the offending code (use Nunavut instead)    See the changelog in the README for a brief overview of the changes. The most interesting changes are two:    - Split API into smaller entities to improve its orthogonality and fix the problem of const correctness reported by Scott.  - Replace all linked lists with AVL trees to reduce the asymptotic complexity of both RX and TX pipelines from linear to logarithmic.    @coderkalyan do you want to include #171 into this release or should we wait for v2.1?
