Project,PNumber,CreatedAt,ClosedAt,isMerged,MergedAt,MergedCommit,nFiles,nCommits,Commits,Labels,Title,Body
UAVCAN/libcanard,10,2016-01-19T16:44:32Z,2016-01-19T17:03:20Z,True,2016-01-19T17:03:20Z,04aa78f0c54e7cf4715bb40097410a9dafe92a0e,1,1,f766217fbd69c8b9566704f8e0fb59c4dde43677,,Fix clang build Switch to container based build infrastructure,This PR is a work in progress. I will merge it myself when the Travis build passes.
UAVCAN/libcanard,3,2015-12-21T18:08:15Z,2016-02-08T22:18:39Z,True,2016-02-08T22:18:38Z,87a32e5caae239848c98e6c4531ce8feea595b67,6,58,2098c60a7556296976440457b5d6d62e6489d368 90e98c0bcbc5b0ba1f246b1a4cae7d04d9226f03 ed7a1d75902f9f9d06f7d8bd7005261e9d0c8316 0a2c0ac5cd65bb4532825d80e0a5148c12f8d637 6091d174e67e59a39ddd99024f514cf389c6b956 afcd1102265c01a86151ff741f9809ee87d113df e1b5169fc41b21588972d0ae7fe446462bdca360 076e0eaa0339c53566762f2b2f043a930b029645 c6ee1dfb01b83fb64450cbc5f6fc29ea48da1561 8470b143d0effd110df469691c9689ae94066a69 4b9ca64684bf08ce4236ca2a5012fcaca053e0b9 c57df3dc00e63548220833e877976a9047332720 e3452442f31f290ce12b0ea5926162194be3b5ee 0844f5b147bfaf23180b4adad5a099e53e029fde 14898d9d45ab41fd5bb0f8ddef9f82413cc20e49 e288578c4bfd4520008d7f560b9411861afc219c 8951b98b32ed12fb096aadf9d093b897548b6766 eec4efffd2ec3e7321a18b8be48d0b49e979c43d d708b34b7a4f3b864898eddc9d443f1f4d753385 db6a367e101f5222e10810679cc03c42afbf2b01 4ceadfaf949e54afa2b5135d214013869ea6193b 645d5c8348471f8dbe5e24bd7a6bd1968ca58977 6e7012b9979696243d4eca2a397d3addf78cd9fa 4d5aad2c66e35658482210f8236493e9291679f9 7cd5eb092694abc6a0539932770180335d82f205 6265e9b8733914120b830e6d5a5a5c5ffb846163 4dda3d27555d6a14eb7cfb2493d021551847e3de 7dba83fbfc66a0f00f25b9433da003c4ebd49610 08a164a40abe1c5f62bb4774d215f9f8a617d5bb bdc3bc388387a07b0fbae6b7b67a972e0ac4afad a45b7f62dcafe59115f06edc44d27c2951171ce4 ffb77d908ba30c1d81eb93ff100f271a72bcb636 b796124118f7b4fa0e43be995205926ca49c3ad1 a1f84d00e959d68e337fe452f4c03091d613c82a d5843b1d19d532d33597becbd7e44cc7aa3c165e 48e5398c61ba522394da63f3ec39810067155cca 4deee93a03655d372d74486d737adf6a7d1e1724 f53b2d26540160046cd2d2877653df79a5af8d01 b1e55e6e883c5481938a7f6fbf2aaba2cd78d78d 056e9a5176ed8eb5f1c1b06673dfe5f831fbd821 87fe8ea7509ba19e11614dd5d88d531407ac6cc2 cf324b97b1fd3bbc8e8bf639896f959d5428be91 211e8148394662dc3e7eada71c3021f5b11523de 7a4f3205b45e7856f674511e2d436554c76b6a8d a4b7172bd67a9c85b15d488f0a95407a8f18fb0f aef7d51aec4dbf781bea2d32484b1d9c1e40172c 605960c0e4d9272a5be6b89081892900324f5386 5e0fa6fe80d757a5eae377ac1232ee7ca9d1e86f 6aab3b66fc8780c4fbd29727b5e983625553aa80 89514fcd39f1cf344a164e925a2475896f0905a3 167b54a8a588c63eb788fd294671230b0daa137b 9c595b48e8c9ec31cbdef328056edc4686dfd712 fae086eed9e8a6543c0c13f80ee7ecffcd11ce39 aa112be54f834a4cf48097be51a9a76c1aa614f8 bc8c5833b1401a5898e52d31bd91d3e7e43c2866 519a259764751e7810e43dbe21086fba602c5479 28755c2bf71347f9d5f52eef21aabee7d5c65d0a 8a7a6d1cea4adfc5e30a45a2e8e3bfc1d1343b4d,,Implement Libcanard Library,Included is my current working version of libcanard. canardReadRxTransferPayload is the only missing function right now. Recent updates to the design document have also not been implemented (ftp://pkir.net/libcanard.diff). canard_test.c  based on simple_sensor_node is what I've been using to test the library. It sends 3 data types on the can interface. There's also a function  random_drop(x)  called on the bottom of the send thread that will randomly drop a frame. Set that to the probability you want frames dropped  0 if you dont want anything dropped. Right now canard_test just prints out the data received from the library.  To do: implement crc checking ignore incomplete transfers (probably has to do with the above)  ask any questions!
UAVCAN/libcanard,25,2016-06-17T13:42:12Z,2016-06-22T07:50:23Z,True,2016-06-22T07:50:23Z,a7a6d4c6b105976cccac36e05c42abee566b70c4,11,13,c44af8aae7115819e0bf14ff503c2baf6a93253d c5399175f7cc63bbe29836933337ec840bff190d a194120d86d6fda005f955d842d43341ce786db6 dc3761854437bdec66c225debba64e651d7e060a e50844f37ae64a0efbc74f2f5fd7a339c2d4fedc ec48a351249ab3467f6fb13f173939a2013136e7 bffe888d4a8b3c87f837ebb054da721035c9068a 68940e2ba73a99483f4da2b53de386eebb9480f7 ecaf0e910bfd0008137ccd45c719f5a4bafed595 5c711bbeee460064a56732a8ae8c104dc38bf671 9326fbe072e528b05ff110ff77bee6de8613f613 307d762bef7650dc579e725a365f3e6fcabfb6ba d5c3ad0b116b6a18a398105c9dbc2586c0260186,,Drivers,
UAVCAN/libcanard,11,2016-01-21T16:29:36Z,2016-06-26T20:11:13Z,False,none,b87402ecc0c14048e77d9da12c76cdbb69e75518,2,2,cceb891302bb08fe9c295766c3cdd460c3719937 8d3d7e70cc08bead0d53e71d673b0de88dc45a68,,Build in 32bit mode,By design libcanard only runs on 32 bit platforms. This PR tells the compiler to build in 32 bit mode.
UAVCAN/libcanard,26,2016-06-26T20:12:13Z,2016-06-27T00:13:17Z,True,2016-06-27T00:13:17Z,ddc864f9e98897f920763a8b75dde1e2dd6cab75,3,9,cceb891302bb08fe9c295766c3cdd460c3719937 8d3d7e70cc08bead0d53e71d673b0de88dc45a68 b4cb7278b8479adad3855b9fbebf60039e88314b dca8a05eb5b742121ec8542f1ab341e2cce33b35 e281450b6886f1d399313370d05d7dbbe72b9972 749cb3583cfa475ec422bcc65efc34d5c15106c5 9601622a492f762e521d6ac8b94d0546958524da 825e9d4f6d8ba6e126e9b6de0b7a4f0047f905cc f7252dee4f4fc1a6405c25e987e675d387e74a71,,32bit build,Replacement for #11
UAVCAN/libcanard,48,2018-05-20T20:24:54Z,2018-05-21T09:31:32Z,True,2018-05-21T09:31:32Z,63b2bba32bac8471840190c15e1a9fb1d4d9ce94,15,10,80386734ea6ce6d44d29fd2861bd7e278ad67e1d a2111383f1b08d0eae55f0de4f4e2a0f87b801b0 5e8a42bed3b62163039105c3793a8fc23f0c0fab cc46b0106c4bd94ad3915fcdd90477823f62415d 786a8d4cc0debbedaeb5789d8b587fce0f4c14e3 274544497318960524b25fb01278c57c39b8f3a0 355188dfa5760c5a27dc9dc7bab70aeb0006bf3e 547cb267bc4c44fd9ca13a5d580f0e22bb949f09 2a35fc4e4bf2748ecc3e8db3b9feeda234770307 162010f1eefdc468547ee5f130cf67310bbbe6d8,enhancement,Code robustness improvements,* Fixed several dozen complaints from clang-tidy (somebody should configure it to run via CI).  * Added a couple more static asserts and fixed an issue with the static assertion macro.  *  Enabled all sensible warnings available in GCC 7 / Clang 5 with `-Werror`.  * Removed GTest  which I came to dislike for clumsiness  in favor of Catch2.  * Prettified the Travis CI script; implemented a Clang 5 and GCC 7 builds.    This changeset does not affect the API or the logic of the library.
UAVCAN/libcanard,99,2019-03-26T09:37:09Z,2019-03-28T18:41:00Z,True,2019-03-28T18:41:00Z,43c53854e70e7adc758f6a4131112c71029cf57a,6,3,0d3d002e52cd9462b6090e0da27da90b8af3d3a5 f780ae07dd7334037c195e331a19df0261b2c4ca 55b73451c79a2193b608e19e95926f209ef7f5e9,,Start of updating CAN ID header format to match v1 0,This is a start of updating the ID header to match the new format for v1.0. Note: It could be that I have missed some parts which also must be updated related to the new header format  or that I have made some mistakes. Therefore  I would appreciate that you check my changes thoroughly.     These changes were originally included in #96  but we chose to split it out to a separate PR.
UAVCAN/libcanard,139,2020-01-17T11:34:52Z,2020-01-17T11:49:23Z,True,2020-01-17T11:49:23Z,868ac790291324602c744774b787eb4850d14d0f,48,10,56e9c95b46398ad303bd49cd0e9c7712696966bc 7e78fa7d4fae8d9226bcaf11c03affae4b8c78e9 0487bc24e0cf20ce3caadb9a606d5bc54b13e625 e016bbc512765c1aaae87f0ebfe1c92a18ca4d3e 805c7c9cfd5daf62a17cf9ac368a0e5bfc8fc9e8 2b2ff6e232c2a21ce42613310edf89e6b037d54c 23cd7814ca31a3a149863a85446a8f8db2a9a8ee 58f03ca27cf5c777a2ef44a678a5594c32ce40d9 7e1065d9c9df2aad0f609cf8a181f4e30c1927c9 9880a53bede5c308f63189f79f77fc9bc5003224,enhancement,Tooling up,There are no significant logical changes in this PR. I am merely preparing the somewhat abandoned branch `uavcan-v1` to the updates that will follow. This PR brings the following:    - Static analysis using clang-tidy; no CI integration yet because it requires fixing <sub>*(no  GitHub  this PR does not fix it  teach your robots to read properly)*</sub> #117 first. Closes #125.  - Autoformatting with CI integration (fail the build if the sources are misformatted). Clang-format is somewhat underwhelming here but it's not too bad. Closes #124.  - Remove demo app and drivers. The drivers will be added later in separate repos just like it's done in Libuavcan. The demo  seeing as it's based on SocketCAN  will be re-added in the SocketCAN driver repo. Closes #107 (well  it doesn't really *close* it  but it makes it irrelevant).    The diffs are huge and meaningless.
UAVCAN/libcanard,140,2020-01-17T15:14:49Z,2020-01-17T15:15:17Z,True,2020-01-17T15:15:17Z,38379db46c574278e675f16b574d130fd2d228a8,9,1,2aae88654a76e1ceefec7e0e2d68aafb91091b99,enhancement,SonarQube integration,Close #125
UAVCAN/libcanard,142,2020-03-03T01:28:27Z,2020-03-08T03:14:34Z,True,2020-03-08T03:14:34Z,a2f3364d927c1dad5701cb2681ae791af97771be,36,100,502e51240e647cde8d9e0856d4d37720c36b3cb7 22400faf39d1ada5aa0c026e6f941d7d9d968ce5 165ef2de80e4f1a16d090da10f44d5b9e708beba 5cf5b1bf90fa221be518fd19fed1b4e85fea6e35 3c7188c1d7995c9cabc972ed721949ce1533500c ab480af5375f9c514d5be98e2700ef19d683a4b4 501955d4c41fe25bd50ce318b08ab80efbb35866 4cfa339e40d2b78c35502e9d45e357b2774f6ebd bcca48493514bc87e4795a2db5db113c5d275e29 0989c310d55c7b4c2a5c4e14f49b96d6c3897785 aa64c18bf53a0d7e5bbd422599f6acd6a02ecf4e 716b5b20468b1db16dcdd3e8d6491e379ab2ff2e 93ad49f706dd9d51acf64cd8fc06fabf93c2014c ff822fd7978f6f5cdee63f214afb5ffdd59428a6 8410701681630b2c49683fbd42a641f47ae5167f 70e5322fbfcb8977e3aa987be7d3671610d7cdb5 5274db50faa7851df645d635324e2efb4a685bce f4d9a44977b7f797c050120fa2934e124778d004 c7ed98382105c2de49dd74c88f226ac4321a871b f75eff2a837d769e981fd8b90f6348ce0a15437d 534f31799db634457592ea09c1bf9596155caec8 91d85899e05ee1c22e1b71931ed886a1bbaa800e 45f8b404633bb16a7b1a85e64e8896ba46ae9a0f a6679b6591ee70d4a0e00a58333b2ca88eac14fa aedd4f81338f9f5171b058b5dc544468c5ef727d a4aac16eee6fdb4185dbea302ef0d836a222bb4f 70e84114cb457efc0280142c14a2382a78412834 65aab43d3866bdec009ead80d427234c0a5ed9ba 5a3d960e0cf34d1bb0b0c4e386284fba8e8eb4c3 25f210a0e94e16191cb25b2f6c7d8bf899f291d4 8b7551fd826538573c6ecf8758bf564c081bbe74 fd3044855aa747b87696599eee299db25ca9aa87 ec884d2150501027eca569cde604580eea49ec04 eaf9537220e0cd3c05ae327420cc8f23dc6fc853 fd4a225f07ecc29244a05c2a112c36927594da7b 9e109f8da2e533241638baf91575252fd053448d a987ced05674336ff36f97aac25893c0631b7a2f f83025c9b2bb6bf7b55d6c2311f331a5fef4d5f2 951902b5baaf936857d17ceec48825a594d5db0a 24ab7ecebd2ff9614dd95eef7b10ab9f39236953 468965fbf7644317288bc72a338cd473db2886f1 a61b50572b54084b6253eaffac756bf8d237d55e 23a47eb17ff73ac87b97597833d0a7c582245fc3 0bc8cf41d710dc5dc685f21a2a3295510d1620d3 249594da9fc519ade85f4274b83661140cf5135a 4ed9f7735f83384bebc0473b04364edcb8d85046 ec68f80fb4078c8d22c34d4fd956ca7bd8e9394f 573da6ee7646277a83b27b59e052bc9c685159f9 80875648a4b97fd6e4f9b01eab076abf08266319 568ac1fc46d97527c78885dd9b3620adf52a8c14 a6d38c662124d9f074727ef940ee47cf0e728368 0e5e959aef71b3de327aeb9c23555ee4671731b2 46529d63a96847db074eb57e0f9af20d09887e4b 36edc2d0e8eca0f9f3d7335d7859e4389b21630e 41d2f80dcb68d846fa76ad29b9358a2e3706c0a4 5e9f7424f96987f57036e4f0ee155f043f99362d 97484cc5fa49b5416912cac1d04b255a3d7f94c1 58a4dfd616d229fcf734076e169b5831c3a70697 64e60ceaf56e724b6d26ad475a20eaecedebc540 efaa25b94604bfe3ca373a8f0687e0f660249c83 894f3a12a772379f2bae62afd2b28c067dc51c96 c579ae231e9e365569642f4229d8fff98cff6833 82844f0717266254c03983a91e2d9d09718820df e9019d086d00e3bfb673f9a807b83754127edb38 5e1bca92d2197cdf85c021aad8de4c9ce6294192 9ca9be2e7a3f5b3ed953b9fc52216effa63ea99c 389cf17d3fd0e60164646f9ba7563ebf2f1a24ba 5c8bdef36d6809b267faac332237884ba00c0f1d 54637ea4f5d5758b0a9006f52e5e605947816724 6aa8de0fda57e34780f1e7c4ea5538981142f7f6 357d4d1ee07f45a8811cf6f0a3280dd553d61123 123ff12e463ab1f943a261effd24adc30c8f2cb9 b9497e7db6b31be99086c122fec9cb36b92c992b 130862ce99c13c858f1922bf7237e8e01e7bc300 57c328ba34f2b95e1ef6cc377bf6ba69b456e7dc 162a5a0e5e9ec7b98a3ac8b92d1fba660032292e 0d665917faf6f0b1bfa90a861dfad68ded5e13a6 e1caf06772035dd3e776f1ae8ea00519797fbda0 966d10eef89b60cb48409865ed2a36c08669c3c1 afc0b2e850f77f10e366cf5119b05c36d7785e01 347d0f80cb8c50b7c7fde079f3a06556eceb8ae5 6b4e9a5920b92d2cc7cb023867ebbbe62ab49ff0 34f8484a968c280fc9f21b6521f43a769bd422e6 9efc9dd79a44bf14d8008f903db321b0b3342152 c9e464ea11b1b22403a419789bb981ba5bbec480 4199f620a9259ff343625a2c56262897242ed79f 1361489e407bb90c1dda6779d53ccf3627a7e7f7 988bba27658ed2d4ee8211cde82e8091b6536679 183013bae210e32b1eff79ad519c6a699ecebf89 1ac67c44aabe181cbd5a810feb153e3e8ae33f35 7b5fcc3f5c8dee81a8b546848a92bdf6386b9117 42664f4eda6dd5dc83097f614ce0ac003acac3c5 d0da584c9502419742b4d5a6aedb45d30c757ff8 691f2cad86b3235c3fb17a7bfc514a28d62f2583 9a2052f16ba5254ebec7752db46ba56112df3d52 b5f1b7781c9a4aeea12f088944b42e881395c6ff 13d0f90ee275a7a97f60697fccb964d4ba63b32c 09b4370a58f4b8b7e2418d0e57f11c0ce4d24497 f80aa3c320aec049c3e0931912143aeac997df8e b16a86b5a638d6ad3f9cbdf60bff194a9985dc9e,,UAVCAN v1 0 done,The library has been somewhat reworked. Don't look at the diff  it is too large -- this change is impossible to do incrementally in a sensible way.    The new implementation offers hard time complexity guarantees as discussed in https://github.com/UAVCAN/libuavcan/issues/185. The new implementation supports both Classic CAN and CAN FD without the need for compile-time configuration selection (https://github.com/UAVCAN/libcanard/pull/103). The new implementation offers a much simplified API that operates on contiguous memory buffers instead of small fixed-size blocks (https://forum.uavcan.org/t/canardrxtransfer-payload-reading/600).    After this PR is merged  I am going to do the branch swap: `master` will be v1.0  and the current master will become `legacy-v0`.    Fixes https://github.com/UAVCAN/libcanard/issues/131  Fixes https://github.com/UAVCAN/libcanard/issues/129 (this case is covered by tests)  Fixes https://github.com/UAVCAN/libcanard/issues/126  Fixes https://github.com/UAVCAN/libcanard/issues/125  Fixes https://github.com/UAVCAN/libcanard/issues/117 (completely new memory management)  Fixes https://github.com/UAVCAN/libcanard/issues/105  Fixes https://github.com/UAVCAN/libcanard/issues/104 (there is no DESIGN.md  the description has been moved into the header file)  Fixes https://github.com/UAVCAN/libcanard/issues/102 (100% test coverage)  Fixes https://github.com/UAVCAN/libcanard/issues/69 (https://forum.uavcan.org/t/platform-specific-components/768)  Closes https://github.com/UAVCAN/libcanard/pull/132
UAVCAN/libcanard,151,2020-08-30T05:38:49Z,2020-09-30T16:13:59Z,True,2020-09-30T16:13:59Z,bb5cda1733366085b0ff71934acb15cfe7b86ef9,7,28,e29573af51bcca7716440bc7f28ec97b71f0ace5 3b8c82476ea9688bf67e3b092bfe90bf16ea024c 5ac06e0a3cb7e0fb8606461567ba3aa5f74f96fc f34de87caa2b759c2b24847315b0d3ca3f52e472 f22668b85b3f8cad96ee62e05badc26adf8f612e 211929df8cf3569c7c4358f24e08614568d89e25 bf1c1b59f27b48ee569321de50b306e16cb7827f fa423ec9b39cf8203c777322dd348080caf15152 aa9925e8cce44e95daaba3c4b00504792d14e211 154ff08e2cb1bd76e4127d6483ae42a05d2bd729 a9254f0e62f8964ab25a31a846796c2b6318382b c5f3d91d28d8332ac32cde95e1762647c34526fa fb8ff48f87f58ebb5a05fd83ac5d62ea3c2fad5d 06629a250717bbdc05e7cd9a8b9ce9c6fedea904 6840cca9c16255f785ec948eef52e3b70dee8ec0 98ecb7c84872733987c1454f792e1bbb9720a8af 81f6bca001427cfc492bceda289002d091f91c85 f76ef4c046b941d9f00b5bc3d4cf3a8038f5fe55 c588f89a7a0c39d57b1ed8679e8f5a9209dcdc76 96d08de1d4fcf0ca959acc7fa702b91cca81ed9a caff3b3e14f0b2226b4adefe33f0be4e24920dbc 4dad877e896a3c1b2b8797d86457d92d8fc4ea94 2978f8da2fd0a98bfe186b59aad0942ed07a0d11 597d05e03679e6c8d130b76da0c2bc7db8d87c29 7269c4504bed527492adea6f8facb350a9f155b2 772c2cab8550a9196ce7720ce741455b66f9c2e4 a3f0b36a857972776ad272da9df50e4b914f9d90 18f91839089e96c1a4cfc9708408c1c70c7fe928,,relaxing the language support to C99,### Description of PR  This pull request relaxes the requirement of C-compiler to C99.     ### Changes  There are no changes to the logical portion of the code. All changes are either related to suppressing the compile-time compiler verification or to the documentation. However  some notable changes in this PR are:    - Checking of `__STDC_VERSION__` from `201112L` to `199901L`  - Masking calls to `_Static_assert` when building on C99. This has the implication of that static assertions cannot be used when working with C99.    ### Caveats  I was not able to test the library using the `tests/` directory due to my failure to replicate the build system (my attempt was rife with `clang-tidy` errors - of which fixing may take an amount of time exceeding the total time needed for the PR itself). I am hoping for the CI to test this PR for me.
UAVCAN/libcanard,152,2020-09-14T23:52:24Z,2020-10-12T21:49:33Z,True,2020-10-12T21:49:32Z,54a004bd59c2a637c7b39e3ea2feac7142f74489,16,24,c9fc32fe1240d093f46515e9b0c07bf6ab197a0b b5c859da9ac01899ed99986d2efe73682a8db914 29772fe4827abf0bf4ad9556046b1129a221662a 3959615e3da700cdd01d54d3523328d2b853aca3 1bcd2a2a8f63f5ef6d75be8c236e75aed4e160d0 428004cf334f232d76468f5a80b8b774ff111cf9 0d4ee50cc205c5f593f108c076d68495a71ff0e6 c9b1629356e88a906baec09b35690cf75e6af5be fe14582921857a03e4c1c788e54fb4910ee4c2ff e8daea2e1cc05aa1a5c2f59c4ebda0c6075f2cfe a97073e7eb9d8b1dbd3687729f72856aad1b8d61 7240cf8e668976ffbb19b6b34d1ef63d1c59be75 58a6aff5c50519c6d6d4d8bc24668e8f6db7b8e5 ca83b06c8389ca1131eef4247bc0996d25926ccb 9a8aabfbf2903a9bf9fb476081e8757afe899b30 affb14dca65917d63b03517f8412133892d42204 3089e708379c9bfd25afd485e0273fc7076f8b87 48d7563db8b0a6c251a17305fbcb91c59028c836 64a6f4c91419ff0b4fd15af8a7eb6b4d6aebbfba e603be3ef8b2f49c55f9d0be9f2cf81a7c0c26c4 51cc60a843740952eb77cd8e4a0903f940c325c7 c563bfa59b7cb75ddbdea1b64890ae34f4218740 dc1f829e4837066aeb6ca9f4c00e13e5ed6aec91 977e313597476e909777938ddc0c158db0c97875,,Libcanard v1 0,- Update CI to Ubuntu 20.04  GCC 10  Clang 10 (also fix a couple of minor nitpicks from the new clang-tidy)  - Implement https://github.com/UAVCAN/specification/issues/94  - Implement https://github.com/UAVCAN/specification/issues/90  - Fix the NaN handling issues discovered by Scott in https://github.com/UAVCAN/nunavut/pull/115  - Bump the version number to **v1.0**. A long way from the first commit https://github.com/UAVCAN/libcanard/commit/6d7d39eae1d399da9bb4f62e292a5e70cbffd75d pushed in 2015.    This PR will not be merged and may incur changes until https://github.com/UAVCAN/specification/pull/97 is approved.    I debated whether it's worth [renaming "subscription" into "listener" to avoid confusion](https://forum.uavcan.org/t/how-to-use-services-correctly-in-libcanard/927/2?u=pavel.kirienko):    > In Libcanard  there is a bit of an implementation-specific terminology mishap: it uses “subscribe” in the sense of “tell the library that the application wants to receive this kind of transfers”; the mishap is because I couldn’t find a better word to use. Maybe I should have used “listen” instead  like canardRxListen? I wonder if we should change it.    In the end  I decided to not change it  keeping the old verbiage. If there is interest  it's not too late to do it now.    FYI @TSC21 @PetervdPerk-NXP @dagar    **EDIT:** it's worth noting that despite the subject-ID range review  this changeset does not render Libcanard v1.0 wire-incompatible with v0.100  excepting fringe cases of low importance. This is because the compatibility implications have been taken into account by https://github.com/UAVCAN/specification/pull/96.
UAVCAN/libcanard,164,2021-05-13T12:01:18Z,2021-05-18T18:21:29Z,True,2021-05-18T18:21:28Z,38796831f9083c0f0674319543d8d10813429eb5,11,11,3806daedeb49db03cb39b8963a0e1db3733ee995 edfcdddcd4f5b06cccf262a3bcf2956bf41a000f c90b135be5f653726c695054348b2c754ac803a3 d1b123ec98eb1634d73b260a3b9ee229bef13c95 683319d61930e354b81caa846ee242c80f91fa58 0608050bc1db51a119d936b7fd5a016817e02afd f872d8b30f639d419601aede7d173f3295f0d717 feecb4e2c74d57023f330ef1758c96d4db64b0ae 3055021d2dec4bfb8e4d14c8233bfd8e305d8510 54c7b098f14a303bd218d97ff98fb91cd9048f68 71dc9f68483605ee7130069921ff6fee62dddea9,enhancement,Add canardRxAccept2 fix 163,- Fix #163  - Update Clang-Tools to v11:    - More consistent autoformatting (hide whitespace changes to declutter the diff)    - New checks in clang-tidy  - Remove redundant declarations before static functions by improving the build flag handling in the test suite  - CI broke due to external factors; this PR fixes it  - Bump minor version number    Backward compatibility not affected    Context https://forum.uavcan.org/t/libcanard-calling-canardrxaccept-handler-in-o-1-time/1257
UAVCAN/libcanard,173,2021-07-20T21:48:47Z,2021-07-20T21:51:24Z,False,none,daad86d022bb07e63f82b48a0781447dd838b369,2,2,f053047a16d597c1524148adace361055aaffc4e c1725ac3af5534b85960934998d6928a215c931a,,actions add release build,Do not merge yet.
UAVCAN/libcanard,174,2021-07-21T03:47:35Z,2021-09-13T22:57:58Z,True,2021-09-13T22:57:58Z,d64f82f5e4d25aecabcc31af5eb36d345b202977,3,3,8694a55eb1052824166c7a23d68523266c63a324 be0504897e8395e5ba726db46864a769224a2ef7 1f42f3876479baa5d577d74ee79c7b1bc3bd1b4e,,WIP Migrate to Github Actions,Sonarcloud still needs to be fixed.
UAVCAN/libcanard,180,2021-09-18T06:58:38Z,2021-09-18T07:00:36Z,False,none,ad0037637a49f1cd87526e54902e4a8b85a6200b,2,2,42cd129aa8bb33edb9e355a0c0911e8e711cbd95 d1c4972e8f276306a0c953398022ed36cbafdd31,,Fix issues with actions,Do not merge yet.
UAVCAN/libcanard,186,2021-12-02T18:39:20Z,2021-12-04T18:06:22Z,True,2021-12-04T18:06:22Z,62dba01454982cb2462cf897915c17270c294c10,4,3,3ea1f26a8a333e1fe83f8bfedee34fdc0d83d7ef f676200a190175d1d8f90166d632a7f201a2fd40 2dabcb7508c1cd994502ab9179ef635a5b32592d,,crc table,Closes #185
UAVCAN/libcanard,187,2021-12-04T04:26:24Z,2021-12-04T18:17:18Z,True,2021-12-04T18:17:18Z,e858d793acb2e1074ed363958fa0f16aa7038a72,3,2,d3a75463c21e654d5f05c076dfc9bebcc0bfad21 b1da2c84421fc38d75269489d1c5beee9e633211,,Add docker utility,Courtesy of github.com/mavlink/MAVSDK :) Allows you to run ./tools/run-docker.sh your build toolchain command here.    Closes #143
UAVCAN/libcanard,182,2021-10-13T12:44:55Z,2021-12-04T20:56:17Z,True,2021-12-04T20:56:16Z,cf0a8bc67ddf98dfccf157695533ac5324e021eb,30,47,2091ce722aea905b17cc5f4e545b1134cf2e39b9 82e9474e107a6772ecbf95e4182237e8a0459b54 4474a153195345b72c00023229f8d8af316be72c 659fc5f5e28eb8cf27229e98445a94befa75f5c2 032c5bbd2e10dd3107963f5bee01620e4c2175ca c330358ed32f01dba6464c3a972878782be30331 294d473fcbcca23dc39c5606c821ef07fc851e35 048da8e3f3c6c50e27c8c966e27d7c18e9b1d971 da257b06c3aac74b73e1f03a7d5e122d40afc004 02cdfc6f6b194a16dfbb6118ed1f1f2eea9dce2f c2a9dac6e6a99d0613684b78a75dd86a1a855d41 95bd67d543b956db5d2fa8aa829ec587b2aab83d c50333c72f7a044b8835f5b009c576c8fef169da 63e0da18ccd5b137785950b80613fee36879bf54 1beea6538fc1a14cce1699f27e98b026d672a565 40389d56dc02130858c9325a7513de5c4cd9f3f3 4160d3a9fdbddac7db402b88d3e1ef28047f3bbb 2bd0fcb3327b2348a4740b96b9385fe37e7122ea 1138b2e48f41612b6912e78b1641ee76a952818f f0cc4ba69462a5ea7c8c69db31cddc2a81b25d52 6fe97730067a917a9821f778a62ce4bbbb4d9e7b f58afa976e2af3940eee0f473f383b267f769d35 b2a2be2f545c00353499f98edf4c93bd1c90a828 1e18d43a4d12a5a5cd8a92f48c9570dc2d934bda 9b42e297607b1092237808be8f7752d41b6f7ef0 5472937355d58cb67800f7c3b2efa82ca7e125ec 470feb157e0e074ebec52e4feb4217b94d48f767 e4aa0d9c5343430bd5df520c408f206ea4b34432 02521589a0e5f1956e187a634307dd0c4ae63ad0 857e2d355cbf9d52e5d3495911ee00df9f89a5a6 49bb4e6f3d081ffcec93a77cea462628aba76ce2 489721ba5b295ac34dede18a63036eca92005bae ae6289f6040351f53bc241dbb8943ac1bcafd52e 3b3936e253a123df93dd98cc31c11ad2a6b93fc3 6700ea7e89b8dfe63c6bc5f22afe090df60b20b0 16b9057f94ca8ba1e7a561a050c85f3beeced8d9 1f34bf7bf821b83794f2c8107c48234b62a60684 672e5451222a77b3f2d8b3ff69c9913eeb5f35cc 5bf4c3c1add760a4fa7eb6d9a280dc9a20fa8c00 b86f0b9158f783de19a1c37d75967ae4777c17a6 62dba01454982cb2462cf897915c17270c294c10 e858d793acb2e1074ed363958fa0f16aa7038a72 13cb7b1d78ebc4c525504e9a36aac1d6c75d1730 2e7676e21c23c9c9eca461007272bc2eaa7703ea 517d6d8b5a1685de06e5b8fe2c396a29e061e466 3e13ac230db6b053f7eef9f5448ab799133b3a9c 135a9be55d3df1d9948f2429aaf4fc00de5e712d,,Libcanard v2 0,- Closes #168   - Fixes #175   - Closes #176 -- while the demos that are shown in the README still don't use Nunavut  they are explicit about it.  - Closes #178 by removing the offending code (use Nunavut instead)    See the changelog in the README for a brief overview of the changes. The most interesting changes are two:    - Split API into smaller entities to improve its orthogonality and fix the problem of const correctness reported by Scott.  - Replace all linked lists with AVL trees to reduce the asymptotic complexity of both RX and TX pipelines from linear to logarithmic.    @coderkalyan do you want to include #171 into this release or should we wait for v2.1?
